{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"attac",
				"attack_t"
			],
			[
				"atta",
				"attack_t"
			],
			[
				"float",
				"float3_zero"
			],
			[
				"float3",
				"float3_one"
			],
			[
				"Abi",
				"AbilityType"
			],
			[
				"atat",
				"attak_t"
			],
			[
				"ts",
				"ts_swords_active"
			],
			[
				"isk",
				"IsKeyDown"
			],
			[
				"sphere",
				"DrawSphereWires(centerPos: Vector3, radius: f32, rings, slices: c.int, color: Color)"
			],
			[
				"drawwi",
				"DrawCapsuleWires(startPos, endPos: Vector3, radius: f32, slices, rings: c.int, color: Color)"
			],
			[
				"ro",
				"ROTATING_SHIELDS"
			],
			[
				"tsre",
				"ts_ready"
			],
			[
				"die",
				"Divine_Weapons_Mode"
			],
			[
				"entit",
				"Entity"
			],
			[
				"di",
				"Divine_Weapons"
			],
			[
				"ab",
				"ability_triggered"
			],
			[
				"darkgr",
				"DARKGREEN"
			],
			[
				"stopw",
				"stopwatch_stop(stopwatch: ^Stopwatch)"
			],
			[
				"stopwatc_",
				"stopwatch_reset(stopwatch: ^Stopwatch)"
			],
			[
				"up",
				"update_eventsystems"
			],
			[
				"firee",
				"fire_event_spawninfo"
			],
			[
				"fire",
				"fire_event_deathinfo"
			],
			[
				"evt",
				"evt_buffer_enemy_death"
			],
			[
				"entityf",
				"Entity_Flags"
			],
			[
				"Core",
				"Core_UI"
			],
			[
				"mov",
				"moveHorizontal"
			],
			[
				"kno",
				"Knockback"
			],
			[
				"entity",
				"Entity"
			],
			[
				"cubi",
				"ease_cubic_out(x: float) "
			],
			[
				"cub",
				"ease_cubic_out(x: float) "
			],
			[
				"rotatey",
				"Vector3RotateByAxisAngle(v: Vector3, axis: Vector3, angle: f32) "
			],
			[
				"shot",
				"shotgunvfxses"
			],
			[
				"shotg",
				"shotgunvfxses"
			],
			[
				"con",
				"ConeVFX"
			],
			[
				"calc",
				"calculateDirectionalFresnel"
			],
			[
				"assig",
				"assign_material_all_mats(model: ^raylib.Model, mat: raylib.Material)"
			],
			[
				"getene",
				"get_enemies_in_cone(pos, forward: float3, angle, range: float) "
			],
			[
				"sho",
				"shootTriggered"
			],
			[
				"len",
				"length2"
			],
			[
				"stop",
				"Stopwatch"
			],
			[
				"aa",
				"aabb_dirty"
			],
			[
				"boun",
				"DrawBoundingBox(box: BoundingBox, color: Color)"
			],
			[
				"bound",
				"GetMeshBoundingBox(mesh: Mesh) "
			],
			[
				"def",
				"default_lighting"
			],
			[
				"shaderid",
				"GetShaderIdDefault() "
			],
			[
				"max",
				"MAX_ENTITIES"
			],
			[
				"entma",
				"init_entity_manager() "
			],
			[
				"keypress",
				"IsKeyPressed(key: KeyboardKey) "
			],
			[
				"cro",
				"crossbow_model"
			],
			[
				"fres",
				"loc_fresnel"
			],
			[
				"fre",
				"player_fresnel_color"
			],
			[
				"setshaderv",
				"SetShaderValue(shader: Shader, locIndex: c.int, value: rawptr, uniformType: ShaderUniformDataType)"
			],
			[
				"cros",
				"crossbow_model"
			],
			[
				"assi",
				"assign_material_all_mats(model: ^raylib.Model, mat: raylib.Material)"
			],
			[
				"materia",
				"Material"
			],
			[
				"view",
				"viewDir"
			],
			[
				"lightdi",
				"dirLightDirection"
			],
			[
				"ve",
				"VEC4"
			],
			[
				"setsha",
				"SetShaderValue(shader: Shader, locIndex: c.int, value: rawptr, uniformType: ShaderUniformDataType)"
			],
			[
				"rad1",
				"RAD_180"
			],
			[
				"matrot",
				"MatrixRotateY(angle: f32) "
			],
			[
				"DrawModel",
				"DrawModelEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: f32, scale: Vector3, tint: Color)"
			],
			[
				"quaternionto",
				"QuaternionToMatrix(q: Quaternion) "
			],
			[
				"look",
				"look_rot(start, lookDir, up: float3) "
			],
			[
				"matrixrot",
				"MatrixRotateY(angle: f32) "
			],
			[
				"lookr",
				"look_rot(start, lookDir, up: float3) "
			],
			[
				"mode",
				"model_skeleton_ranger"
			],
			[
				"norm",
				"normalTexture"
			],
			[
				"no",
				"normal_from_tex"
			],
			[
				"sc",
				"scene_lights_dirty"
			],
			[
				"scene",
				"scene_lights_dirty"
			],
			[
				"sceneli",
				"scene_lights_dirty"
			],
			[
				"rang",
				"rand_range(min, max: float) "
			],
			[
				"fra",
				"fragNormal"
			],
			[
				"syt",
				"synty_mat"
			],
			[
				"scne",
				"scene_lighting_values"
			],
			[
				"color",
				"ColorNormalize(color: Color) "
			],
			[
				"amb",
				"ambientColor"
			],
			[
				"ambi",
				"ambientLoc"
			],
			[
				"colo",
				"color_f32"
			],
			[
				"setshaderva",
				"SetShaderValue(shader: Shader, locIndex: c.int, value: rawptr, uniformType: ShaderUniformDataType)"
			],
			[
				"inte",
				"intensity"
			],
			[
				"opt",
				"Options"
			],
			[
				"create_",
				"create_console_logger(lowest := Level.Debug, opt := Default_Console_Logger_Opts, ident := \"\", allocator := context.allocator) "
			],
			[
				"ty",
				"type_infos"
			],
			[
				"type_",
				"type_of(x: expr) "
			],
			[
				"struct",
				"struct_field_types(T: typeid) "
			],
			[
				"scn",
				"scene_lighting_values"
			],
			[
				"sce",
				"scene_lighting_values"
			],
			[
				"v",
				"VEC4"
			],
			[
				"defa",
				"default_shader"
			],
			[
				"setshval",
				"SetShaderValue(shader: Shader, locIndex: c.int, value: rawptr, uniformType: ShaderUniformDataType)"
			],
			[
				"fo",
				"fogDensity"
			],
			[
				"scenli",
				"SceneLightingValues"
			],
			[
				"loc_dirlight_",
				"loc_dir_light_intensity"
			],
			[
				"loc_dir",
				"loc_dirlight_pos"
			],
			[
				"sethader",
				"SetShaderValue(shader: Shader, locIndex: c.int, value: rawptr, uniformType: ShaderUniformDataType)"
			],
			[
				"rand",
				"float3_rand() "
			],
			[
				"light",
				"sun_light"
			],
			[
				"synt",
				"synt_atlas_1"
			],
			[
				"play",
				"player_accel"
			],
			[
				"plaer",
				"player_accel"
			],
			[
				"map",
				"MAP_NORMAL"
			],
			[
				"floor",
				"floor_normal"
			],
			[
				"getsha",
				"GetShaderLocation(shader: Shader, uniformName: cstring) "
			],
			[
				"setshader",
				"SetShaderValue(shader: Shader, locIndex: c.int, value: rawptr, uniformType: ShaderUniformDataType)"
			],
			[
				"ma",
				"MaterialMap"
			],
			[
				"d",
				"BRDF"
			],
			[
				"quat",
				"quaternion_identity"
			],
			[
				"lig",
				"lighting_instanced"
			],
			[
				"shader",
				"ShaderLocationIndex"
			],
			[
				"groun",
				"ground_tile_model"
			],
			[
				"mv",
				"MATRIX_MVP"
			],
			[
				"matrixtr",
				"MatrixTranslate(x, y, z: f32) "
			],
			[
				"grou",
				"ground_tile_model"
			],
			[
				"grounti",
				"ground_tile_model"
			],
			[
				"rot",
				"yRot"
			],
			[
				"drawmod",
				"DrawModelEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: f32, scale: Vector3, tint: Color)"
			],
			[
				"groundti",
				"ground_tile_model"
			],
			[
				"materi",
				"MaterialMapIndex"
			],
			[
				"unif",
				"ShaderUniformDataType"
			],
			[
				"loca",
				"ShaderLocationIndex"
			],
			[
				"defau",
				"LoadMaterialDefault() "
			],
			[
				"grout",
				"ground_tile_model"
			],
			[
				"rad",
				"RAD_180"
			],
			[
				"genmesh",
				"GenMeshPlane(width, length: f32, resX, resZ: c.int) "
			],
			[
				"vec",
				"VEC3"
			],
			[
				"m",
				"meshes"
			]
		]
	},
	"buffers":
	[
		{
			"file": "main.odin",
			"redo_stack":
			[
				[
					693,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:c\"\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport linalg \"core:math/linalg\"\r\nimport \"core:reflect\"\r\nimport \"core:time\"\r\nimport rl \"vendor:raylib\"\r\n\r\nmanager: EntityManager\r\n\r\n//ALIASES\r\nfloat :: f32\r\nfloat2 :: rl.Vector2\r\nfloat3 :: rl.Vector3\r\nfloat4 :: rl.Vector4\r\nfloat4_one :: rl.Vector4{1, 1, 1, 1}\r\nquaternion :: rl.Quaternion\r\nfloat3_up :: float3{0, 1, 0}\r\nfloat3_zero :: float3{}\r\nfloat3_one :: float3{1, 1, 1}\r\nfloat3_one_rl :: rl.Vector3{1, 1, 1}\r\nfloat3_fwd :: float3{0, 0, 1}\r\nfloat3_right :: float3{1, 0, 0}\r\nquaternion_identity :: linalg.QUATERNIONF32_IDENTITY\r\nint :: i32\r\n\r\nSCREEN_WIDTH: int\r\nSCREEN_HEIGHT: int\r\n\r\nwidth_windowed: int = 1920\r\nheight_windowed: int = 1080\r\nwidth_full: int = 2560\r\nheight_full: int = 1440\r\n\r\nFULL_SCREEN: bool = false\r\nPRINT_ENTITY_STRUCT: bool = false\r\nPRINT_PERF_METRICS: bool = false\r\n\r\nRAD_45: float\r\nRAD_90: float\r\nRAD_135: float\r\nRAD_180: float\r\nRAD_225: float\r\nRAD_270: float\r\n\r\nMAX_ENTITIES :: 10000\r\n\r\ntime_now: float\r\nnow_f64: f64\r\ndt: float\r\nupdate_procs: [dynamic]proc()\r\nlate_update_procs: [dynamic]proc()\r\ndraw_procs: [dynamic]proc()\r\n\r\nrender_target: rl.RenderTexture2D\r\nbloom_shader: rl.Shader\r\nsw: time.Stopwatch\r\n\r\n\r\nmain :: proc() \r\n{\r\n  context.logger = log.create_console_logger(.Debug, log.Location_Header_Opts)\r\n\r\n  SCREEN_WIDTH = FULL_SCREEN ? width_full : width_windowed\r\n  SCREEN_HEIGHT = FULL_SCREEN ? height_full : height_windowed\r\n  flags: rl.ConfigFlags = FULL_SCREEN ? {.MSAA_4X_HINT, .FULLSCREEN_MODE} : {.MSAA_4X_HINT}\r\n\r\n  RAD_45 = radians(float(45))\r\n  RAD_90 = radians(float(90))\r\n  RAD_135 = radians(float(135))\r\n  RAD_180 = radians(float(180))\r\n  RAD_225 = radians(float(225))\r\n  RAD_270 = radians(float(270))\r\n\r\n  update_procs = make([dynamic]proc())\r\n  late_update_procs = make([dynamic]proc())\r\n\r\n  manager = init_entity_manager()\r\n  defer destroy_entity_manager()\r\n\r\n  if PRINT_ENTITY_STRUCT {\r\n    log.debug(\"\\n\")\r\n    log.debug(\"==================\")\r\n    log.debug(\"ENTITY STRUCT INFO\")\r\n    log.debug(\"\\n\")\r\n    type_infos := reflect.struct_field_types(Entity)\r\n    type_names := reflect.struct_field_names(Entity)\r\n    for t, i in type_infos {\r\n      log.debug(\"field: \", type_names[i], type_infos[i].size)\r\n    }\r\n    log.debug(\"entity size total: \", size_of(Entity))\r\n  }\r\n\r\n\r\n  rl.SetTraceLogLevel(.WARNING)\r\n  rl.SetConfigFlags(flags)\r\n  rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Entity System Test\")\r\n\r\n  if FULL_SCREEN {\r\n    rl.SetWindowMonitor(0)\r\n  }\r\n\r\n  rl.SetTargetFPS(144)\r\n\r\n\r\n  //============ INIT ============\r\n\r\n  bloom_ctx: BloomContext\r\n  init_bloom(&bloom_ctx, SCREEN_WIDTH, SCREEN_HEIGHT)\r\n  defer cleanup_bloom(&bloom_ctx)\r\n\r\n  init_lighting()\r\n  init_input_handling()\r\n\r\n  append(&update_procs, update_aabbs)\r\n  append(&draw_procs, draw_aabbs)\r\n  init_camera()\r\n  init_player()\r\n  init_projectiles()\r\n  init_level_gen()\r\n  init_enemies()\r\n  init_knockback()\r\n\r\n\r\n  //late stuff\r\n  init_eventsystems()\r\n\r\n  for !rl.WindowShouldClose() {\r\n    time.stopwatch_reset(&sw)\r\n    time.stopwatch_start(&sw)\r\n\r\n    time_now = float(rl.GetTime())\r\n    dt = rl.GetFrameTime()\r\n\r\n\r\n    //tick\r\n    for &p in update_procs {\r\n      p()\r\n    }\r\n\r\n    //late tick\r\n    for &p in late_update_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    //Render\r\n\r\n    // Render scene to bloom buffer\r\n    begin_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginMode3D(camera)\r\n    //rl.DrawGrid(100, 1)\r\n\r\n    for &p in draw_procs {\r\n      p()\r\n    }\r\n\r\n    rl.EndMode3D()\r\n    end_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginDrawing()\r\n    rl.ClearBackground(rl.BLACK)\r\n    render_bloom(&bloom_ctx)\r\n\r\n    // PERF METRICS DISPLAY\r\n    if (rl.IsKeyPressed(.F1)) {\r\n      PRINT_PERF_METRICS = !PRINT_PERF_METRICS\r\n    }\r\n    if PRINT_PERF_METRICS {\r\n      rl.DrawFPS(10, 10)\r\n      dur := time.stopwatch_duration(sw)\r\n      rl.DrawText(rl.TextFormat(\"CPU %.2f\", dur), 10, 40, 18, rl.WHITE)\r\n    }\r\n\r\n    rl.EndDrawing()\r\n\r\n\r\n    //REST TEMP ALLOC\r\n    free_all(context.temp_allocator)\r\n    time.stopwatch_stop(&sw)\r\n  }\r\n\r\n  log.debug(\"\\n\")\r\n  log.debug(\"==================== SHUT DOWN ====================\\n\")\r\n  rl.CloseWindow()\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 189
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAXw8AAAAAAABbDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6YyIKaW1wb3J0ICJjb3JlOmZtdCIKaW1wb3J0ICJjb3JlOmxvZyIKaW1wb3J0IGxpbmFsZyAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOnJlZmxlY3QiCmltcG9ydCAiY29yZTp0aW1lIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgptYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyCgovL0FMSUFTRVMKZmxvYXQgOjogZjMyCmZsb2F0MiA6OiBybC5WZWN0b3IyCmZsb2F0MyA6OiBybC5WZWN0b3IzCmZsb2F0NCA6OiBybC5WZWN0b3I0CmZsb2F0NF9vbmUgOjogcmwuVmVjdG9yNHsxLCAxLCAxLCAxfQpxdWF0ZXJuaW9uIDo6IHJsLlF1YXRlcm5pb24KZmxvYXQzX3VwIDo6IGZsb2F0M3swLCAxLCAwfQpmbG9hdDNfemVybyA6OiBmbG9hdDN7fQpmbG9hdDNfb25lIDo6IGZsb2F0M3sxLCAxLCAxfQpmbG9hdDNfb25lX3JsIDo6IHJsLlZlY3RvcjN7MSwgMSwgMX0KZmxvYXQzX2Z3ZCA6OiBmbG9hdDN7MCwgMCwgMX0KZmxvYXQzX3JpZ2h0IDo6IGZsb2F0M3sxLCAwLCAwfQpxdWF0ZXJuaW9uX2lkZW50aXR5IDo6IGxpbmFsZy5RVUFURVJOSU9ORjMyX0lERU5USVRZCmludCA6OiBpMzIKClNDUkVFTl9XSURUSDogaW50ClNDUkVFTl9IRUlHSFQ6IGludAoKd2lkdGhfd2luZG93ZWQ6IGludCA9IDE5MjAKaGVpZ2h0X3dpbmRvd2VkOiBpbnQgPSAxMDgwCndpZHRoX2Z1bGw6IGludCA9IDI1NjAKaGVpZ2h0X2Z1bGw6IGludCA9IDE0NDAKCkZVTExfU0NSRUVOOiBib29sID0gZmFsc2UKUFJJTlRfRU5USVRZX1NUUlVDVDogYm9vbCA9IGZhbHNlClBSSU5UX1BFUkZfTUVUUklDUzogYm9vbCA9IGZhbHNlCgpSQURfNDU6IGZsb2F0ClJBRF85MDogZmxvYXQKUkFEXzEzNTogZmxvYXQKUkFEXzE4MDogZmxvYXQKUkFEXzIyNTogZmxvYXQKUkFEXzI3MDogZmxvYXQKCk1BWF9FTlRJVElFUyA6OiAxMDAwMAoKdGltZV9ub3c6IGZsb2F0Cm5vd19mNjQ6IGY2NApkdDogZmxvYXQKdXBkYXRlX3Byb2NzOiBbZHluYW1pY11wcm9jKCkKbGF0ZV91cGRhdGVfcHJvY3M6IFtkeW5hbWljXXByb2MoKQpkcmF3X3Byb2NzOiBbZHluYW1pY11wcm9jKCkKCnJlbmRlcl90YXJnZXQ6IHJsLlJlbmRlclRleHR1cmUyRApibG9vbV9zaGFkZXI6IHJsLlNoYWRlcgpzdzogdGltZS5TdG9wd2F0Y2gKCgptYWluIDo6IHByb2MoKSAKewogIGNvbnRleHQubG9nZ2VyID0gbG9nLmNyZWF0ZV9jb25zb2xlX2xvZ2dlciguRGVidWcsIGxvZy5Mb2NhdGlvbl9IZWFkZXJfT3B0cykKCiAgU0NSRUVOX1dJRFRIID0gRlVMTF9TQ1JFRU4gPyB3aWR0aF9mdWxsIDogd2lkdGhfd2luZG93ZWQKICBTQ1JFRU5fSEVJR0hUID0gRlVMTF9TQ1JFRU4gPyBoZWlnaHRfZnVsbCA6IGhlaWdodF93aW5kb3dlZAogIGZsYWdzOiBybC5Db25maWdGbGFncyA9IEZVTExfU0NSRUVOID8gey5NU0FBXzRYX0hJTlQsIC5GVUxMU0NSRUVOX01PREV9IDogey5NU0FBXzRYX0hJTlR9CgogIFJBRF80NSA9IHJhZGlhbnMoZmxvYXQoNDUpKQogIFJBRF85MCA9IHJhZGlhbnMoZmxvYXQoOTApKQogIFJBRF8xMzUgPSByYWRpYW5zKGZsb2F0KDEzNSkpCiAgUkFEXzE4MCA9IHJhZGlhbnMoZmxvYXQoMTgwKSkKICBSQURfMjI1ID0gcmFkaWFucyhmbG9hdCgyMjUpKQogIFJBRF8yNzAgPSByYWRpYW5zKGZsb2F0KDI3MCkpCgogIHVwZGF0ZV9wcm9jcyA9IG1ha2UoW2R5bmFtaWNdcHJvYygpKQogIGxhdGVfdXBkYXRlX3Byb2NzID0gbWFrZShbZHluYW1pY11wcm9jKCkpCgogIG1hbmFnZXIgPSBpbml0X2VudGl0eV9tYW5hZ2VyKCkKICBkZWZlciBkZXN0cm95X2VudGl0eV9tYW5hZ2VyKCkKCiAgaWYgUFJJTlRfRU5USVRZX1NUUlVDVCB7CiAgICBsb2cuZGVidWcoIlxuIikKICAgIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09IikKICAgIGxvZy5kZWJ1ZygiRU5USVRZIFNUUlVDVCBJTkZPIikKICAgIGxvZy5kZWJ1ZygiXG4iKQogICAgdHlwZV9pbmZvcyA6PSByZWZsZWN0LnN0cnVjdF9maWVsZF90eXBlcyhFbnRpdHkpCiAgICB0eXBlX25hbWVzIDo9IHJlZmxlY3Quc3RydWN0X2ZpZWxkX25hbWVzKEVudGl0eSkKICAgIGZvciB0LCBpIGluIHR5cGVfaW5mb3MgewogICAgICBsb2cuZGVidWcoImZpZWxkOiAiLCB0eXBlX25hbWVzW2ldLCB0eXBlX2luZm9zW2ldLnNpemUpCiAgICB9CiAgICBsb2cuZGVidWcoImVudGl0eSBzaXplIHRvdGFsOiAiLCBzaXplX29mKEVudGl0eSkpCiAgfQoKCiAgcmwuU2V0VHJhY2VMb2dMZXZlbCguV0FSTklORykKICBybC5TZXRDb25maWdGbGFncyhmbGFncykKICBybC5Jbml0V2luZG93KFNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCwgIkVudGl0eSBTeXN0ZW0gVGVzdCIpCgogIGlmIEZVTExfU0NSRUVOIHsKICAgIHJsLlNldFdpbmRvd01vbml0b3IoMCkKICB9CgogIHJsLlNldFRhcmdldEZQUygxNDQpCgoKICAvLz09PT09PT09PT09PSBJTklUID09PT09PT09PT09PQoKICBibG9vbV9jdHg6IEJsb29tQ29udGV4dAogIGluaXRfYmxvb20oJmJsb29tX2N0eCwgU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUKQogIGRlZmVyIGNsZWFudXBfYmxvb20oJmJsb29tX2N0eCkKCiAgaW5pdF9saWdodGluZygpCiAgaW5pdF9pbnB1dF9oYW5kbGluZygpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfYWFiYnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2FhYmJzKQogIGluaXRfY2FtZXJhKCkKICBpbml0X3BsYXllcigpCiAgaW5pdF9wcm9qZWN0aWxlcygpCiAgaW5pdF9sZXZlbF9nZW4oKQogIGluaXRfZW5lbWllcygpCiAgaW5pdF9rbm9ja2JhY2soKQoKCiAgLy9sYXRlIHN0dWZmCiAgaW5pdF9ldmVudHN5c3RlbXMoKQoKICBmb3IgIXJsLldpbmRvd1Nob3VsZENsb3NlKCkgewogICAgdGltZS5zdG9wd2F0Y2hfcmVzZXQoJnN3KQogICAgdGltZS5zdG9wd2F0Y2hfc3RhcnQoJnN3KQoKICAgIHRpbWVfbm93ID0gZmxvYXQocmwuR2V0VGltZSgpKQogICAgZHQgPSBybC5HZXRGcmFtZVRpbWUoKQoKCiAgICAvL3RpY2sKICAgIGZvciAmcCBpbiB1cGRhdGVfcHJvY3MgewogICAgICBwKCkKICAgIH0KCiAgICAvL2xhdGUgdGljawogICAgZm9yICZwIGluIGxhdGVfdXBkYXRlX3Byb2NzIHsKICAgICAgcCgpCiAgICB9CgoKICAgIC8vUmVuZGVyCgogICAgLy8gUmVuZGVyIHNjZW5lIHRvIGJsb29tIGJ1ZmZlcgogICAgYmVnaW5fYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbk1vZGUzRChjYW1lcmEpCiAgICAvL3JsLkRyYXdHcmlkKDEwMCwgMSkKCiAgICBmb3IgJnAgaW4gZHJhd19wcm9jcyB7CiAgICAgIHAoKQogICAgfQoKICAgIHJsLkVuZE1vZGUzRCgpCiAgICBlbmRfYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbkRyYXdpbmcoKQogICAgcmwuQ2xlYXJCYWNrZ3JvdW5kKHJsLkJMQUNLKQogICAgcmVuZGVyX2Jsb29tKCZibG9vbV9jdHgpCgogICAgLy8gUEVSRiBNRVRSSUNTIERJU1BMQVkKICAgIGlmIChybC5Jc0tleVByZXNzZWQoLkYxKSkgewogICAgICBQUklOVF9QRVJGX01FVFJJQ1MgPSAhUFJJTlRfUEVSRl9NRVRSSUNTCiAgICB9CiAgICBpZiBQUklOVF9QRVJGX01FVFJJQ1MgewogICAgICBybC5EcmF3RlBTKDEwLCAxMCkKICAgICAgZHVyIDo9IHRpbWUuc3RvcHdhdGNoX2R1cmF0aW9uKHN3KQogICAgICBybC5EcmF3VGV4dChybC5UZXh0Rm9ybWF0KCJDUFUgJS4yZiIsIGR1ciksIDEwLCA0MCwgMTgsIHJsLldISVRFKQogICAgfQoKICAgIHJsLkVuZERyYXdpbmcoKQoKCiAgICAvL1JFU1QgVEVNUCBBTExPQwogICAgZnJlZV9hbGwoY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICAgIHRpbWUuc3RvcHdhdGNoX3N0b3AoJnN3KQogIH0KCiAgbG9nLmRlYnVnKCJcbiIpCiAgbG9nLmRlYnVnKCI9PT09PT09PT09PT09PT09PT09PSBTSFVUIERPV04gPT09PT09PT09PT09PT09PT09PT1cbiIpCiAgcmwuQ2xvc2VXaW5kb3coKQp9Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAsAAAAAAACcCwAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 3935,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					571,
					2,
					"left_delete",
					null,
					"AgAAAFAJAAAAAAAAUAkAAAAAAAABAAAAL08JAAAAAAAATwkAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQkAAAAAAABRCQAAAAAAAAAAAAAAAPC/"
				],
				[
					573,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:c\"\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport linalg \"core:math/linalg\"\r\nimport \"core:reflect\"\r\nimport \"core:time\"\r\nimport rl \"vendor:raylib\"\r\n\r\nmanager: EntityManager\r\n\r\n//ALIASES\r\nfloat :: f32\r\nfloat2 :: rl.Vector2\r\nfloat3 :: rl.Vector3\r\nfloat4 :: rl.Vector4\r\nfloat4_one :: rl.Vector4{1, 1, 1, 1}\r\nquaternion :: rl.Quaternion\r\nfloat3_up :: float3{0, 1, 0}\r\nfloat3_zero :: float3{}\r\nfloat3_one :: float3{1, 1, 1}\r\nfloat3_one_rl :: rl.Vector3{1, 1, 1}\r\nfloat3_fwd :: float3{0, 0, 1}\r\nfloat3_right :: float3{1, 0, 0}\r\nquaternion_identity :: linalg.QUATERNIONF32_IDENTITY\r\nint :: i32\r\n\r\nSCREEN_WIDTH: int\r\nSCREEN_HEIGHT: int\r\n\r\nwidth_windowed: int = 1920\r\nheight_windowed: int = 1080\r\nwidth_full: int = 2560\r\nheight_full: int = 1440\r\n\r\nFULL_SCREEN: bool = false\r\nPRINT_ENTITY_STRUCT: bool = false\r\nPRINT_PERF_METRICS: bool = false\r\n\r\nRAD_45: float\r\nRAD_90: float\r\nRAD_135: float\r\nRAD_180: float\r\nRAD_225: float\r\nRAD_270: float\r\n\r\nMAX_ENTITIES :: 10000\r\n\r\ntime_now: float\r\nnow_f64: f64\r\ndt: float\r\nupdate_procs: [dynamic]proc()\r\nlate_update_procs: [dynamic]proc()\r\ndraw_procs: [dynamic]proc()\r\n\r\nrender_target: rl.RenderTexture2D\r\nbloom_shader: rl.Shader\r\nsw: time.Stopwatch\r\n\r\n\r\nmain :: proc() \r\n{\r\n  context.logger = log.create_console_logger(.Debug, log.Location_Header_Opts)\r\n\r\n  SCREEN_WIDTH = FULL_SCREEN ? width_full : width_windowed\r\n  SCREEN_HEIGHT = FULL_SCREEN ? height_full : height_windowed\r\n  flags: rl.ConfigFlags = FULL_SCREEN ? {.MSAA_4X_HINT, .FULLSCREEN_MODE} : {.MSAA_4X_HINT}\r\n\r\n  RAD_45 = radians(float(45))\r\n  RAD_90 = radians(float(90))\r\n  RAD_135 = radians(float(135))\r\n  RAD_180 = radians(float(180))\r\n  RAD_225 = radians(float(225))\r\n  RAD_270 = radians(float(270))\r\n\r\n  update_procs = make([dynamic]proc())\r\n  late_update_procs = make([dynamic]proc())\r\n\r\n  manager = init_entity_manager()\r\n  defer destroy_entity_manager()\r\n\r\n  if PRINT_ENTITY_STRUCT {\r\n    log.debug(\"\\n\")\r\n    log.debug(\"==================\")\r\n    log.debug(\"ENTITY STRUCT INFO\")\r\n    log.debug(\"\\n\")\r\n    type_infos := reflect.struct_field_types(Entity)\r\n    type_names := reflect.struct_field_names(Entity)\r\n    for t, i in type_infos {\r\n      log.debug(\"field: \", type_names[i], type_infos[i].size)\r\n    }\r\n    log.debug(\"entity size total: \", size_of(Entity))\r\n  }\r\n\r\n\r\n  rl.SetTraceLogLevel(.WARNING)\r\n  rl.SetConfigFlags(flags)\r\n  rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Entity System Test\")\r\n\r\n  if FULL_SCREEN {\r\n    rl.SetWindowMonitor(0)\r\n  }\r\n\r\n  rl.SetTargetFPS(144)\r\n\r\n\r\n  //============ INIT ============\r\n\r\n  bloom_ctx: BloomContext\r\n  init_bloom(&bloom_ctx, SCREEN_WIDTH, SCREEN_HEIGHT)\r\n  defer cleanup_bloom(&bloom_ctx)\r\n\r\n  init_lighting()\r\n  init_input_handling()\r\n\r\n  append(&update_procs, update_aabbs)\r\n  append(&draw_procs, draw_aabbs)\r\n  init_camera()\r\n  init_player()\r\n  init_projectiles()\r\n  init_level_gen()\r\n  init_enemies()\r\n  init_knockback()\r\n\r\n\r\n  //late stuff\r\n  init_eventsystems()\r\n\r\n  for !rl.WindowShouldClose() {\r\n    time.stopwatch_reset(&sw)\r\n    time.stopwatch_start(&sw)\r\n\r\n    time_now = float(rl.GetTime())\r\n    dt = rl.GetFrameTime()\r\n\r\n\r\n    //tick\r\n    for &p in update_procs {\r\n      p()\r\n    }\r\n\r\n    //late tick\r\n    for &p in late_update_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    //Render\r\n\r\n    // Render scene to bloom buffer\r\n    begin_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginMode3D(camera)\r\n    //rl.DrawGrid(100, 1)\r\n\r\n    for &p in draw_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    rl.EndMode3D()\r\n\r\n    end_bloom_scene(&bloom_ctx)\r\n    rl.BeginDrawing()\r\n    rl.ClearBackground(rl.BLACK)\r\n\r\n    render_bloom(&bloom_ctx)\r\n\r\n\r\n    // PERF METRICS DISPLAY\r\n    if (rl.IsKeyPressed(.F1)) {\r\n      PRINT_PERF_METRICS = !PRINT_PERF_METRICS\r\n    }\r\n    if PRINT_PERF_METRICS {\r\n      rl.DrawFPS(10, 10)\r\n      rl.DrawText(rl.TextFormat(\"CPU %.2f\", time.stopwatch_duration(sw)), 10, 40, 16, rl.GREEN)\r\n    }\r\n\r\n    rl.EndDrawing()\r\n\r\n\r\n    //REST TEMP ALLOC\r\n    free_all(context.temp_allocator)\r\n    time.stopwatch_stop(&sw)\r\n  }\r\n\r\n  log.debug(\"\\n\")\r\n  log.debug(\"==================== SHUT DOWN ====================\\n\")\r\n  rl.CloseWindow()\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 191
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAATQ8AAAAAAABNDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6YyIKaW1wb3J0ICJjb3JlOmZtdCIKaW1wb3J0ICJjb3JlOmxvZyIKaW1wb3J0IGxpbmFsZyAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOnJlZmxlY3QiCmltcG9ydCAiY29yZTp0aW1lIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgptYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyCgovL0FMSUFTRVMKZmxvYXQgOjogZjMyCmZsb2F0MiA6OiBybC5WZWN0b3IyCmZsb2F0MyA6OiBybC5WZWN0b3IzCmZsb2F0NCA6OiBybC5WZWN0b3I0CmZsb2F0NF9vbmUgOjogcmwuVmVjdG9yNHsxLCAxLCAxLCAxfQpxdWF0ZXJuaW9uIDo6IHJsLlF1YXRlcm5pb24KZmxvYXQzX3VwIDo6IGZsb2F0M3swLCAxLCAwfQpmbG9hdDNfemVybyA6OiBmbG9hdDN7fQpmbG9hdDNfb25lIDo6IGZsb2F0M3sxLCAxLCAxfQpmbG9hdDNfb25lX3JsIDo6IHJsLlZlY3RvcjN7MSwgMSwgMX0KZmxvYXQzX2Z3ZCA6OiBmbG9hdDN7MCwgMCwgMX0KZmxvYXQzX3JpZ2h0IDo6IGZsb2F0M3sxLCAwLCAwfQpxdWF0ZXJuaW9uX2lkZW50aXR5IDo6IGxpbmFsZy5RVUFURVJOSU9ORjMyX0lERU5USVRZCmludCA6OiBpMzIKClNDUkVFTl9XSURUSDogaW50ClNDUkVFTl9IRUlHSFQ6IGludAoKd2lkdGhfd2luZG93ZWQ6IGludCA9IDE5MjAKaGVpZ2h0X3dpbmRvd2VkOiBpbnQgPSAxMDgwCndpZHRoX2Z1bGw6IGludCA9IDI1NjAKaGVpZ2h0X2Z1bGw6IGludCA9IDE0NDAKCkZVTExfU0NSRUVOOiBib29sID0gZmFsc2UKUFJJTlRfRU5USVRZX1NUUlVDVDogYm9vbCA9IGZhbHNlClBSSU5UX1BFUkZfTUVUUklDUzogYm9vbCA9IGZhbHNlCgpSQURfNDU6IGZsb2F0ClJBRF85MDogZmxvYXQKUkFEXzEzNTogZmxvYXQKUkFEXzE4MDogZmxvYXQKUkFEXzIyNTogZmxvYXQKUkFEXzI3MDogZmxvYXQKCk1BWF9FTlRJVElFUyA6OiAxMDAwMAoKdGltZV9ub3c6IGZsb2F0Cm5vd19mNjQ6IGY2NApkdDogZmxvYXQKdXBkYXRlX3Byb2NzOiBbZHluYW1pY11wcm9jKCkKbGF0ZV91cGRhdGVfcHJvY3M6IFtkeW5hbWljXXByb2MoKQpkcmF3X3Byb2NzOiBbZHluYW1pY11wcm9jKCkKCnJlbmRlcl90YXJnZXQ6IHJsLlJlbmRlclRleHR1cmUyRApibG9vbV9zaGFkZXI6IHJsLlNoYWRlcgpzdzogdGltZS5TdG9wd2F0Y2gKCgptYWluIDo6IHByb2MoKSAKewogIGNvbnRleHQubG9nZ2VyID0gbG9nLmNyZWF0ZV9jb25zb2xlX2xvZ2dlciguRGVidWcsIGxvZy5Mb2NhdGlvbl9IZWFkZXJfT3B0cykKCiAgU0NSRUVOX1dJRFRIID0gRlVMTF9TQ1JFRU4gPyB3aWR0aF9mdWxsIDogd2lkdGhfd2luZG93ZWQKICBTQ1JFRU5fSEVJR0hUID0gRlVMTF9TQ1JFRU4gPyBoZWlnaHRfZnVsbCA6IGhlaWdodF93aW5kb3dlZAogIGZsYWdzOiBybC5Db25maWdGbGFncyA9IEZVTExfU0NSRUVOID8gey5NU0FBXzRYX0hJTlQsIC5GVUxMU0NSRUVOX01PREV9IDogey5NU0FBXzRYX0hJTlR9CgogIFJBRF80NSA9IHJhZGlhbnMoZmxvYXQoNDUpKQogIFJBRF85MCA9IHJhZGlhbnMoZmxvYXQoOTApKQogIFJBRF8xMzUgPSByYWRpYW5zKGZsb2F0KDEzNSkpCiAgUkFEXzE4MCA9IHJhZGlhbnMoZmxvYXQoMTgwKSkKICBSQURfMjI1ID0gcmFkaWFucyhmbG9hdCgyMjUpKQogIFJBRF8yNzAgPSByYWRpYW5zKGZsb2F0KDI3MCkpCgogIHVwZGF0ZV9wcm9jcyA9IG1ha2UoW2R5bmFtaWNdcHJvYygpKQogIGxhdGVfdXBkYXRlX3Byb2NzID0gbWFrZShbZHluYW1pY11wcm9jKCkpCgogIG1hbmFnZXIgPSBpbml0X2VudGl0eV9tYW5hZ2VyKCkKICBkZWZlciBkZXN0cm95X2VudGl0eV9tYW5hZ2VyKCkKCiAgaWYgUFJJTlRfRU5USVRZX1NUUlVDVCB7CiAgICBsb2cuZGVidWcoIlxuIikKICAgIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09IikKICAgIGxvZy5kZWJ1ZygiRU5USVRZIFNUUlVDVCBJTkZPIikKICAgIGxvZy5kZWJ1ZygiXG4iKQogICAgdHlwZV9pbmZvcyA6PSByZWZsZWN0LnN0cnVjdF9maWVsZF90eXBlcyhFbnRpdHkpCiAgICB0eXBlX25hbWVzIDo9IHJlZmxlY3Quc3RydWN0X2ZpZWxkX25hbWVzKEVudGl0eSkKICAgIGZvciB0LCBpIGluIHR5cGVfaW5mb3MgewogICAgICBsb2cuZGVidWcoImZpZWxkOiAiLCB0eXBlX25hbWVzW2ldLCB0eXBlX2luZm9zW2ldLnNpemUpCiAgICB9CiAgICBsb2cuZGVidWcoImVudGl0eSBzaXplIHRvdGFsOiAiLCBzaXplX29mKEVudGl0eSkpCiAgfQoKCiAgcmwuU2V0VHJhY2VMb2dMZXZlbCguV0FSTklORykKICBybC5TZXRDb25maWdGbGFncyhmbGFncykKICBybC5Jbml0V2luZG93KFNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCwgIkVudGl0eSBTeXN0ZW0gVGVzdCIpCgogIGlmIEZVTExfU0NSRUVOIHsKICAgIHJsLlNldFdpbmRvd01vbml0b3IoMCkKICB9CgogIHJsLlNldFRhcmdldEZQUygxNDQpCgoKICAvLz09PT09PT09PT09PSBJTklUID09PT09PT09PT09PQoKICBibG9vbV9jdHg6IEJsb29tQ29udGV4dAogIGluaXRfYmxvb20oJmJsb29tX2N0eCwgU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUKQogIGRlZmVyIGNsZWFudXBfYmxvb20oJmJsb29tX2N0eCkKCiAgaW5pdF9saWdodGluZygpCiAgaW5pdF9pbnB1dF9oYW5kbGluZygpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfYWFiYnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2FhYmJzKQogIGluaXRfY2FtZXJhKCkKICBpbml0X3BsYXllcigpCiAgaW5pdF9wcm9qZWN0aWxlcygpCiAgaW5pdF9sZXZlbF9nZW4oKQogIGluaXRfZW5lbWllcygpCiAgaW5pdF9rbm9ja2JhY2soKQoKCiAgLy9sYXRlIHN0dWZmCiAgaW5pdF9ldmVudHN5c3RlbXMoKQoKICBmb3IgIXJsLldpbmRvd1Nob3VsZENsb3NlKCkgewogICAgdGltZS5zdG9wd2F0Y2hfcmVzZXQoJnN3KQogICAgdGltZS5zdG9wd2F0Y2hfc3RhcnQoJnN3KQoKICAgIHRpbWVfbm93ID0gZmxvYXQocmwuR2V0VGltZSgpKQogICAgZHQgPSBybC5HZXRGcmFtZVRpbWUoKQoKCiAgICAvL3RpY2sKICAgIGZvciAmcCBpbiB1cGRhdGVfcHJvY3MgewogICAgICBwKCkKICAgIH0KCiAgICAvL2xhdGUgdGljawogICAgZm9yICZwIGluIGxhdGVfdXBkYXRlX3Byb2NzIHsKICAgICAgcCgpCiAgICB9CgoKICAgIC8vUmVuZGVyCgogICAgLy8gUmVuZGVyIHNjZW5lIHRvIGJsb29tIGJ1ZmZlcgogICAgYmVnaW5fYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbk1vZGUzRChjYW1lcmEpCiAgICAvL3JsLkRyYXdHcmlkKDEwMCwgMSkKCiAgICBmb3IgJnAgaW4gZHJhd19wcm9jcyB7CiAgICAgIHAoKQogICAgfQoKCiAgICBybC5FbmRNb2RlM0QoKQoKICAgIGVuZF9ibG9vbV9zY2VuZSgmYmxvb21fY3R4KQogICAgcmwuQmVnaW5EcmF3aW5nKCkKICAgIHJsLkNsZWFyQmFja2dyb3VuZChybC5CTEFDSykKCiAgICByZW5kZXJfYmxvb20oJmJsb29tX2N0eCkKCgogICAgLy8gUEVSRiBNRVRSSUNTIERJU1BMQVkKICAgIGlmIChybC5Jc0tleVByZXNzZWQoLkYxKSkgewogICAgICBQUklOVF9QRVJGX01FVFJJQ1MgPSAhUFJJTlRfUEVSRl9NRVRSSUNTCiAgICB9CiAgICBpZiBQUklOVF9QRVJGX01FVFJJQ1MgewogICAgICBybC5EcmF3RlBTKDEwLCAxMCkKICAgICAgcmwuRHJhd1RleHQocmwuVGV4dEZvcm1hdCgiQ1BVICUuMmYiLCB0aW1lLnN0b3B3YXRjaF9kdXJhdGlvbihzdykpLCAxMCwgNDAsIDE2LCBybC5HUkVFTikKICAgIH0KCiAgICBybC5FbmREcmF3aW5nKCkKCgogICAgLy9SRVNUIFRFTVAgQUxMT0MKICAgIGZyZWVfYWxsKGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgICB0aW1lLnN0b3B3YXRjaF9zdG9wKCZzdykKICB9CgogIGxvZy5kZWJ1ZygiXG4iKQogIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09PT0gU0hVVCBET1dOID09PT09PT09PT09PT09PT09PT09XG4iKQogIHJsLkNsb3NlV2luZG93KCkKfQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwkAAAAAAABPCQAAAAAAAAAAAAAAAPC/"
				],
				[
					578,
					1,
					"left_delete",
					null,
					"AQAAAFoOAAAAAAAAWg4AAAAAAAABAAAANg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWw4AAAAAAABbDgAAAAAAAAAAAAAAAPC/"
				],
				[
					579,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AQAAAFoOAAAAAAAAWw4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWg4AAAAAAABaDgAAAAAAAAAAAAAAAPC/"
				],
				[
					581,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:c\"\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport linalg \"core:math/linalg\"\r\nimport \"core:reflect\"\r\nimport \"core:time\"\r\nimport rl \"vendor:raylib\"\r\n\r\nmanager: EntityManager\r\n\r\n//ALIASES\r\nfloat :: f32\r\nfloat2 :: rl.Vector2\r\nfloat3 :: rl.Vector3\r\nfloat4 :: rl.Vector4\r\nfloat4_one :: rl.Vector4{1, 1, 1, 1}\r\nquaternion :: rl.Quaternion\r\nfloat3_up :: float3{0, 1, 0}\r\nfloat3_zero :: float3{}\r\nfloat3_one :: float3{1, 1, 1}\r\nfloat3_one_rl :: rl.Vector3{1, 1, 1}\r\nfloat3_fwd :: float3{0, 0, 1}\r\nfloat3_right :: float3{1, 0, 0}\r\nquaternion_identity :: linalg.QUATERNIONF32_IDENTITY\r\nint :: i32\r\n\r\nSCREEN_WIDTH: int\r\nSCREEN_HEIGHT: int\r\n\r\nwidth_windowed: int = 1920\r\nheight_windowed: int = 1080\r\nwidth_full: int = 2560\r\nheight_full: int = 1440\r\n\r\nFULL_SCREEN: bool = false\r\nPRINT_ENTITY_STRUCT: bool = false\r\nPRINT_PERF_METRICS: bool = false\r\n\r\nRAD_45: float\r\nRAD_90: float\r\nRAD_135: float\r\nRAD_180: float\r\nRAD_225: float\r\nRAD_270: float\r\n\r\nMAX_ENTITIES :: 10000\r\n\r\ntime_now: float\r\nnow_f64: f64\r\ndt: float\r\nupdate_procs: [dynamic]proc()\r\nlate_update_procs: [dynamic]proc()\r\ndraw_procs: [dynamic]proc()\r\n\r\nrender_target: rl.RenderTexture2D\r\nbloom_shader: rl.Shader\r\nsw: time.Stopwatch\r\n\r\n\r\nmain :: proc() \r\n{\r\n  context.logger = log.create_console_logger(.Debug, log.Location_Header_Opts)\r\n\r\n  SCREEN_WIDTH = FULL_SCREEN ? width_full : width_windowed\r\n  SCREEN_HEIGHT = FULL_SCREEN ? height_full : height_windowed\r\n  flags: rl.ConfigFlags = FULL_SCREEN ? {.MSAA_4X_HINT, .FULLSCREEN_MODE} : {.MSAA_4X_HINT}\r\n\r\n  RAD_45 = radians(float(45))\r\n  RAD_90 = radians(float(90))\r\n  RAD_135 = radians(float(135))\r\n  RAD_180 = radians(float(180))\r\n  RAD_225 = radians(float(225))\r\n  RAD_270 = radians(float(270))\r\n\r\n  update_procs = make([dynamic]proc())\r\n  late_update_procs = make([dynamic]proc())\r\n\r\n  manager = init_entity_manager()\r\n  defer destroy_entity_manager()\r\n\r\n  if PRINT_ENTITY_STRUCT {\r\n    log.debug(\"\\n\")\r\n    log.debug(\"==================\")\r\n    log.debug(\"ENTITY STRUCT INFO\")\r\n    log.debug(\"\\n\")\r\n    type_infos := reflect.struct_field_types(Entity)\r\n    type_names := reflect.struct_field_names(Entity)\r\n    for t, i in type_infos {\r\n      log.debug(\"field: \", type_names[i], type_infos[i].size)\r\n    }\r\n    log.debug(\"entity size total: \", size_of(Entity))\r\n  }\r\n\r\n\r\n  rl.SetTraceLogLevel(.WARNING)\r\n  rl.SetConfigFlags(flags)\r\n  rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Entity System Test\")\r\n\r\n  if FULL_SCREEN {\r\n    rl.SetWindowMonitor(0)\r\n  }\r\n\r\n  rl.SetTargetFPS(144)\r\n\r\n\r\n  //============ INIT ============\r\n\r\n  bloom_ctx: BloomContext\r\n  init_bloom(&bloom_ctx, SCREEN_WIDTH, SCREEN_HEIGHT)\r\n  defer cleanup_bloom(&bloom_ctx)\r\n\r\n  init_lighting()\r\n  init_input_handling()\r\n\r\n  append(&update_procs, update_aabbs)\r\n  append(&draw_procs, draw_aabbs)\r\n  init_camera()\r\n  init_player()\r\n  init_projectiles()\r\n  init_level_gen()\r\n  init_enemies()\r\n  init_knockback()\r\n\r\n\r\n  //late stuff\r\n  init_eventsystems()\r\n\r\n  for !rl.WindowShouldClose() {\r\n    time.stopwatch_reset(&sw)\r\n    time.stopwatch_start(&sw)\r\n\r\n    time_now = float(rl.GetTime())\r\n    dt = rl.GetFrameTime()\r\n\r\n\r\n    //tick\r\n    for &p in update_procs {\r\n      p()\r\n    }\r\n\r\n    //late tick\r\n    for &p in late_update_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    //Render\r\n\r\n    // Render scene to bloom buffer\r\n    begin_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginMode3D(camera)\r\n    //rl.DrawGrid(100, 1)\r\n\r\n    for &p in draw_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    rl.EndMode3D()\r\n\r\n    end_bloom_scene(&bloom_ctx)\r\n    rl.BeginDrawing()\r\n    rl.ClearBackground(rl.BLACK)\r\n\r\n    render_bloom(&bloom_ctx)\r\n\r\n\r\n    // PERF METRICS DISPLAY\r\n    if (rl.IsKeyPressed(.F1)) {\r\n      PRINT_PERF_METRICS = !PRINT_PERF_METRICS\r\n    }\r\n    if PRINT_PERF_METRICS {\r\n      rl.DrawFPS(10, 10)\r\n      rl.DrawText(rl.TextFormat(\"CPU %.2f\", time.stopwatch_duration(sw)), 10, 40, 18, rl.GREEN)\r\n    }\r\n\r\n    rl.EndDrawing()\r\n\r\n\r\n    //REST TEMP ALLOC\r\n    free_all(context.temp_allocator)\r\n    time.stopwatch_stop(&sw)\r\n  }\r\n\r\n  log.debug(\"\\n\")\r\n  log.debug(\"==================== SHUT DOWN ====================\\n\")\r\n  rl.CloseWindow()\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 191
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAATQ8AAAAAAABNDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6YyIKaW1wb3J0ICJjb3JlOmZtdCIKaW1wb3J0ICJjb3JlOmxvZyIKaW1wb3J0IGxpbmFsZyAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOnJlZmxlY3QiCmltcG9ydCAiY29yZTp0aW1lIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgptYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyCgovL0FMSUFTRVMKZmxvYXQgOjogZjMyCmZsb2F0MiA6OiBybC5WZWN0b3IyCmZsb2F0MyA6OiBybC5WZWN0b3IzCmZsb2F0NCA6OiBybC5WZWN0b3I0CmZsb2F0NF9vbmUgOjogcmwuVmVjdG9yNHsxLCAxLCAxLCAxfQpxdWF0ZXJuaW9uIDo6IHJsLlF1YXRlcm5pb24KZmxvYXQzX3VwIDo6IGZsb2F0M3swLCAxLCAwfQpmbG9hdDNfemVybyA6OiBmbG9hdDN7fQpmbG9hdDNfb25lIDo6IGZsb2F0M3sxLCAxLCAxfQpmbG9hdDNfb25lX3JsIDo6IHJsLlZlY3RvcjN7MSwgMSwgMX0KZmxvYXQzX2Z3ZCA6OiBmbG9hdDN7MCwgMCwgMX0KZmxvYXQzX3JpZ2h0IDo6IGZsb2F0M3sxLCAwLCAwfQpxdWF0ZXJuaW9uX2lkZW50aXR5IDo6IGxpbmFsZy5RVUFURVJOSU9ORjMyX0lERU5USVRZCmludCA6OiBpMzIKClNDUkVFTl9XSURUSDogaW50ClNDUkVFTl9IRUlHSFQ6IGludAoKd2lkdGhfd2luZG93ZWQ6IGludCA9IDE5MjAKaGVpZ2h0X3dpbmRvd2VkOiBpbnQgPSAxMDgwCndpZHRoX2Z1bGw6IGludCA9IDI1NjAKaGVpZ2h0X2Z1bGw6IGludCA9IDE0NDAKCkZVTExfU0NSRUVOOiBib29sID0gZmFsc2UKUFJJTlRfRU5USVRZX1NUUlVDVDogYm9vbCA9IGZhbHNlClBSSU5UX1BFUkZfTUVUUklDUzogYm9vbCA9IGZhbHNlCgpSQURfNDU6IGZsb2F0ClJBRF85MDogZmxvYXQKUkFEXzEzNTogZmxvYXQKUkFEXzE4MDogZmxvYXQKUkFEXzIyNTogZmxvYXQKUkFEXzI3MDogZmxvYXQKCk1BWF9FTlRJVElFUyA6OiAxMDAwMAoKdGltZV9ub3c6IGZsb2F0Cm5vd19mNjQ6IGY2NApkdDogZmxvYXQKdXBkYXRlX3Byb2NzOiBbZHluYW1pY11wcm9jKCkKbGF0ZV91cGRhdGVfcHJvY3M6IFtkeW5hbWljXXByb2MoKQpkcmF3X3Byb2NzOiBbZHluYW1pY11wcm9jKCkKCnJlbmRlcl90YXJnZXQ6IHJsLlJlbmRlclRleHR1cmUyRApibG9vbV9zaGFkZXI6IHJsLlNoYWRlcgpzdzogdGltZS5TdG9wd2F0Y2gKCgptYWluIDo6IHByb2MoKSAKewogIGNvbnRleHQubG9nZ2VyID0gbG9nLmNyZWF0ZV9jb25zb2xlX2xvZ2dlciguRGVidWcsIGxvZy5Mb2NhdGlvbl9IZWFkZXJfT3B0cykKCiAgU0NSRUVOX1dJRFRIID0gRlVMTF9TQ1JFRU4gPyB3aWR0aF9mdWxsIDogd2lkdGhfd2luZG93ZWQKICBTQ1JFRU5fSEVJR0hUID0gRlVMTF9TQ1JFRU4gPyBoZWlnaHRfZnVsbCA6IGhlaWdodF93aW5kb3dlZAogIGZsYWdzOiBybC5Db25maWdGbGFncyA9IEZVTExfU0NSRUVOID8gey5NU0FBXzRYX0hJTlQsIC5GVUxMU0NSRUVOX01PREV9IDogey5NU0FBXzRYX0hJTlR9CgogIFJBRF80NSA9IHJhZGlhbnMoZmxvYXQoNDUpKQogIFJBRF85MCA9IHJhZGlhbnMoZmxvYXQoOTApKQogIFJBRF8xMzUgPSByYWRpYW5zKGZsb2F0KDEzNSkpCiAgUkFEXzE4MCA9IHJhZGlhbnMoZmxvYXQoMTgwKSkKICBSQURfMjI1ID0gcmFkaWFucyhmbG9hdCgyMjUpKQogIFJBRF8yNzAgPSByYWRpYW5zKGZsb2F0KDI3MCkpCgogIHVwZGF0ZV9wcm9jcyA9IG1ha2UoW2R5bmFtaWNdcHJvYygpKQogIGxhdGVfdXBkYXRlX3Byb2NzID0gbWFrZShbZHluYW1pY11wcm9jKCkpCgogIG1hbmFnZXIgPSBpbml0X2VudGl0eV9tYW5hZ2VyKCkKICBkZWZlciBkZXN0cm95X2VudGl0eV9tYW5hZ2VyKCkKCiAgaWYgUFJJTlRfRU5USVRZX1NUUlVDVCB7CiAgICBsb2cuZGVidWcoIlxuIikKICAgIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09IikKICAgIGxvZy5kZWJ1ZygiRU5USVRZIFNUUlVDVCBJTkZPIikKICAgIGxvZy5kZWJ1ZygiXG4iKQogICAgdHlwZV9pbmZvcyA6PSByZWZsZWN0LnN0cnVjdF9maWVsZF90eXBlcyhFbnRpdHkpCiAgICB0eXBlX25hbWVzIDo9IHJlZmxlY3Quc3RydWN0X2ZpZWxkX25hbWVzKEVudGl0eSkKICAgIGZvciB0LCBpIGluIHR5cGVfaW5mb3MgewogICAgICBsb2cuZGVidWcoImZpZWxkOiAiLCB0eXBlX25hbWVzW2ldLCB0eXBlX2luZm9zW2ldLnNpemUpCiAgICB9CiAgICBsb2cuZGVidWcoImVudGl0eSBzaXplIHRvdGFsOiAiLCBzaXplX29mKEVudGl0eSkpCiAgfQoKCiAgcmwuU2V0VHJhY2VMb2dMZXZlbCguV0FSTklORykKICBybC5TZXRDb25maWdGbGFncyhmbGFncykKICBybC5Jbml0V2luZG93KFNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCwgIkVudGl0eSBTeXN0ZW0gVGVzdCIpCgogIGlmIEZVTExfU0NSRUVOIHsKICAgIHJsLlNldFdpbmRvd01vbml0b3IoMCkKICB9CgogIHJsLlNldFRhcmdldEZQUygxNDQpCgoKICAvLz09PT09PT09PT09PSBJTklUID09PT09PT09PT09PQoKICBibG9vbV9jdHg6IEJsb29tQ29udGV4dAogIGluaXRfYmxvb20oJmJsb29tX2N0eCwgU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUKQogIGRlZmVyIGNsZWFudXBfYmxvb20oJmJsb29tX2N0eCkKCiAgaW5pdF9saWdodGluZygpCiAgaW5pdF9pbnB1dF9oYW5kbGluZygpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfYWFiYnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2FhYmJzKQogIGluaXRfY2FtZXJhKCkKICBpbml0X3BsYXllcigpCiAgaW5pdF9wcm9qZWN0aWxlcygpCiAgaW5pdF9sZXZlbF9nZW4oKQogIGluaXRfZW5lbWllcygpCiAgaW5pdF9rbm9ja2JhY2soKQoKCiAgLy9sYXRlIHN0dWZmCiAgaW5pdF9ldmVudHN5c3RlbXMoKQoKICBmb3IgIXJsLldpbmRvd1Nob3VsZENsb3NlKCkgewogICAgdGltZS5zdG9wd2F0Y2hfcmVzZXQoJnN3KQogICAgdGltZS5zdG9wd2F0Y2hfc3RhcnQoJnN3KQoKICAgIHRpbWVfbm93ID0gZmxvYXQocmwuR2V0VGltZSgpKQogICAgZHQgPSBybC5HZXRGcmFtZVRpbWUoKQoKCiAgICAvL3RpY2sKICAgIGZvciAmcCBpbiB1cGRhdGVfcHJvY3MgewogICAgICBwKCkKICAgIH0KCiAgICAvL2xhdGUgdGljawogICAgZm9yICZwIGluIGxhdGVfdXBkYXRlX3Byb2NzIHsKICAgICAgcCgpCiAgICB9CgoKICAgIC8vUmVuZGVyCgogICAgLy8gUmVuZGVyIHNjZW5lIHRvIGJsb29tIGJ1ZmZlcgogICAgYmVnaW5fYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbk1vZGUzRChjYW1lcmEpCiAgICAvL3JsLkRyYXdHcmlkKDEwMCwgMSkKCiAgICBmb3IgJnAgaW4gZHJhd19wcm9jcyB7CiAgICAgIHAoKQogICAgfQoKCiAgICBybC5FbmRNb2RlM0QoKQoKICAgIGVuZF9ibG9vbV9zY2VuZSgmYmxvb21fY3R4KQogICAgcmwuQmVnaW5EcmF3aW5nKCkKICAgIHJsLkNsZWFyQmFja2dyb3VuZChybC5CTEFDSykKCiAgICByZW5kZXJfYmxvb20oJmJsb29tX2N0eCkKCgogICAgLy8gUEVSRiBNRVRSSUNTIERJU1BMQVkKICAgIGlmIChybC5Jc0tleVByZXNzZWQoLkYxKSkgewogICAgICBQUklOVF9QRVJGX01FVFJJQ1MgPSAhUFJJTlRfUEVSRl9NRVRSSUNTCiAgICB9CiAgICBpZiBQUklOVF9QRVJGX01FVFJJQ1MgewogICAgICBybC5EcmF3RlBTKDEwLCAxMCkKICAgICAgcmwuRHJhd1RleHQocmwuVGV4dEZvcm1hdCgiQ1BVICUuMmYiLCB0aW1lLnN0b3B3YXRjaF9kdXJhdGlvbihzdykpLCAxMCwgNDAsIDE4LCBybC5HUkVFTikKICAgIH0KCiAgICBybC5FbmREcmF3aW5nKCkKCgogICAgLy9SRVNUIFRFTVAgQUxMT0MKICAgIGZyZWVfYWxsKGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgICB0aW1lLnN0b3B3YXRjaF9zdG9wKCZzdykKICB9CgogIGxvZy5kZWJ1ZygiXG4iKQogIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09PT0gU0hVVCBET1dOID09PT09PT09PT09PT09PT09PT09XG4iKQogIHJsLkNsb3NlV2luZG93KCkKfQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWw4AAAAAAABbDgAAAAAAAAAAAAAAAPC/"
				],
				[
					587,
					1,
					"insert",
					{
						"characters": "darkgr"
					},
					"BgAAAGAOAAAAAAAAYQ4AAAAAAAAFAAAAR1JFRU5hDgAAAAAAAGIOAAAAAAAAAAAAAGIOAAAAAAAAYw4AAAAAAAAAAAAAYw4AAAAAAABkDgAAAAAAAAAAAABkDgAAAAAAAGUOAAAAAAAAAAAAAGUOAAAAAAAAZg4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZQ4AAAAAAABgDgAAAAAAAAAAAAAAAPC/"
				],
				[
					589,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "DARKGREEN"
					},
					"AgAAAGAOAAAAAAAAYA4AAAAAAAAGAAAAZGFya2dyYA4AAAAAAABpDgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZg4AAAAAAABmDgAAAAAAAAAAAAAAAPC/"
				],
				[
					591,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:c\"\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport linalg \"core:math/linalg\"\r\nimport \"core:reflect\"\r\nimport \"core:time\"\r\nimport rl \"vendor:raylib\"\r\n\r\nmanager: EntityManager\r\n\r\n//ALIASES\r\nfloat :: f32\r\nfloat2 :: rl.Vector2\r\nfloat3 :: rl.Vector3\r\nfloat4 :: rl.Vector4\r\nfloat4_one :: rl.Vector4{1, 1, 1, 1}\r\nquaternion :: rl.Quaternion\r\nfloat3_up :: float3{0, 1, 0}\r\nfloat3_zero :: float3{}\r\nfloat3_one :: float3{1, 1, 1}\r\nfloat3_one_rl :: rl.Vector3{1, 1, 1}\r\nfloat3_fwd :: float3{0, 0, 1}\r\nfloat3_right :: float3{1, 0, 0}\r\nquaternion_identity :: linalg.QUATERNIONF32_IDENTITY\r\nint :: i32\r\n\r\nSCREEN_WIDTH: int\r\nSCREEN_HEIGHT: int\r\n\r\nwidth_windowed: int = 1920\r\nheight_windowed: int = 1080\r\nwidth_full: int = 2560\r\nheight_full: int = 1440\r\n\r\nFULL_SCREEN: bool = false\r\nPRINT_ENTITY_STRUCT: bool = false\r\nPRINT_PERF_METRICS: bool = false\r\n\r\nRAD_45: float\r\nRAD_90: float\r\nRAD_135: float\r\nRAD_180: float\r\nRAD_225: float\r\nRAD_270: float\r\n\r\nMAX_ENTITIES :: 10000\r\n\r\ntime_now: float\r\nnow_f64: f64\r\ndt: float\r\nupdate_procs: [dynamic]proc()\r\nlate_update_procs: [dynamic]proc()\r\ndraw_procs: [dynamic]proc()\r\n\r\nrender_target: rl.RenderTexture2D\r\nbloom_shader: rl.Shader\r\nsw: time.Stopwatch\r\n\r\n\r\nmain :: proc() \r\n{\r\n  context.logger = log.create_console_logger(.Debug, log.Location_Header_Opts)\r\n\r\n  SCREEN_WIDTH = FULL_SCREEN ? width_full : width_windowed\r\n  SCREEN_HEIGHT = FULL_SCREEN ? height_full : height_windowed\r\n  flags: rl.ConfigFlags = FULL_SCREEN ? {.MSAA_4X_HINT, .FULLSCREEN_MODE} : {.MSAA_4X_HINT}\r\n\r\n  RAD_45 = radians(float(45))\r\n  RAD_90 = radians(float(90))\r\n  RAD_135 = radians(float(135))\r\n  RAD_180 = radians(float(180))\r\n  RAD_225 = radians(float(225))\r\n  RAD_270 = radians(float(270))\r\n\r\n  update_procs = make([dynamic]proc())\r\n  late_update_procs = make([dynamic]proc())\r\n\r\n  manager = init_entity_manager()\r\n  defer destroy_entity_manager()\r\n\r\n  if PRINT_ENTITY_STRUCT {\r\n    log.debug(\"\\n\")\r\n    log.debug(\"==================\")\r\n    log.debug(\"ENTITY STRUCT INFO\")\r\n    log.debug(\"\\n\")\r\n    type_infos := reflect.struct_field_types(Entity)\r\n    type_names := reflect.struct_field_names(Entity)\r\n    for t, i in type_infos {\r\n      log.debug(\"field: \", type_names[i], type_infos[i].size)\r\n    }\r\n    log.debug(\"entity size total: \", size_of(Entity))\r\n  }\r\n\r\n\r\n  rl.SetTraceLogLevel(.WARNING)\r\n  rl.SetConfigFlags(flags)\r\n  rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Entity System Test\")\r\n\r\n  if FULL_SCREEN {\r\n    rl.SetWindowMonitor(0)\r\n  }\r\n\r\n  rl.SetTargetFPS(144)\r\n\r\n\r\n  //============ INIT ============\r\n\r\n  bloom_ctx: BloomContext\r\n  init_bloom(&bloom_ctx, SCREEN_WIDTH, SCREEN_HEIGHT)\r\n  defer cleanup_bloom(&bloom_ctx)\r\n\r\n  init_lighting()\r\n  init_input_handling()\r\n\r\n  append(&update_procs, update_aabbs)\r\n  append(&draw_procs, draw_aabbs)\r\n  init_camera()\r\n  init_player()\r\n  init_projectiles()\r\n  init_level_gen()\r\n  init_enemies()\r\n  init_knockback()\r\n\r\n\r\n  //late stuff\r\n  init_eventsystems()\r\n\r\n  for !rl.WindowShouldClose() {\r\n    time.stopwatch_reset(&sw)\r\n    time.stopwatch_start(&sw)\r\n\r\n    time_now = float(rl.GetTime())\r\n    dt = rl.GetFrameTime()\r\n\r\n\r\n    //tick\r\n    for &p in update_procs {\r\n      p()\r\n    }\r\n\r\n    //late tick\r\n    for &p in late_update_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    //Render\r\n\r\n    // Render scene to bloom buffer\r\n    begin_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginMode3D(camera)\r\n    //rl.DrawGrid(100, 1)\r\n\r\n    for &p in draw_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    rl.EndMode3D()\r\n\r\n    end_bloom_scene(&bloom_ctx)\r\n    rl.BeginDrawing()\r\n    rl.ClearBackground(rl.BLACK)\r\n\r\n    render_bloom(&bloom_ctx)\r\n\r\n\r\n    // PERF METRICS DISPLAY\r\n    if (rl.IsKeyPressed(.F1)) {\r\n      PRINT_PERF_METRICS = !PRINT_PERF_METRICS\r\n    }\r\n    if PRINT_PERF_METRICS {\r\n      rl.DrawFPS(10, 10)\r\n      rl.DrawText(rl.TextFormat(\"CPU %.2f\", time.stopwatch_duration(sw)), 10, 40, 18, rl.DARKGREEN)\r\n    }\r\n\r\n    rl.EndDrawing()\r\n\r\n\r\n    //REST TEMP ALLOC\r\n    free_all(context.temp_allocator)\r\n    time.stopwatch_stop(&sw)\r\n  }\r\n\r\n  log.debug(\"\\n\")\r\n  log.debug(\"==================== SHUT DOWN ====================\\n\")\r\n  rl.CloseWindow()\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 191
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAUQ8AAAAAAABRDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6YyIKaW1wb3J0ICJjb3JlOmZtdCIKaW1wb3J0ICJjb3JlOmxvZyIKaW1wb3J0IGxpbmFsZyAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOnJlZmxlY3QiCmltcG9ydCAiY29yZTp0aW1lIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgptYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyCgovL0FMSUFTRVMKZmxvYXQgOjogZjMyCmZsb2F0MiA6OiBybC5WZWN0b3IyCmZsb2F0MyA6OiBybC5WZWN0b3IzCmZsb2F0NCA6OiBybC5WZWN0b3I0CmZsb2F0NF9vbmUgOjogcmwuVmVjdG9yNHsxLCAxLCAxLCAxfQpxdWF0ZXJuaW9uIDo6IHJsLlF1YXRlcm5pb24KZmxvYXQzX3VwIDo6IGZsb2F0M3swLCAxLCAwfQpmbG9hdDNfemVybyA6OiBmbG9hdDN7fQpmbG9hdDNfb25lIDo6IGZsb2F0M3sxLCAxLCAxfQpmbG9hdDNfb25lX3JsIDo6IHJsLlZlY3RvcjN7MSwgMSwgMX0KZmxvYXQzX2Z3ZCA6OiBmbG9hdDN7MCwgMCwgMX0KZmxvYXQzX3JpZ2h0IDo6IGZsb2F0M3sxLCAwLCAwfQpxdWF0ZXJuaW9uX2lkZW50aXR5IDo6IGxpbmFsZy5RVUFURVJOSU9ORjMyX0lERU5USVRZCmludCA6OiBpMzIKClNDUkVFTl9XSURUSDogaW50ClNDUkVFTl9IRUlHSFQ6IGludAoKd2lkdGhfd2luZG93ZWQ6IGludCA9IDE5MjAKaGVpZ2h0X3dpbmRvd2VkOiBpbnQgPSAxMDgwCndpZHRoX2Z1bGw6IGludCA9IDI1NjAKaGVpZ2h0X2Z1bGw6IGludCA9IDE0NDAKCkZVTExfU0NSRUVOOiBib29sID0gZmFsc2UKUFJJTlRfRU5USVRZX1NUUlVDVDogYm9vbCA9IGZhbHNlClBSSU5UX1BFUkZfTUVUUklDUzogYm9vbCA9IGZhbHNlCgpSQURfNDU6IGZsb2F0ClJBRF85MDogZmxvYXQKUkFEXzEzNTogZmxvYXQKUkFEXzE4MDogZmxvYXQKUkFEXzIyNTogZmxvYXQKUkFEXzI3MDogZmxvYXQKCk1BWF9FTlRJVElFUyA6OiAxMDAwMAoKdGltZV9ub3c6IGZsb2F0Cm5vd19mNjQ6IGY2NApkdDogZmxvYXQKdXBkYXRlX3Byb2NzOiBbZHluYW1pY11wcm9jKCkKbGF0ZV91cGRhdGVfcHJvY3M6IFtkeW5hbWljXXByb2MoKQpkcmF3X3Byb2NzOiBbZHluYW1pY11wcm9jKCkKCnJlbmRlcl90YXJnZXQ6IHJsLlJlbmRlclRleHR1cmUyRApibG9vbV9zaGFkZXI6IHJsLlNoYWRlcgpzdzogdGltZS5TdG9wd2F0Y2gKCgptYWluIDo6IHByb2MoKSAKewogIGNvbnRleHQubG9nZ2VyID0gbG9nLmNyZWF0ZV9jb25zb2xlX2xvZ2dlciguRGVidWcsIGxvZy5Mb2NhdGlvbl9IZWFkZXJfT3B0cykKCiAgU0NSRUVOX1dJRFRIID0gRlVMTF9TQ1JFRU4gPyB3aWR0aF9mdWxsIDogd2lkdGhfd2luZG93ZWQKICBTQ1JFRU5fSEVJR0hUID0gRlVMTF9TQ1JFRU4gPyBoZWlnaHRfZnVsbCA6IGhlaWdodF93aW5kb3dlZAogIGZsYWdzOiBybC5Db25maWdGbGFncyA9IEZVTExfU0NSRUVOID8gey5NU0FBXzRYX0hJTlQsIC5GVUxMU0NSRUVOX01PREV9IDogey5NU0FBXzRYX0hJTlR9CgogIFJBRF80NSA9IHJhZGlhbnMoZmxvYXQoNDUpKQogIFJBRF85MCA9IHJhZGlhbnMoZmxvYXQoOTApKQogIFJBRF8xMzUgPSByYWRpYW5zKGZsb2F0KDEzNSkpCiAgUkFEXzE4MCA9IHJhZGlhbnMoZmxvYXQoMTgwKSkKICBSQURfMjI1ID0gcmFkaWFucyhmbG9hdCgyMjUpKQogIFJBRF8yNzAgPSByYWRpYW5zKGZsb2F0KDI3MCkpCgogIHVwZGF0ZV9wcm9jcyA9IG1ha2UoW2R5bmFtaWNdcHJvYygpKQogIGxhdGVfdXBkYXRlX3Byb2NzID0gbWFrZShbZHluYW1pY11wcm9jKCkpCgogIG1hbmFnZXIgPSBpbml0X2VudGl0eV9tYW5hZ2VyKCkKICBkZWZlciBkZXN0cm95X2VudGl0eV9tYW5hZ2VyKCkKCiAgaWYgUFJJTlRfRU5USVRZX1NUUlVDVCB7CiAgICBsb2cuZGVidWcoIlxuIikKICAgIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09IikKICAgIGxvZy5kZWJ1ZygiRU5USVRZIFNUUlVDVCBJTkZPIikKICAgIGxvZy5kZWJ1ZygiXG4iKQogICAgdHlwZV9pbmZvcyA6PSByZWZsZWN0LnN0cnVjdF9maWVsZF90eXBlcyhFbnRpdHkpCiAgICB0eXBlX25hbWVzIDo9IHJlZmxlY3Quc3RydWN0X2ZpZWxkX25hbWVzKEVudGl0eSkKICAgIGZvciB0LCBpIGluIHR5cGVfaW5mb3MgewogICAgICBsb2cuZGVidWcoImZpZWxkOiAiLCB0eXBlX25hbWVzW2ldLCB0eXBlX2luZm9zW2ldLnNpemUpCiAgICB9CiAgICBsb2cuZGVidWcoImVudGl0eSBzaXplIHRvdGFsOiAiLCBzaXplX29mKEVudGl0eSkpCiAgfQoKCiAgcmwuU2V0VHJhY2VMb2dMZXZlbCguV0FSTklORykKICBybC5TZXRDb25maWdGbGFncyhmbGFncykKICBybC5Jbml0V2luZG93KFNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCwgIkVudGl0eSBTeXN0ZW0gVGVzdCIpCgogIGlmIEZVTExfU0NSRUVOIHsKICAgIHJsLlNldFdpbmRvd01vbml0b3IoMCkKICB9CgogIHJsLlNldFRhcmdldEZQUygxNDQpCgoKICAvLz09PT09PT09PT09PSBJTklUID09PT09PT09PT09PQoKICBibG9vbV9jdHg6IEJsb29tQ29udGV4dAogIGluaXRfYmxvb20oJmJsb29tX2N0eCwgU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUKQogIGRlZmVyIGNsZWFudXBfYmxvb20oJmJsb29tX2N0eCkKCiAgaW5pdF9saWdodGluZygpCiAgaW5pdF9pbnB1dF9oYW5kbGluZygpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfYWFiYnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2FhYmJzKQogIGluaXRfY2FtZXJhKCkKICBpbml0X3BsYXllcigpCiAgaW5pdF9wcm9qZWN0aWxlcygpCiAgaW5pdF9sZXZlbF9nZW4oKQogIGluaXRfZW5lbWllcygpCiAgaW5pdF9rbm9ja2JhY2soKQoKCiAgLy9sYXRlIHN0dWZmCiAgaW5pdF9ldmVudHN5c3RlbXMoKQoKICBmb3IgIXJsLldpbmRvd1Nob3VsZENsb3NlKCkgewogICAgdGltZS5zdG9wd2F0Y2hfcmVzZXQoJnN3KQogICAgdGltZS5zdG9wd2F0Y2hfc3RhcnQoJnN3KQoKICAgIHRpbWVfbm93ID0gZmxvYXQocmwuR2V0VGltZSgpKQogICAgZHQgPSBybC5HZXRGcmFtZVRpbWUoKQoKCiAgICAvL3RpY2sKICAgIGZvciAmcCBpbiB1cGRhdGVfcHJvY3MgewogICAgICBwKCkKICAgIH0KCiAgICAvL2xhdGUgdGljawogICAgZm9yICZwIGluIGxhdGVfdXBkYXRlX3Byb2NzIHsKICAgICAgcCgpCiAgICB9CgoKICAgIC8vUmVuZGVyCgogICAgLy8gUmVuZGVyIHNjZW5lIHRvIGJsb29tIGJ1ZmZlcgogICAgYmVnaW5fYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbk1vZGUzRChjYW1lcmEpCiAgICAvL3JsLkRyYXdHcmlkKDEwMCwgMSkKCiAgICBmb3IgJnAgaW4gZHJhd19wcm9jcyB7CiAgICAgIHAoKQogICAgfQoKCiAgICBybC5FbmRNb2RlM0QoKQoKICAgIGVuZF9ibG9vbV9zY2VuZSgmYmxvb21fY3R4KQogICAgcmwuQmVnaW5EcmF3aW5nKCkKICAgIHJsLkNsZWFyQmFja2dyb3VuZChybC5CTEFDSykKCiAgICByZW5kZXJfYmxvb20oJmJsb29tX2N0eCkKCgogICAgLy8gUEVSRiBNRVRSSUNTIERJU1BMQVkKICAgIGlmIChybC5Jc0tleVByZXNzZWQoLkYxKSkgewogICAgICBQUklOVF9QRVJGX01FVFJJQ1MgPSAhUFJJTlRfUEVSRl9NRVRSSUNTCiAgICB9CiAgICBpZiBQUklOVF9QRVJGX01FVFJJQ1MgewogICAgICBybC5EcmF3RlBTKDEwLCAxMCkKICAgICAgcmwuRHJhd1RleHQocmwuVGV4dEZvcm1hdCgiQ1BVICUuMmYiLCB0aW1lLnN0b3B3YXRjaF9kdXJhdGlvbihzdykpLCAxMCwgNDAsIDE4LCBybC5EQVJLR1JFRU4pCiAgICB9CgogICAgcmwuRW5kRHJhd2luZygpCgoKICAgIC8vUkVTVCBURU1QIEFMTE9DCiAgICBmcmVlX2FsbChjb250ZXh0LnRlbXBfYWxsb2NhdG9yKQogICAgdGltZS5zdG9wd2F0Y2hfc3RvcCgmc3cpCiAgfQoKICBsb2cuZGVidWcoIlxuIikKICBsb2cuZGVidWcoIj09PT09PT09PT09PT09PT09PT09IFNIVVQgRE9XTiA9PT09PT09PT09PT09PT09PT09PVxuIikKICBybC5DbG9zZVdpbmRvdygpCn0K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaQ4AAAAAAABpDgAAAAAAAAAAAAAAAPC/"
				],
				[
					595,
					1,
					"left_delete",
					null,
					"AQAAAGAOAAAAAAAAYA4AAAAAAAAJAAAAREFSS0dSRUVO",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaQ4AAAAAAABgDgAAAAAAAAAAAAAAAPC/"
				],
				[
					596,
					1,
					"insert",
					{
						"characters": "whi"
					},
					"AwAAAGAOAAAAAAAAYQ4AAAAAAAAAAAAAYQ4AAAAAAABiDgAAAAAAAAAAAABiDgAAAAAAAGMOAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYA4AAAAAAABgDgAAAAAAAAAAAAAAAPC/"
				],
				[
					597,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":5,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "WHITE"
					},
					"AgAAAGAOAAAAAAAAYA4AAAAAAAADAAAAd2hpYA4AAAAAAABlDgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYw4AAAAAAABjDgAAAAAAAAAAAAAAAPC/"
				],
				[
					599,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:c\"\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport linalg \"core:math/linalg\"\r\nimport \"core:reflect\"\r\nimport \"core:time\"\r\nimport rl \"vendor:raylib\"\r\n\r\nmanager: EntityManager\r\n\r\n//ALIASES\r\nfloat :: f32\r\nfloat2 :: rl.Vector2\r\nfloat3 :: rl.Vector3\r\nfloat4 :: rl.Vector4\r\nfloat4_one :: rl.Vector4{1, 1, 1, 1}\r\nquaternion :: rl.Quaternion\r\nfloat3_up :: float3{0, 1, 0}\r\nfloat3_zero :: float3{}\r\nfloat3_one :: float3{1, 1, 1}\r\nfloat3_one_rl :: rl.Vector3{1, 1, 1}\r\nfloat3_fwd :: float3{0, 0, 1}\r\nfloat3_right :: float3{1, 0, 0}\r\nquaternion_identity :: linalg.QUATERNIONF32_IDENTITY\r\nint :: i32\r\n\r\nSCREEN_WIDTH: int\r\nSCREEN_HEIGHT: int\r\n\r\nwidth_windowed: int = 1920\r\nheight_windowed: int = 1080\r\nwidth_full: int = 2560\r\nheight_full: int = 1440\r\n\r\nFULL_SCREEN: bool = false\r\nPRINT_ENTITY_STRUCT: bool = false\r\nPRINT_PERF_METRICS: bool = false\r\n\r\nRAD_45: float\r\nRAD_90: float\r\nRAD_135: float\r\nRAD_180: float\r\nRAD_225: float\r\nRAD_270: float\r\n\r\nMAX_ENTITIES :: 10000\r\n\r\ntime_now: float\r\nnow_f64: f64\r\ndt: float\r\nupdate_procs: [dynamic]proc()\r\nlate_update_procs: [dynamic]proc()\r\ndraw_procs: [dynamic]proc()\r\n\r\nrender_target: rl.RenderTexture2D\r\nbloom_shader: rl.Shader\r\nsw: time.Stopwatch\r\n\r\n\r\nmain :: proc() \r\n{\r\n  context.logger = log.create_console_logger(.Debug, log.Location_Header_Opts)\r\n\r\n  SCREEN_WIDTH = FULL_SCREEN ? width_full : width_windowed\r\n  SCREEN_HEIGHT = FULL_SCREEN ? height_full : height_windowed\r\n  flags: rl.ConfigFlags = FULL_SCREEN ? {.MSAA_4X_HINT, .FULLSCREEN_MODE} : {.MSAA_4X_HINT}\r\n\r\n  RAD_45 = radians(float(45))\r\n  RAD_90 = radians(float(90))\r\n  RAD_135 = radians(float(135))\r\n  RAD_180 = radians(float(180))\r\n  RAD_225 = radians(float(225))\r\n  RAD_270 = radians(float(270))\r\n\r\n  update_procs = make([dynamic]proc())\r\n  late_update_procs = make([dynamic]proc())\r\n\r\n  manager = init_entity_manager()\r\n  defer destroy_entity_manager()\r\n\r\n  if PRINT_ENTITY_STRUCT {\r\n    log.debug(\"\\n\")\r\n    log.debug(\"==================\")\r\n    log.debug(\"ENTITY STRUCT INFO\")\r\n    log.debug(\"\\n\")\r\n    type_infos := reflect.struct_field_types(Entity)\r\n    type_names := reflect.struct_field_names(Entity)\r\n    for t, i in type_infos {\r\n      log.debug(\"field: \", type_names[i], type_infos[i].size)\r\n    }\r\n    log.debug(\"entity size total: \", size_of(Entity))\r\n  }\r\n\r\n\r\n  rl.SetTraceLogLevel(.WARNING)\r\n  rl.SetConfigFlags(flags)\r\n  rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Entity System Test\")\r\n\r\n  if FULL_SCREEN {\r\n    rl.SetWindowMonitor(0)\r\n  }\r\n\r\n  rl.SetTargetFPS(144)\r\n\r\n\r\n  //============ INIT ============\r\n\r\n  bloom_ctx: BloomContext\r\n  init_bloom(&bloom_ctx, SCREEN_WIDTH, SCREEN_HEIGHT)\r\n  defer cleanup_bloom(&bloom_ctx)\r\n\r\n  init_lighting()\r\n  init_input_handling()\r\n\r\n  append(&update_procs, update_aabbs)\r\n  append(&draw_procs, draw_aabbs)\r\n  init_camera()\r\n  init_player()\r\n  init_projectiles()\r\n  init_level_gen()\r\n  init_enemies()\r\n  init_knockback()\r\n\r\n\r\n  //late stuff\r\n  init_eventsystems()\r\n\r\n  for !rl.WindowShouldClose() {\r\n    time.stopwatch_reset(&sw)\r\n    time.stopwatch_start(&sw)\r\n\r\n    time_now = float(rl.GetTime())\r\n    dt = rl.GetFrameTime()\r\n\r\n\r\n    //tick\r\n    for &p in update_procs {\r\n      p()\r\n    }\r\n\r\n    //late tick\r\n    for &p in late_update_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    //Render\r\n\r\n    // Render scene to bloom buffer\r\n    begin_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginMode3D(camera)\r\n    //rl.DrawGrid(100, 1)\r\n\r\n    for &p in draw_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    rl.EndMode3D()\r\n\r\n    end_bloom_scene(&bloom_ctx)\r\n    rl.BeginDrawing()\r\n    rl.ClearBackground(rl.BLACK)\r\n\r\n    render_bloom(&bloom_ctx)\r\n\r\n\r\n    // PERF METRICS DISPLAY\r\n    if (rl.IsKeyPressed(.F1)) {\r\n      PRINT_PERF_METRICS = !PRINT_PERF_METRICS\r\n    }\r\n    if PRINT_PERF_METRICS {\r\n      rl.DrawFPS(10, 10)\r\n      rl.DrawText(rl.TextFormat(\"CPU %.2f\", time.stopwatch_duration(sw)), 10, 40, 18, rl.WHITE)\r\n    }\r\n\r\n    rl.EndDrawing()\r\n\r\n\r\n    //REST TEMP ALLOC\r\n    free_all(context.temp_allocator)\r\n    time.stopwatch_stop(&sw)\r\n  }\r\n\r\n  log.debug(\"\\n\")\r\n  log.debug(\"==================== SHUT DOWN ====================\\n\")\r\n  rl.CloseWindow()\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 191
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAATQ8AAAAAAABNDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6YyIKaW1wb3J0ICJjb3JlOmZtdCIKaW1wb3J0ICJjb3JlOmxvZyIKaW1wb3J0IGxpbmFsZyAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOnJlZmxlY3QiCmltcG9ydCAiY29yZTp0aW1lIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgptYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyCgovL0FMSUFTRVMKZmxvYXQgOjogZjMyCmZsb2F0MiA6OiBybC5WZWN0b3IyCmZsb2F0MyA6OiBybC5WZWN0b3IzCmZsb2F0NCA6OiBybC5WZWN0b3I0CmZsb2F0NF9vbmUgOjogcmwuVmVjdG9yNHsxLCAxLCAxLCAxfQpxdWF0ZXJuaW9uIDo6IHJsLlF1YXRlcm5pb24KZmxvYXQzX3VwIDo6IGZsb2F0M3swLCAxLCAwfQpmbG9hdDNfemVybyA6OiBmbG9hdDN7fQpmbG9hdDNfb25lIDo6IGZsb2F0M3sxLCAxLCAxfQpmbG9hdDNfb25lX3JsIDo6IHJsLlZlY3RvcjN7MSwgMSwgMX0KZmxvYXQzX2Z3ZCA6OiBmbG9hdDN7MCwgMCwgMX0KZmxvYXQzX3JpZ2h0IDo6IGZsb2F0M3sxLCAwLCAwfQpxdWF0ZXJuaW9uX2lkZW50aXR5IDo6IGxpbmFsZy5RVUFURVJOSU9ORjMyX0lERU5USVRZCmludCA6OiBpMzIKClNDUkVFTl9XSURUSDogaW50ClNDUkVFTl9IRUlHSFQ6IGludAoKd2lkdGhfd2luZG93ZWQ6IGludCA9IDE5MjAKaGVpZ2h0X3dpbmRvd2VkOiBpbnQgPSAxMDgwCndpZHRoX2Z1bGw6IGludCA9IDI1NjAKaGVpZ2h0X2Z1bGw6IGludCA9IDE0NDAKCkZVTExfU0NSRUVOOiBib29sID0gZmFsc2UKUFJJTlRfRU5USVRZX1NUUlVDVDogYm9vbCA9IGZhbHNlClBSSU5UX1BFUkZfTUVUUklDUzogYm9vbCA9IGZhbHNlCgpSQURfNDU6IGZsb2F0ClJBRF85MDogZmxvYXQKUkFEXzEzNTogZmxvYXQKUkFEXzE4MDogZmxvYXQKUkFEXzIyNTogZmxvYXQKUkFEXzI3MDogZmxvYXQKCk1BWF9FTlRJVElFUyA6OiAxMDAwMAoKdGltZV9ub3c6IGZsb2F0Cm5vd19mNjQ6IGY2NApkdDogZmxvYXQKdXBkYXRlX3Byb2NzOiBbZHluYW1pY11wcm9jKCkKbGF0ZV91cGRhdGVfcHJvY3M6IFtkeW5hbWljXXByb2MoKQpkcmF3X3Byb2NzOiBbZHluYW1pY11wcm9jKCkKCnJlbmRlcl90YXJnZXQ6IHJsLlJlbmRlclRleHR1cmUyRApibG9vbV9zaGFkZXI6IHJsLlNoYWRlcgpzdzogdGltZS5TdG9wd2F0Y2gKCgptYWluIDo6IHByb2MoKSAKewogIGNvbnRleHQubG9nZ2VyID0gbG9nLmNyZWF0ZV9jb25zb2xlX2xvZ2dlciguRGVidWcsIGxvZy5Mb2NhdGlvbl9IZWFkZXJfT3B0cykKCiAgU0NSRUVOX1dJRFRIID0gRlVMTF9TQ1JFRU4gPyB3aWR0aF9mdWxsIDogd2lkdGhfd2luZG93ZWQKICBTQ1JFRU5fSEVJR0hUID0gRlVMTF9TQ1JFRU4gPyBoZWlnaHRfZnVsbCA6IGhlaWdodF93aW5kb3dlZAogIGZsYWdzOiBybC5Db25maWdGbGFncyA9IEZVTExfU0NSRUVOID8gey5NU0FBXzRYX0hJTlQsIC5GVUxMU0NSRUVOX01PREV9IDogey5NU0FBXzRYX0hJTlR9CgogIFJBRF80NSA9IHJhZGlhbnMoZmxvYXQoNDUpKQogIFJBRF85MCA9IHJhZGlhbnMoZmxvYXQoOTApKQogIFJBRF8xMzUgPSByYWRpYW5zKGZsb2F0KDEzNSkpCiAgUkFEXzE4MCA9IHJhZGlhbnMoZmxvYXQoMTgwKSkKICBSQURfMjI1ID0gcmFkaWFucyhmbG9hdCgyMjUpKQogIFJBRF8yNzAgPSByYWRpYW5zKGZsb2F0KDI3MCkpCgogIHVwZGF0ZV9wcm9jcyA9IG1ha2UoW2R5bmFtaWNdcHJvYygpKQogIGxhdGVfdXBkYXRlX3Byb2NzID0gbWFrZShbZHluYW1pY11wcm9jKCkpCgogIG1hbmFnZXIgPSBpbml0X2VudGl0eV9tYW5hZ2VyKCkKICBkZWZlciBkZXN0cm95X2VudGl0eV9tYW5hZ2VyKCkKCiAgaWYgUFJJTlRfRU5USVRZX1NUUlVDVCB7CiAgICBsb2cuZGVidWcoIlxuIikKICAgIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09IikKICAgIGxvZy5kZWJ1ZygiRU5USVRZIFNUUlVDVCBJTkZPIikKICAgIGxvZy5kZWJ1ZygiXG4iKQogICAgdHlwZV9pbmZvcyA6PSByZWZsZWN0LnN0cnVjdF9maWVsZF90eXBlcyhFbnRpdHkpCiAgICB0eXBlX25hbWVzIDo9IHJlZmxlY3Quc3RydWN0X2ZpZWxkX25hbWVzKEVudGl0eSkKICAgIGZvciB0LCBpIGluIHR5cGVfaW5mb3MgewogICAgICBsb2cuZGVidWcoImZpZWxkOiAiLCB0eXBlX25hbWVzW2ldLCB0eXBlX2luZm9zW2ldLnNpemUpCiAgICB9CiAgICBsb2cuZGVidWcoImVudGl0eSBzaXplIHRvdGFsOiAiLCBzaXplX29mKEVudGl0eSkpCiAgfQoKCiAgcmwuU2V0VHJhY2VMb2dMZXZlbCguV0FSTklORykKICBybC5TZXRDb25maWdGbGFncyhmbGFncykKICBybC5Jbml0V2luZG93KFNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCwgIkVudGl0eSBTeXN0ZW0gVGVzdCIpCgogIGlmIEZVTExfU0NSRUVOIHsKICAgIHJsLlNldFdpbmRvd01vbml0b3IoMCkKICB9CgogIHJsLlNldFRhcmdldEZQUygxNDQpCgoKICAvLz09PT09PT09PT09PSBJTklUID09PT09PT09PT09PQoKICBibG9vbV9jdHg6IEJsb29tQ29udGV4dAogIGluaXRfYmxvb20oJmJsb29tX2N0eCwgU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUKQogIGRlZmVyIGNsZWFudXBfYmxvb20oJmJsb29tX2N0eCkKCiAgaW5pdF9saWdodGluZygpCiAgaW5pdF9pbnB1dF9oYW5kbGluZygpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfYWFiYnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2FhYmJzKQogIGluaXRfY2FtZXJhKCkKICBpbml0X3BsYXllcigpCiAgaW5pdF9wcm9qZWN0aWxlcygpCiAgaW5pdF9sZXZlbF9nZW4oKQogIGluaXRfZW5lbWllcygpCiAgaW5pdF9rbm9ja2JhY2soKQoKCiAgLy9sYXRlIHN0dWZmCiAgaW5pdF9ldmVudHN5c3RlbXMoKQoKICBmb3IgIXJsLldpbmRvd1Nob3VsZENsb3NlKCkgewogICAgdGltZS5zdG9wd2F0Y2hfcmVzZXQoJnN3KQogICAgdGltZS5zdG9wd2F0Y2hfc3RhcnQoJnN3KQoKICAgIHRpbWVfbm93ID0gZmxvYXQocmwuR2V0VGltZSgpKQogICAgZHQgPSBybC5HZXRGcmFtZVRpbWUoKQoKCiAgICAvL3RpY2sKICAgIGZvciAmcCBpbiB1cGRhdGVfcHJvY3MgewogICAgICBwKCkKICAgIH0KCiAgICAvL2xhdGUgdGljawogICAgZm9yICZwIGluIGxhdGVfdXBkYXRlX3Byb2NzIHsKICAgICAgcCgpCiAgICB9CgoKICAgIC8vUmVuZGVyCgogICAgLy8gUmVuZGVyIHNjZW5lIHRvIGJsb29tIGJ1ZmZlcgogICAgYmVnaW5fYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbk1vZGUzRChjYW1lcmEpCiAgICAvL3JsLkRyYXdHcmlkKDEwMCwgMSkKCiAgICBmb3IgJnAgaW4gZHJhd19wcm9jcyB7CiAgICAgIHAoKQogICAgfQoKCiAgICBybC5FbmRNb2RlM0QoKQoKICAgIGVuZF9ibG9vbV9zY2VuZSgmYmxvb21fY3R4KQogICAgcmwuQmVnaW5EcmF3aW5nKCkKICAgIHJsLkNsZWFyQmFja2dyb3VuZChybC5CTEFDSykKCiAgICByZW5kZXJfYmxvb20oJmJsb29tX2N0eCkKCgogICAgLy8gUEVSRiBNRVRSSUNTIERJU1BMQVkKICAgIGlmIChybC5Jc0tleVByZXNzZWQoLkYxKSkgewogICAgICBQUklOVF9QRVJGX01FVFJJQ1MgPSAhUFJJTlRfUEVSRl9NRVRSSUNTCiAgICB9CiAgICBpZiBQUklOVF9QRVJGX01FVFJJQ1MgewogICAgICBybC5EcmF3RlBTKDEwLCAxMCkKICAgICAgcmwuRHJhd1RleHQocmwuVGV4dEZvcm1hdCgiQ1BVICUuMmYiLCB0aW1lLnN0b3B3YXRjaF9kdXJhdGlvbihzdykpLCAxMCwgNDAsIDE4LCBybC5XSElURSkKICAgIH0KCiAgICBybC5FbmREcmF3aW5nKCkKCgogICAgLy9SRVNUIFRFTVAgQUxMT0MKICAgIGZyZWVfYWxsKGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgICB0aW1lLnN0b3B3YXRjaF9zdG9wKCZzdykKICB9CgogIGxvZy5kZWJ1ZygiXG4iKQogIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09PT0gU0hVVCBET1dOID09PT09PT09PT09PT09PT09PT09XG4iKQogIHJsLkNsb3NlV2luZG93KCkKfQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZQ4AAAAAAABlDgAAAAAAAAAAAAAAAPC/"
				],
				[
					603,
					1,
					"insert",
					{
						"characters": "\ndur"
					},
					"BAAAAAYOAAAAAAAADQ4AAAAAAAAAAAAADQ4AAAAAAAAODgAAAAAAAAAAAAAODgAAAAAAAA8OAAAAAAAAAAAAAA8OAAAAAAAAEA4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABg4AAAAAAAAGDgAAAAAAAAAAAAAA0IlA"
				],
				[
					604,
					1,
					"insert",
					{
						"characters": " :="
					},
					"AwAAABAOAAAAAAAAEQ4AAAAAAAAAAAAAEQ4AAAAAAAASDgAAAAAAAAAAAAASDgAAAAAAABMOAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEA4AAAAAAAAQDgAAAAAAAAAAAAAAAPC/"
				],
				[
					605,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABMOAAAAAAAAFA4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEw4AAAAAAAATDgAAAAAAAAAAAAAAAPC/"
				],
				[
					610,
					1,
					"cut",
					null,
					"AQAAAEEOAAAAAAAAQQ4AAAAAAAAbAAAAdGltZS5zdG9wd2F0Y2hfZHVyYXRpb24oc3cp",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQ4AAAAAAABcDgAAAAAAAAAAAAAAAPC/"
				],
				[
					612,
					1,
					"paste",
					null,
					"AQAAABQOAAAAAAAALw4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFA4AAAAAAAAUDgAAAAAAAAAAAAAAYHpA"
				],
				[
					614,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:c\"\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport linalg \"core:math/linalg\"\r\nimport \"core:reflect\"\r\nimport \"core:time\"\r\nimport rl \"vendor:raylib\"\r\n\r\nmanager: EntityManager\r\n\r\n//ALIASES\r\nfloat :: f32\r\nfloat2 :: rl.Vector2\r\nfloat3 :: rl.Vector3\r\nfloat4 :: rl.Vector4\r\nfloat4_one :: rl.Vector4{1, 1, 1, 1}\r\nquaternion :: rl.Quaternion\r\nfloat3_up :: float3{0, 1, 0}\r\nfloat3_zero :: float3{}\r\nfloat3_one :: float3{1, 1, 1}\r\nfloat3_one_rl :: rl.Vector3{1, 1, 1}\r\nfloat3_fwd :: float3{0, 0, 1}\r\nfloat3_right :: float3{1, 0, 0}\r\nquaternion_identity :: linalg.QUATERNIONF32_IDENTITY\r\nint :: i32\r\n\r\nSCREEN_WIDTH: int\r\nSCREEN_HEIGHT: int\r\n\r\nwidth_windowed: int = 1920\r\nheight_windowed: int = 1080\r\nwidth_full: int = 2560\r\nheight_full: int = 1440\r\n\r\nFULL_SCREEN: bool = false\r\nPRINT_ENTITY_STRUCT: bool = false\r\nPRINT_PERF_METRICS: bool = false\r\n\r\nRAD_45: float\r\nRAD_90: float\r\nRAD_135: float\r\nRAD_180: float\r\nRAD_225: float\r\nRAD_270: float\r\n\r\nMAX_ENTITIES :: 10000\r\n\r\ntime_now: float\r\nnow_f64: f64\r\ndt: float\r\nupdate_procs: [dynamic]proc()\r\nlate_update_procs: [dynamic]proc()\r\ndraw_procs: [dynamic]proc()\r\n\r\nrender_target: rl.RenderTexture2D\r\nbloom_shader: rl.Shader\r\nsw: time.Stopwatch\r\n\r\n\r\nmain :: proc() \r\n{\r\n  context.logger = log.create_console_logger(.Debug, log.Location_Header_Opts)\r\n\r\n  SCREEN_WIDTH = FULL_SCREEN ? width_full : width_windowed\r\n  SCREEN_HEIGHT = FULL_SCREEN ? height_full : height_windowed\r\n  flags: rl.ConfigFlags = FULL_SCREEN ? {.MSAA_4X_HINT, .FULLSCREEN_MODE} : {.MSAA_4X_HINT}\r\n\r\n  RAD_45 = radians(float(45))\r\n  RAD_90 = radians(float(90))\r\n  RAD_135 = radians(float(135))\r\n  RAD_180 = radians(float(180))\r\n  RAD_225 = radians(float(225))\r\n  RAD_270 = radians(float(270))\r\n\r\n  update_procs = make([dynamic]proc())\r\n  late_update_procs = make([dynamic]proc())\r\n\r\n  manager = init_entity_manager()\r\n  defer destroy_entity_manager()\r\n\r\n  if PRINT_ENTITY_STRUCT {\r\n    log.debug(\"\\n\")\r\n    log.debug(\"==================\")\r\n    log.debug(\"ENTITY STRUCT INFO\")\r\n    log.debug(\"\\n\")\r\n    type_infos := reflect.struct_field_types(Entity)\r\n    type_names := reflect.struct_field_names(Entity)\r\n    for t, i in type_infos {\r\n      log.debug(\"field: \", type_names[i], type_infos[i].size)\r\n    }\r\n    log.debug(\"entity size total: \", size_of(Entity))\r\n  }\r\n\r\n\r\n  rl.SetTraceLogLevel(.WARNING)\r\n  rl.SetConfigFlags(flags)\r\n  rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Entity System Test\")\r\n\r\n  if FULL_SCREEN {\r\n    rl.SetWindowMonitor(0)\r\n  }\r\n\r\n  rl.SetTargetFPS(144)\r\n\r\n\r\n  //============ INIT ============\r\n\r\n  bloom_ctx: BloomContext\r\n  init_bloom(&bloom_ctx, SCREEN_WIDTH, SCREEN_HEIGHT)\r\n  defer cleanup_bloom(&bloom_ctx)\r\n\r\n  init_lighting()\r\n  init_input_handling()\r\n\r\n  append(&update_procs, update_aabbs)\r\n  append(&draw_procs, draw_aabbs)\r\n  init_camera()\r\n  init_player()\r\n  init_projectiles()\r\n  init_level_gen()\r\n  init_enemies()\r\n  init_knockback()\r\n\r\n\r\n  //late stuff\r\n  init_eventsystems()\r\n\r\n  for !rl.WindowShouldClose() {\r\n    time.stopwatch_reset(&sw)\r\n    time.stopwatch_start(&sw)\r\n\r\n    time_now = float(rl.GetTime())\r\n    dt = rl.GetFrameTime()\r\n\r\n\r\n    //tick\r\n    for &p in update_procs {\r\n      p()\r\n    }\r\n\r\n    //late tick\r\n    for &p in late_update_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    //Render\r\n\r\n    // Render scene to bloom buffer\r\n    begin_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginMode3D(camera)\r\n    //rl.DrawGrid(100, 1)\r\n\r\n    for &p in draw_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    rl.EndMode3D()\r\n\r\n    end_bloom_scene(&bloom_ctx)\r\n    rl.BeginDrawing()\r\n    rl.ClearBackground(rl.BLACK)\r\n\r\n    render_bloom(&bloom_ctx)\r\n\r\n\r\n    // PERF METRICS DISPLAY\r\n    if (rl.IsKeyPressed(.F1)) {\r\n      PRINT_PERF_METRICS = !PRINT_PERF_METRICS\r\n    }\r\n    if PRINT_PERF_METRICS {\r\n      rl.DrawFPS(10, 10)\r\n      dur := time.stopwatch_duration(sw)\r\n      rl.DrawText(rl.TextFormat(\"CPU %.2f\"), 10, 40, 18, rl.WHITE)\r\n    }\r\n\r\n    rl.EndDrawing()\r\n\r\n\r\n    //REST TEMP ALLOC\r\n    free_all(context.temp_allocator)\r\n    time.stopwatch_stop(&sw)\r\n  }\r\n\r\n  log.debug(\"\\n\")\r\n  log.debug(\"==================== SHUT DOWN ====================\\n\")\r\n  rl.CloseWindow()\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 192
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAWQ8AAAAAAABbDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6YyIKaW1wb3J0ICJjb3JlOmZtdCIKaW1wb3J0ICJjb3JlOmxvZyIKaW1wb3J0IGxpbmFsZyAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOnJlZmxlY3QiCmltcG9ydCAiY29yZTp0aW1lIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgptYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyCgovL0FMSUFTRVMKZmxvYXQgOjogZjMyCmZsb2F0MiA6OiBybC5WZWN0b3IyCmZsb2F0MyA6OiBybC5WZWN0b3IzCmZsb2F0NCA6OiBybC5WZWN0b3I0CmZsb2F0NF9vbmUgOjogcmwuVmVjdG9yNHsxLCAxLCAxLCAxfQpxdWF0ZXJuaW9uIDo6IHJsLlF1YXRlcm5pb24KZmxvYXQzX3VwIDo6IGZsb2F0M3swLCAxLCAwfQpmbG9hdDNfemVybyA6OiBmbG9hdDN7fQpmbG9hdDNfb25lIDo6IGZsb2F0M3sxLCAxLCAxfQpmbG9hdDNfb25lX3JsIDo6IHJsLlZlY3RvcjN7MSwgMSwgMX0KZmxvYXQzX2Z3ZCA6OiBmbG9hdDN7MCwgMCwgMX0KZmxvYXQzX3JpZ2h0IDo6IGZsb2F0M3sxLCAwLCAwfQpxdWF0ZXJuaW9uX2lkZW50aXR5IDo6IGxpbmFsZy5RVUFURVJOSU9ORjMyX0lERU5USVRZCmludCA6OiBpMzIKClNDUkVFTl9XSURUSDogaW50ClNDUkVFTl9IRUlHSFQ6IGludAoKd2lkdGhfd2luZG93ZWQ6IGludCA9IDE5MjAKaGVpZ2h0X3dpbmRvd2VkOiBpbnQgPSAxMDgwCndpZHRoX2Z1bGw6IGludCA9IDI1NjAKaGVpZ2h0X2Z1bGw6IGludCA9IDE0NDAKCkZVTExfU0NSRUVOOiBib29sID0gZmFsc2UKUFJJTlRfRU5USVRZX1NUUlVDVDogYm9vbCA9IGZhbHNlClBSSU5UX1BFUkZfTUVUUklDUzogYm9vbCA9IGZhbHNlCgpSQURfNDU6IGZsb2F0ClJBRF85MDogZmxvYXQKUkFEXzEzNTogZmxvYXQKUkFEXzE4MDogZmxvYXQKUkFEXzIyNTogZmxvYXQKUkFEXzI3MDogZmxvYXQKCk1BWF9FTlRJVElFUyA6OiAxMDAwMAoKdGltZV9ub3c6IGZsb2F0Cm5vd19mNjQ6IGY2NApkdDogZmxvYXQKdXBkYXRlX3Byb2NzOiBbZHluYW1pY11wcm9jKCkKbGF0ZV91cGRhdGVfcHJvY3M6IFtkeW5hbWljXXByb2MoKQpkcmF3X3Byb2NzOiBbZHluYW1pY11wcm9jKCkKCnJlbmRlcl90YXJnZXQ6IHJsLlJlbmRlclRleHR1cmUyRApibG9vbV9zaGFkZXI6IHJsLlNoYWRlcgpzdzogdGltZS5TdG9wd2F0Y2gKCgptYWluIDo6IHByb2MoKSAKewogIGNvbnRleHQubG9nZ2VyID0gbG9nLmNyZWF0ZV9jb25zb2xlX2xvZ2dlciguRGVidWcsIGxvZy5Mb2NhdGlvbl9IZWFkZXJfT3B0cykKCiAgU0NSRUVOX1dJRFRIID0gRlVMTF9TQ1JFRU4gPyB3aWR0aF9mdWxsIDogd2lkdGhfd2luZG93ZWQKICBTQ1JFRU5fSEVJR0hUID0gRlVMTF9TQ1JFRU4gPyBoZWlnaHRfZnVsbCA6IGhlaWdodF93aW5kb3dlZAogIGZsYWdzOiBybC5Db25maWdGbGFncyA9IEZVTExfU0NSRUVOID8gey5NU0FBXzRYX0hJTlQsIC5GVUxMU0NSRUVOX01PREV9IDogey5NU0FBXzRYX0hJTlR9CgogIFJBRF80NSA9IHJhZGlhbnMoZmxvYXQoNDUpKQogIFJBRF85MCA9IHJhZGlhbnMoZmxvYXQoOTApKQogIFJBRF8xMzUgPSByYWRpYW5zKGZsb2F0KDEzNSkpCiAgUkFEXzE4MCA9IHJhZGlhbnMoZmxvYXQoMTgwKSkKICBSQURfMjI1ID0gcmFkaWFucyhmbG9hdCgyMjUpKQogIFJBRF8yNzAgPSByYWRpYW5zKGZsb2F0KDI3MCkpCgogIHVwZGF0ZV9wcm9jcyA9IG1ha2UoW2R5bmFtaWNdcHJvYygpKQogIGxhdGVfdXBkYXRlX3Byb2NzID0gbWFrZShbZHluYW1pY11wcm9jKCkpCgogIG1hbmFnZXIgPSBpbml0X2VudGl0eV9tYW5hZ2VyKCkKICBkZWZlciBkZXN0cm95X2VudGl0eV9tYW5hZ2VyKCkKCiAgaWYgUFJJTlRfRU5USVRZX1NUUlVDVCB7CiAgICBsb2cuZGVidWcoIlxuIikKICAgIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09IikKICAgIGxvZy5kZWJ1ZygiRU5USVRZIFNUUlVDVCBJTkZPIikKICAgIGxvZy5kZWJ1ZygiXG4iKQogICAgdHlwZV9pbmZvcyA6PSByZWZsZWN0LnN0cnVjdF9maWVsZF90eXBlcyhFbnRpdHkpCiAgICB0eXBlX25hbWVzIDo9IHJlZmxlY3Quc3RydWN0X2ZpZWxkX25hbWVzKEVudGl0eSkKICAgIGZvciB0LCBpIGluIHR5cGVfaW5mb3MgewogICAgICBsb2cuZGVidWcoImZpZWxkOiAiLCB0eXBlX25hbWVzW2ldLCB0eXBlX2luZm9zW2ldLnNpemUpCiAgICB9CiAgICBsb2cuZGVidWcoImVudGl0eSBzaXplIHRvdGFsOiAiLCBzaXplX29mKEVudGl0eSkpCiAgfQoKCiAgcmwuU2V0VHJhY2VMb2dMZXZlbCguV0FSTklORykKICBybC5TZXRDb25maWdGbGFncyhmbGFncykKICBybC5Jbml0V2luZG93KFNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCwgIkVudGl0eSBTeXN0ZW0gVGVzdCIpCgogIGlmIEZVTExfU0NSRUVOIHsKICAgIHJsLlNldFdpbmRvd01vbml0b3IoMCkKICB9CgogIHJsLlNldFRhcmdldEZQUygxNDQpCgoKICAvLz09PT09PT09PT09PSBJTklUID09PT09PT09PT09PQoKICBibG9vbV9jdHg6IEJsb29tQ29udGV4dAogIGluaXRfYmxvb20oJmJsb29tX2N0eCwgU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUKQogIGRlZmVyIGNsZWFudXBfYmxvb20oJmJsb29tX2N0eCkKCiAgaW5pdF9saWdodGluZygpCiAgaW5pdF9pbnB1dF9oYW5kbGluZygpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfYWFiYnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2FhYmJzKQogIGluaXRfY2FtZXJhKCkKICBpbml0X3BsYXllcigpCiAgaW5pdF9wcm9qZWN0aWxlcygpCiAgaW5pdF9sZXZlbF9nZW4oKQogIGluaXRfZW5lbWllcygpCiAgaW5pdF9rbm9ja2JhY2soKQoKCiAgLy9sYXRlIHN0dWZmCiAgaW5pdF9ldmVudHN5c3RlbXMoKQoKICBmb3IgIXJsLldpbmRvd1Nob3VsZENsb3NlKCkgewogICAgdGltZS5zdG9wd2F0Y2hfcmVzZXQoJnN3KQogICAgdGltZS5zdG9wd2F0Y2hfc3RhcnQoJnN3KQoKICAgIHRpbWVfbm93ID0gZmxvYXQocmwuR2V0VGltZSgpKQogICAgZHQgPSBybC5HZXRGcmFtZVRpbWUoKQoKCiAgICAvL3RpY2sKICAgIGZvciAmcCBpbiB1cGRhdGVfcHJvY3MgewogICAgICBwKCkKICAgIH0KCiAgICAvL2xhdGUgdGljawogICAgZm9yICZwIGluIGxhdGVfdXBkYXRlX3Byb2NzIHsKICAgICAgcCgpCiAgICB9CgoKICAgIC8vUmVuZGVyCgogICAgLy8gUmVuZGVyIHNjZW5lIHRvIGJsb29tIGJ1ZmZlcgogICAgYmVnaW5fYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbk1vZGUzRChjYW1lcmEpCiAgICAvL3JsLkRyYXdHcmlkKDEwMCwgMSkKCiAgICBmb3IgJnAgaW4gZHJhd19wcm9jcyB7CiAgICAgIHAoKQogICAgfQoKCiAgICBybC5FbmRNb2RlM0QoKQoKICAgIGVuZF9ibG9vbV9zY2VuZSgmYmxvb21fY3R4KQogICAgcmwuQmVnaW5EcmF3aW5nKCkKICAgIHJsLkNsZWFyQmFja2dyb3VuZChybC5CTEFDSykKCiAgICByZW5kZXJfYmxvb20oJmJsb29tX2N0eCkKCgogICAgLy8gUEVSRiBNRVRSSUNTIERJU1BMQVkKICAgIGlmIChybC5Jc0tleVByZXNzZWQoLkYxKSkgewogICAgICBQUklOVF9QRVJGX01FVFJJQ1MgPSAhUFJJTlRfUEVSRl9NRVRSSUNTCiAgICB9CiAgICBpZiBQUklOVF9QRVJGX01FVFJJQ1MgewogICAgICBybC5EcmF3RlBTKDEwLCAxMCkKICAgICAgZHVyIDo9IHRpbWUuc3RvcHdhdGNoX2R1cmF0aW9uKHN3KQogICAgICBybC5EcmF3VGV4dChybC5UZXh0Rm9ybWF0KCJDUFUgJS4yZiIsICksIDEwLCA0MCwgMTgsIHJsLldISVRFKQogICAgfQoKICAgIHJsLkVuZERyYXdpbmcoKQoKCiAgICAvL1JFU1QgVEVNUCBBTExPQwogICAgZnJlZV9hbGwoY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICAgIHRpbWUuc3RvcHdhdGNoX3N0b3AoJnN3KQogIH0KCiAgbG9nLmRlYnVnKCJcbiIpCiAgbG9nLmRlYnVnKCI9PT09PT09PT09PT09PT09PT09PSBTSFVUIERPV04gPT09PT09PT09PT09PT09PT09PT1cbiIpCiAgcmwuQ2xvc2VXaW5kb3coKQp9Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALw4AAAAAAAAvDgAAAAAAAAAAAAAAAPC/"
				],
				[
					618,
					1,
					"insert",
					{
						"characters": ",dur"
					},
					"BAAAAFoOAAAAAAAAWw4AAAAAAAAAAAAAWw4AAAAAAABcDgAAAAAAAAAAAABcDgAAAAAAAF0OAAAAAAAAAAAAAF0OAAAAAAAAXg4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWg4AAAAAAABaDgAAAAAAAAAAAAAAAPC/"
				],
				[
					621,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:c\"\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport linalg \"core:math/linalg\"\r\nimport \"core:reflect\"\r\nimport \"core:time\"\r\nimport rl \"vendor:raylib\"\r\n\r\nmanager: EntityManager\r\n\r\n//ALIASES\r\nfloat :: f32\r\nfloat2 :: rl.Vector2\r\nfloat3 :: rl.Vector3\r\nfloat4 :: rl.Vector4\r\nfloat4_one :: rl.Vector4{1, 1, 1, 1}\r\nquaternion :: rl.Quaternion\r\nfloat3_up :: float3{0, 1, 0}\r\nfloat3_zero :: float3{}\r\nfloat3_one :: float3{1, 1, 1}\r\nfloat3_one_rl :: rl.Vector3{1, 1, 1}\r\nfloat3_fwd :: float3{0, 0, 1}\r\nfloat3_right :: float3{1, 0, 0}\r\nquaternion_identity :: linalg.QUATERNIONF32_IDENTITY\r\nint :: i32\r\n\r\nSCREEN_WIDTH: int\r\nSCREEN_HEIGHT: int\r\n\r\nwidth_windowed: int = 1920\r\nheight_windowed: int = 1080\r\nwidth_full: int = 2560\r\nheight_full: int = 1440\r\n\r\nFULL_SCREEN: bool = false\r\nPRINT_ENTITY_STRUCT: bool = false\r\nPRINT_PERF_METRICS: bool = false\r\n\r\nRAD_45: float\r\nRAD_90: float\r\nRAD_135: float\r\nRAD_180: float\r\nRAD_225: float\r\nRAD_270: float\r\n\r\nMAX_ENTITIES :: 10000\r\n\r\ntime_now: float\r\nnow_f64: f64\r\ndt: float\r\nupdate_procs: [dynamic]proc()\r\nlate_update_procs: [dynamic]proc()\r\ndraw_procs: [dynamic]proc()\r\n\r\nrender_target: rl.RenderTexture2D\r\nbloom_shader: rl.Shader\r\nsw: time.Stopwatch\r\n\r\n\r\nmain :: proc() \r\n{\r\n  context.logger = log.create_console_logger(.Debug, log.Location_Header_Opts)\r\n\r\n  SCREEN_WIDTH = FULL_SCREEN ? width_full : width_windowed\r\n  SCREEN_HEIGHT = FULL_SCREEN ? height_full : height_windowed\r\n  flags: rl.ConfigFlags = FULL_SCREEN ? {.MSAA_4X_HINT, .FULLSCREEN_MODE} : {.MSAA_4X_HINT}\r\n\r\n  RAD_45 = radians(float(45))\r\n  RAD_90 = radians(float(90))\r\n  RAD_135 = radians(float(135))\r\n  RAD_180 = radians(float(180))\r\n  RAD_225 = radians(float(225))\r\n  RAD_270 = radians(float(270))\r\n\r\n  update_procs = make([dynamic]proc())\r\n  late_update_procs = make([dynamic]proc())\r\n\r\n  manager = init_entity_manager()\r\n  defer destroy_entity_manager()\r\n\r\n  if PRINT_ENTITY_STRUCT {\r\n    log.debug(\"\\n\")\r\n    log.debug(\"==================\")\r\n    log.debug(\"ENTITY STRUCT INFO\")\r\n    log.debug(\"\\n\")\r\n    type_infos := reflect.struct_field_types(Entity)\r\n    type_names := reflect.struct_field_names(Entity)\r\n    for t, i in type_infos {\r\n      log.debug(\"field: \", type_names[i], type_infos[i].size)\r\n    }\r\n    log.debug(\"entity size total: \", size_of(Entity))\r\n  }\r\n\r\n\r\n  rl.SetTraceLogLevel(.WARNING)\r\n  rl.SetConfigFlags(flags)\r\n  rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Entity System Test\")\r\n\r\n  if FULL_SCREEN {\r\n    rl.SetWindowMonitor(0)\r\n  }\r\n\r\n  rl.SetTargetFPS(144)\r\n\r\n\r\n  //============ INIT ============\r\n\r\n  bloom_ctx: BloomContext\r\n  init_bloom(&bloom_ctx, SCREEN_WIDTH, SCREEN_HEIGHT)\r\n  defer cleanup_bloom(&bloom_ctx)\r\n\r\n  init_lighting()\r\n  init_input_handling()\r\n\r\n  append(&update_procs, update_aabbs)\r\n  append(&draw_procs, draw_aabbs)\r\n  init_camera()\r\n  init_player()\r\n  init_projectiles()\r\n  init_level_gen()\r\n  init_enemies()\r\n  init_knockback()\r\n\r\n\r\n  //late stuff\r\n  init_eventsystems()\r\n\r\n  for !rl.WindowShouldClose() {\r\n    time.stopwatch_reset(&sw)\r\n    time.stopwatch_start(&sw)\r\n\r\n    time_now = float(rl.GetTime())\r\n    dt = rl.GetFrameTime()\r\n\r\n\r\n    //tick\r\n    for &p in update_procs {\r\n      p()\r\n    }\r\n\r\n    //late tick\r\n    for &p in late_update_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    //Render\r\n\r\n    // Render scene to bloom buffer\r\n    begin_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginMode3D(camera)\r\n    //rl.DrawGrid(100, 1)\r\n\r\n    for &p in draw_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    rl.EndMode3D()\r\n\r\n    end_bloom_scene(&bloom_ctx)\r\n    rl.BeginDrawing()\r\n    rl.ClearBackground(rl.BLACK)\r\n\r\n    render_bloom(&bloom_ctx)\r\n\r\n\r\n    // PERF METRICS DISPLAY\r\n    if (rl.IsKeyPressed(.F1)) {\r\n      PRINT_PERF_METRICS = !PRINT_PERF_METRICS\r\n    }\r\n    if PRINT_PERF_METRICS {\r\n      rl.DrawFPS(10, 10)\r\n      dur := time.stopwatch_duration(sw)\r\n      rl.DrawText(rl.TextFormat(\"CPU %.2f\", dur), 10, 40, 18, rl.WHITE)\r\n    }\r\n\r\n    rl.EndDrawing()\r\n\r\n\r\n    //REST TEMP ALLOC\r\n    free_all(context.temp_allocator)\r\n    time.stopwatch_stop(&sw)\r\n  }\r\n\r\n  log.debug(\"\\n\")\r\n  log.debug(\"==================== SHUT DOWN ====================\\n\")\r\n  rl.CloseWindow()\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 192
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAXg8AAAAAAABdDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6YyIKaW1wb3J0ICJjb3JlOmZtdCIKaW1wb3J0ICJjb3JlOmxvZyIKaW1wb3J0IGxpbmFsZyAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOnJlZmxlY3QiCmltcG9ydCAiY29yZTp0aW1lIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgptYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyCgovL0FMSUFTRVMKZmxvYXQgOjogZjMyCmZsb2F0MiA6OiBybC5WZWN0b3IyCmZsb2F0MyA6OiBybC5WZWN0b3IzCmZsb2F0NCA6OiBybC5WZWN0b3I0CmZsb2F0NF9vbmUgOjogcmwuVmVjdG9yNHsxLCAxLCAxLCAxfQpxdWF0ZXJuaW9uIDo6IHJsLlF1YXRlcm5pb24KZmxvYXQzX3VwIDo6IGZsb2F0M3swLCAxLCAwfQpmbG9hdDNfemVybyA6OiBmbG9hdDN7fQpmbG9hdDNfb25lIDo6IGZsb2F0M3sxLCAxLCAxfQpmbG9hdDNfb25lX3JsIDo6IHJsLlZlY3RvcjN7MSwgMSwgMX0KZmxvYXQzX2Z3ZCA6OiBmbG9hdDN7MCwgMCwgMX0KZmxvYXQzX3JpZ2h0IDo6IGZsb2F0M3sxLCAwLCAwfQpxdWF0ZXJuaW9uX2lkZW50aXR5IDo6IGxpbmFsZy5RVUFURVJOSU9ORjMyX0lERU5USVRZCmludCA6OiBpMzIKClNDUkVFTl9XSURUSDogaW50ClNDUkVFTl9IRUlHSFQ6IGludAoKd2lkdGhfd2luZG93ZWQ6IGludCA9IDE5MjAKaGVpZ2h0X3dpbmRvd2VkOiBpbnQgPSAxMDgwCndpZHRoX2Z1bGw6IGludCA9IDI1NjAKaGVpZ2h0X2Z1bGw6IGludCA9IDE0NDAKCkZVTExfU0NSRUVOOiBib29sID0gZmFsc2UKUFJJTlRfRU5USVRZX1NUUlVDVDogYm9vbCA9IGZhbHNlClBSSU5UX1BFUkZfTUVUUklDUzogYm9vbCA9IGZhbHNlCgpSQURfNDU6IGZsb2F0ClJBRF85MDogZmxvYXQKUkFEXzEzNTogZmxvYXQKUkFEXzE4MDogZmxvYXQKUkFEXzIyNTogZmxvYXQKUkFEXzI3MDogZmxvYXQKCk1BWF9FTlRJVElFUyA6OiAxMDAwMAoKdGltZV9ub3c6IGZsb2F0Cm5vd19mNjQ6IGY2NApkdDogZmxvYXQKdXBkYXRlX3Byb2NzOiBbZHluYW1pY11wcm9jKCkKbGF0ZV91cGRhdGVfcHJvY3M6IFtkeW5hbWljXXByb2MoKQpkcmF3X3Byb2NzOiBbZHluYW1pY11wcm9jKCkKCnJlbmRlcl90YXJnZXQ6IHJsLlJlbmRlclRleHR1cmUyRApibG9vbV9zaGFkZXI6IHJsLlNoYWRlcgpzdzogdGltZS5TdG9wd2F0Y2gKCgptYWluIDo6IHByb2MoKSAKewogIGNvbnRleHQubG9nZ2VyID0gbG9nLmNyZWF0ZV9jb25zb2xlX2xvZ2dlciguRGVidWcsIGxvZy5Mb2NhdGlvbl9IZWFkZXJfT3B0cykKCiAgU0NSRUVOX1dJRFRIID0gRlVMTF9TQ1JFRU4gPyB3aWR0aF9mdWxsIDogd2lkdGhfd2luZG93ZWQKICBTQ1JFRU5fSEVJR0hUID0gRlVMTF9TQ1JFRU4gPyBoZWlnaHRfZnVsbCA6IGhlaWdodF93aW5kb3dlZAogIGZsYWdzOiBybC5Db25maWdGbGFncyA9IEZVTExfU0NSRUVOID8gey5NU0FBXzRYX0hJTlQsIC5GVUxMU0NSRUVOX01PREV9IDogey5NU0FBXzRYX0hJTlR9CgogIFJBRF80NSA9IHJhZGlhbnMoZmxvYXQoNDUpKQogIFJBRF85MCA9IHJhZGlhbnMoZmxvYXQoOTApKQogIFJBRF8xMzUgPSByYWRpYW5zKGZsb2F0KDEzNSkpCiAgUkFEXzE4MCA9IHJhZGlhbnMoZmxvYXQoMTgwKSkKICBSQURfMjI1ID0gcmFkaWFucyhmbG9hdCgyMjUpKQogIFJBRF8yNzAgPSByYWRpYW5zKGZsb2F0KDI3MCkpCgogIHVwZGF0ZV9wcm9jcyA9IG1ha2UoW2R5bmFtaWNdcHJvYygpKQogIGxhdGVfdXBkYXRlX3Byb2NzID0gbWFrZShbZHluYW1pY11wcm9jKCkpCgogIG1hbmFnZXIgPSBpbml0X2VudGl0eV9tYW5hZ2VyKCkKICBkZWZlciBkZXN0cm95X2VudGl0eV9tYW5hZ2VyKCkKCiAgaWYgUFJJTlRfRU5USVRZX1NUUlVDVCB7CiAgICBsb2cuZGVidWcoIlxuIikKICAgIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09IikKICAgIGxvZy5kZWJ1ZygiRU5USVRZIFNUUlVDVCBJTkZPIikKICAgIGxvZy5kZWJ1ZygiXG4iKQogICAgdHlwZV9pbmZvcyA6PSByZWZsZWN0LnN0cnVjdF9maWVsZF90eXBlcyhFbnRpdHkpCiAgICB0eXBlX25hbWVzIDo9IHJlZmxlY3Quc3RydWN0X2ZpZWxkX25hbWVzKEVudGl0eSkKICAgIGZvciB0LCBpIGluIHR5cGVfaW5mb3MgewogICAgICBsb2cuZGVidWcoImZpZWxkOiAiLCB0eXBlX25hbWVzW2ldLCB0eXBlX2luZm9zW2ldLnNpemUpCiAgICB9CiAgICBsb2cuZGVidWcoImVudGl0eSBzaXplIHRvdGFsOiAiLCBzaXplX29mKEVudGl0eSkpCiAgfQoKCiAgcmwuU2V0VHJhY2VMb2dMZXZlbCguV0FSTklORykKICBybC5TZXRDb25maWdGbGFncyhmbGFncykKICBybC5Jbml0V2luZG93KFNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCwgIkVudGl0eSBTeXN0ZW0gVGVzdCIpCgogIGlmIEZVTExfU0NSRUVOIHsKICAgIHJsLlNldFdpbmRvd01vbml0b3IoMCkKICB9CgogIHJsLlNldFRhcmdldEZQUygxNDQpCgoKICAvLz09PT09PT09PT09PSBJTklUID09PT09PT09PT09PQoKICBibG9vbV9jdHg6IEJsb29tQ29udGV4dAogIGluaXRfYmxvb20oJmJsb29tX2N0eCwgU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUKQogIGRlZmVyIGNsZWFudXBfYmxvb20oJmJsb29tX2N0eCkKCiAgaW5pdF9saWdodGluZygpCiAgaW5pdF9pbnB1dF9oYW5kbGluZygpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfYWFiYnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2FhYmJzKQogIGluaXRfY2FtZXJhKCkKICBpbml0X3BsYXllcigpCiAgaW5pdF9wcm9qZWN0aWxlcygpCiAgaW5pdF9sZXZlbF9nZW4oKQogIGluaXRfZW5lbWllcygpCiAgaW5pdF9rbm9ja2JhY2soKQoKCiAgLy9sYXRlIHN0dWZmCiAgaW5pdF9ldmVudHN5c3RlbXMoKQoKICBmb3IgIXJsLldpbmRvd1Nob3VsZENsb3NlKCkgewogICAgdGltZS5zdG9wd2F0Y2hfcmVzZXQoJnN3KQogICAgdGltZS5zdG9wd2F0Y2hfc3RhcnQoJnN3KQoKICAgIHRpbWVfbm93ID0gZmxvYXQocmwuR2V0VGltZSgpKQogICAgZHQgPSBybC5HZXRGcmFtZVRpbWUoKQoKCiAgICAvL3RpY2sKICAgIGZvciAmcCBpbiB1cGRhdGVfcHJvY3MgewogICAgICBwKCkKICAgIH0KCiAgICAvL2xhdGUgdGljawogICAgZm9yICZwIGluIGxhdGVfdXBkYXRlX3Byb2NzIHsKICAgICAgcCgpCiAgICB9CgoKICAgIC8vUmVuZGVyCgogICAgLy8gUmVuZGVyIHNjZW5lIHRvIGJsb29tIGJ1ZmZlcgogICAgYmVnaW5fYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbk1vZGUzRChjYW1lcmEpCiAgICAvL3JsLkRyYXdHcmlkKDEwMCwgMSkKCiAgICBmb3IgJnAgaW4gZHJhd19wcm9jcyB7CiAgICAgIHAoKQogICAgfQoKCiAgICBybC5FbmRNb2RlM0QoKQoKICAgIGVuZF9ibG9vbV9zY2VuZSgmYmxvb21fY3R4KQogICAgcmwuQmVnaW5EcmF3aW5nKCkKICAgIHJsLkNsZWFyQmFja2dyb3VuZChybC5CTEFDSykKCiAgICByZW5kZXJfYmxvb20oJmJsb29tX2N0eCkKCgogICAgLy8gUEVSRiBNRVRSSUNTIERJU1BMQVkKICAgIGlmIChybC5Jc0tleVByZXNzZWQoLkYxKSkgewogICAgICBQUklOVF9QRVJGX01FVFJJQ1MgPSAhUFJJTlRfUEVSRl9NRVRSSUNTCiAgICB9CiAgICBpZiBQUklOVF9QRVJGX01FVFJJQ1MgewogICAgICBybC5EcmF3RlBTKDEwLCAxMCkKICAgICAgZHVyIDo9IHRpbWUuc3RvcHdhdGNoX2R1cmF0aW9uKHN3KQogICAgICBybC5EcmF3VGV4dChybC5UZXh0Rm9ybWF0KCJDUFUgJS4yZiIsZHVyKSwgMTAsIDQwLCAxOCwgcmwuV0hJVEUpCiAgICB9CgogICAgcmwuRW5kRHJhd2luZygpCgoKICAgIC8vUkVTVCBURU1QIEFMTE9DCiAgICBmcmVlX2FsbChjb250ZXh0LnRlbXBfYWxsb2NhdG9yKQogICAgdGltZS5zdG9wd2F0Y2hfc3RvcCgmc3cpCiAgfQoKICBsb2cuZGVidWcoIlxuIikKICBsb2cuZGVidWcoIj09PT09PT09PT09PT09PT09PT09IFNIVVQgRE9XTiA9PT09PT09PT09PT09PT09PT09PVxuIikKICBybC5DbG9zZVdpbmRvdygpCn0K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXw4AAAAAAABfDgAAAAAAAAAAAAAAAPC/"
				],
				[
					626,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAF8OAAAAAAAAYA4AAAAAAAAAAAAAYA4AAAAAAABhDgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXw4AAAAAAABfDgAAAAAAAAAAAAAAAPC/"
				],
				[
					627,
					1,
					"insert",
					{
						"characters": " 1000"
					},
					"BQAAAGEOAAAAAAAAYg4AAAAAAAAAAAAAYg4AAAAAAABjDgAAAAAAAAAAAABjDgAAAAAAAGQOAAAAAAAAAAAAAGQOAAAAAAAAZQ4AAAAAAAAAAAAAZQ4AAAAAAABmDgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYQ4AAAAAAABhDgAAAAAAAAAAAAAAAPC/"
				],
				[
					629,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAFwOAAAAAAAAXQ4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXA4AAAAAAABcDgAAAAAAAAAAAAAAAPC/"
				],
				[
					633,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAGgOAAAAAAAAaQ4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaA4AAAAAAABoDgAAAAAAAAAAAAAAAPC/"
				],
				[
					635,
					1,
					"insert",
					{
						"characters": "/1000"
					},
					"BQAAAGgOAAAAAAAAaQ4AAAAAAAAAAAAAaQ4AAAAAAABqDgAAAAAAAAAAAABqDgAAAAAAAGsOAAAAAAAAAAAAAGsOAAAAAAAAbA4AAAAAAAAAAAAAbA4AAAAAAABtDgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaA4AAAAAAABoDgAAAAAAAAAAAAAAAPC/"
				],
				[
					637,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:c\"\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport linalg \"core:math/linalg\"\r\nimport \"core:reflect\"\r\nimport \"core:time\"\r\nimport rl \"vendor:raylib\"\r\n\r\nmanager: EntityManager\r\n\r\n//ALIASES\r\nfloat :: f32\r\nfloat2 :: rl.Vector2\r\nfloat3 :: rl.Vector3\r\nfloat4 :: rl.Vector4\r\nfloat4_one :: rl.Vector4{1, 1, 1, 1}\r\nquaternion :: rl.Quaternion\r\nfloat3_up :: float3{0, 1, 0}\r\nfloat3_zero :: float3{}\r\nfloat3_one :: float3{1, 1, 1}\r\nfloat3_one_rl :: rl.Vector3{1, 1, 1}\r\nfloat3_fwd :: float3{0, 0, 1}\r\nfloat3_right :: float3{1, 0, 0}\r\nquaternion_identity :: linalg.QUATERNIONF32_IDENTITY\r\nint :: i32\r\n\r\nSCREEN_WIDTH: int\r\nSCREEN_HEIGHT: int\r\n\r\nwidth_windowed: int = 1920\r\nheight_windowed: int = 1080\r\nwidth_full: int = 2560\r\nheight_full: int = 1440\r\n\r\nFULL_SCREEN: bool = false\r\nPRINT_ENTITY_STRUCT: bool = false\r\nPRINT_PERF_METRICS: bool = false\r\n\r\nRAD_45: float\r\nRAD_90: float\r\nRAD_135: float\r\nRAD_180: float\r\nRAD_225: float\r\nRAD_270: float\r\n\r\nMAX_ENTITIES :: 10000\r\n\r\ntime_now: float\r\nnow_f64: f64\r\ndt: float\r\nupdate_procs: [dynamic]proc()\r\nlate_update_procs: [dynamic]proc()\r\ndraw_procs: [dynamic]proc()\r\n\r\nrender_target: rl.RenderTexture2D\r\nbloom_shader: rl.Shader\r\nsw: time.Stopwatch\r\n\r\n\r\nmain :: proc() \r\n{\r\n  context.logger = log.create_console_logger(.Debug, log.Location_Header_Opts)\r\n\r\n  SCREEN_WIDTH = FULL_SCREEN ? width_full : width_windowed\r\n  SCREEN_HEIGHT = FULL_SCREEN ? height_full : height_windowed\r\n  flags: rl.ConfigFlags = FULL_SCREEN ? {.MSAA_4X_HINT, .FULLSCREEN_MODE} : {.MSAA_4X_HINT}\r\n\r\n  RAD_45 = radians(float(45))\r\n  RAD_90 = radians(float(90))\r\n  RAD_135 = radians(float(135))\r\n  RAD_180 = radians(float(180))\r\n  RAD_225 = radians(float(225))\r\n  RAD_270 = radians(float(270))\r\n\r\n  update_procs = make([dynamic]proc())\r\n  late_update_procs = make([dynamic]proc())\r\n\r\n  manager = init_entity_manager()\r\n  defer destroy_entity_manager()\r\n\r\n  if PRINT_ENTITY_STRUCT {\r\n    log.debug(\"\\n\")\r\n    log.debug(\"==================\")\r\n    log.debug(\"ENTITY STRUCT INFO\")\r\n    log.debug(\"\\n\")\r\n    type_infos := reflect.struct_field_types(Entity)\r\n    type_names := reflect.struct_field_names(Entity)\r\n    for t, i in type_infos {\r\n      log.debug(\"field: \", type_names[i], type_infos[i].size)\r\n    }\r\n    log.debug(\"entity size total: \", size_of(Entity))\r\n  }\r\n\r\n\r\n  rl.SetTraceLogLevel(.WARNING)\r\n  rl.SetConfigFlags(flags)\r\n  rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Entity System Test\")\r\n\r\n  if FULL_SCREEN {\r\n    rl.SetWindowMonitor(0)\r\n  }\r\n\r\n  rl.SetTargetFPS(144)\r\n\r\n\r\n  //============ INIT ============\r\n\r\n  bloom_ctx: BloomContext\r\n  init_bloom(&bloom_ctx, SCREEN_WIDTH, SCREEN_HEIGHT)\r\n  defer cleanup_bloom(&bloom_ctx)\r\n\r\n  init_lighting()\r\n  init_input_handling()\r\n\r\n  append(&update_procs, update_aabbs)\r\n  append(&draw_procs, draw_aabbs)\r\n  init_camera()\r\n  init_player()\r\n  init_projectiles()\r\n  init_level_gen()\r\n  init_enemies()\r\n  init_knockback()\r\n\r\n\r\n  //late stuff\r\n  init_eventsystems()\r\n\r\n  for !rl.WindowShouldClose() {\r\n    time.stopwatch_reset(&sw)\r\n    time.stopwatch_start(&sw)\r\n\r\n    time_now = float(rl.GetTime())\r\n    dt = rl.GetFrameTime()\r\n\r\n\r\n    //tick\r\n    for &p in update_procs {\r\n      p()\r\n    }\r\n\r\n    //late tick\r\n    for &p in late_update_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    //Render\r\n\r\n    // Render scene to bloom buffer\r\n    begin_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginMode3D(camera)\r\n    //rl.DrawGrid(100, 1)\r\n\r\n    for &p in draw_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    rl.EndMode3D()\r\n\r\n    end_bloom_scene(&bloom_ctx)\r\n    rl.BeginDrawing()\r\n    rl.ClearBackground(rl.BLACK)\r\n\r\n    render_bloom(&bloom_ctx)\r\n\r\n\r\n    // PERF METRICS DISPLAY\r\n    if (rl.IsKeyPressed(.F1)) {\r\n      PRINT_PERF_METRICS = !PRINT_PERF_METRICS\r\n    }\r\n    if PRINT_PERF_METRICS {\r\n      rl.DrawFPS(10, 10)\r\n      dur := time.stopwatch_duration(sw)\r\n      rl.DrawText(rl.TextFormat(\"CPU %.2f\", (dur * 1000) / 1000), 10, 40, 18, rl.WHITE)\r\n    }\r\n\r\n    rl.EndDrawing()\r\n\r\n\r\n    //REST TEMP ALLOC\r\n    free_all(context.temp_allocator)\r\n    time.stopwatch_stop(&sw)\r\n  }\r\n\r\n  log.debug(\"\\n\")\r\n  log.debug(\"==================== SHUT DOWN ====================\\n\")\r\n  rl.CloseWindow()\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 192
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAbg8AAAAAAABsDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6YyIKaW1wb3J0ICJjb3JlOmZtdCIKaW1wb3J0ICJjb3JlOmxvZyIKaW1wb3J0IGxpbmFsZyAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOnJlZmxlY3QiCmltcG9ydCAiY29yZTp0aW1lIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgptYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyCgovL0FMSUFTRVMKZmxvYXQgOjogZjMyCmZsb2F0MiA6OiBybC5WZWN0b3IyCmZsb2F0MyA6OiBybC5WZWN0b3IzCmZsb2F0NCA6OiBybC5WZWN0b3I0CmZsb2F0NF9vbmUgOjogcmwuVmVjdG9yNHsxLCAxLCAxLCAxfQpxdWF0ZXJuaW9uIDo6IHJsLlF1YXRlcm5pb24KZmxvYXQzX3VwIDo6IGZsb2F0M3swLCAxLCAwfQpmbG9hdDNfemVybyA6OiBmbG9hdDN7fQpmbG9hdDNfb25lIDo6IGZsb2F0M3sxLCAxLCAxfQpmbG9hdDNfb25lX3JsIDo6IHJsLlZlY3RvcjN7MSwgMSwgMX0KZmxvYXQzX2Z3ZCA6OiBmbG9hdDN7MCwgMCwgMX0KZmxvYXQzX3JpZ2h0IDo6IGZsb2F0M3sxLCAwLCAwfQpxdWF0ZXJuaW9uX2lkZW50aXR5IDo6IGxpbmFsZy5RVUFURVJOSU9ORjMyX0lERU5USVRZCmludCA6OiBpMzIKClNDUkVFTl9XSURUSDogaW50ClNDUkVFTl9IRUlHSFQ6IGludAoKd2lkdGhfd2luZG93ZWQ6IGludCA9IDE5MjAKaGVpZ2h0X3dpbmRvd2VkOiBpbnQgPSAxMDgwCndpZHRoX2Z1bGw6IGludCA9IDI1NjAKaGVpZ2h0X2Z1bGw6IGludCA9IDE0NDAKCkZVTExfU0NSRUVOOiBib29sID0gZmFsc2UKUFJJTlRfRU5USVRZX1NUUlVDVDogYm9vbCA9IGZhbHNlClBSSU5UX1BFUkZfTUVUUklDUzogYm9vbCA9IGZhbHNlCgpSQURfNDU6IGZsb2F0ClJBRF85MDogZmxvYXQKUkFEXzEzNTogZmxvYXQKUkFEXzE4MDogZmxvYXQKUkFEXzIyNTogZmxvYXQKUkFEXzI3MDogZmxvYXQKCk1BWF9FTlRJVElFUyA6OiAxMDAwMAoKdGltZV9ub3c6IGZsb2F0Cm5vd19mNjQ6IGY2NApkdDogZmxvYXQKdXBkYXRlX3Byb2NzOiBbZHluYW1pY11wcm9jKCkKbGF0ZV91cGRhdGVfcHJvY3M6IFtkeW5hbWljXXByb2MoKQpkcmF3X3Byb2NzOiBbZHluYW1pY11wcm9jKCkKCnJlbmRlcl90YXJnZXQ6IHJsLlJlbmRlclRleHR1cmUyRApibG9vbV9zaGFkZXI6IHJsLlNoYWRlcgpzdzogdGltZS5TdG9wd2F0Y2gKCgptYWluIDo6IHByb2MoKSAKewogIGNvbnRleHQubG9nZ2VyID0gbG9nLmNyZWF0ZV9jb25zb2xlX2xvZ2dlciguRGVidWcsIGxvZy5Mb2NhdGlvbl9IZWFkZXJfT3B0cykKCiAgU0NSRUVOX1dJRFRIID0gRlVMTF9TQ1JFRU4gPyB3aWR0aF9mdWxsIDogd2lkdGhfd2luZG93ZWQKICBTQ1JFRU5fSEVJR0hUID0gRlVMTF9TQ1JFRU4gPyBoZWlnaHRfZnVsbCA6IGhlaWdodF93aW5kb3dlZAogIGZsYWdzOiBybC5Db25maWdGbGFncyA9IEZVTExfU0NSRUVOID8gey5NU0FBXzRYX0hJTlQsIC5GVUxMU0NSRUVOX01PREV9IDogey5NU0FBXzRYX0hJTlR9CgogIFJBRF80NSA9IHJhZGlhbnMoZmxvYXQoNDUpKQogIFJBRF85MCA9IHJhZGlhbnMoZmxvYXQoOTApKQogIFJBRF8xMzUgPSByYWRpYW5zKGZsb2F0KDEzNSkpCiAgUkFEXzE4MCA9IHJhZGlhbnMoZmxvYXQoMTgwKSkKICBSQURfMjI1ID0gcmFkaWFucyhmbG9hdCgyMjUpKQogIFJBRF8yNzAgPSByYWRpYW5zKGZsb2F0KDI3MCkpCgogIHVwZGF0ZV9wcm9jcyA9IG1ha2UoW2R5bmFtaWNdcHJvYygpKQogIGxhdGVfdXBkYXRlX3Byb2NzID0gbWFrZShbZHluYW1pY11wcm9jKCkpCgogIG1hbmFnZXIgPSBpbml0X2VudGl0eV9tYW5hZ2VyKCkKICBkZWZlciBkZXN0cm95X2VudGl0eV9tYW5hZ2VyKCkKCiAgaWYgUFJJTlRfRU5USVRZX1NUUlVDVCB7CiAgICBsb2cuZGVidWcoIlxuIikKICAgIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09IikKICAgIGxvZy5kZWJ1ZygiRU5USVRZIFNUUlVDVCBJTkZPIikKICAgIGxvZy5kZWJ1ZygiXG4iKQogICAgdHlwZV9pbmZvcyA6PSByZWZsZWN0LnN0cnVjdF9maWVsZF90eXBlcyhFbnRpdHkpCiAgICB0eXBlX25hbWVzIDo9IHJlZmxlY3Quc3RydWN0X2ZpZWxkX25hbWVzKEVudGl0eSkKICAgIGZvciB0LCBpIGluIHR5cGVfaW5mb3MgewogICAgICBsb2cuZGVidWcoImZpZWxkOiAiLCB0eXBlX25hbWVzW2ldLCB0eXBlX2luZm9zW2ldLnNpemUpCiAgICB9CiAgICBsb2cuZGVidWcoImVudGl0eSBzaXplIHRvdGFsOiAiLCBzaXplX29mKEVudGl0eSkpCiAgfQoKCiAgcmwuU2V0VHJhY2VMb2dMZXZlbCguV0FSTklORykKICBybC5TZXRDb25maWdGbGFncyhmbGFncykKICBybC5Jbml0V2luZG93KFNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCwgIkVudGl0eSBTeXN0ZW0gVGVzdCIpCgogIGlmIEZVTExfU0NSRUVOIHsKICAgIHJsLlNldFdpbmRvd01vbml0b3IoMCkKICB9CgogIHJsLlNldFRhcmdldEZQUygxNDQpCgoKICAvLz09PT09PT09PT09PSBJTklUID09PT09PT09PT09PQoKICBibG9vbV9jdHg6IEJsb29tQ29udGV4dAogIGluaXRfYmxvb20oJmJsb29tX2N0eCwgU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUKQogIGRlZmVyIGNsZWFudXBfYmxvb20oJmJsb29tX2N0eCkKCiAgaW5pdF9saWdodGluZygpCiAgaW5pdF9pbnB1dF9oYW5kbGluZygpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfYWFiYnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2FhYmJzKQogIGluaXRfY2FtZXJhKCkKICBpbml0X3BsYXllcigpCiAgaW5pdF9wcm9qZWN0aWxlcygpCiAgaW5pdF9sZXZlbF9nZW4oKQogIGluaXRfZW5lbWllcygpCiAgaW5pdF9rbm9ja2JhY2soKQoKCiAgLy9sYXRlIHN0dWZmCiAgaW5pdF9ldmVudHN5c3RlbXMoKQoKICBmb3IgIXJsLldpbmRvd1Nob3VsZENsb3NlKCkgewogICAgdGltZS5zdG9wd2F0Y2hfcmVzZXQoJnN3KQogICAgdGltZS5zdG9wd2F0Y2hfc3RhcnQoJnN3KQoKICAgIHRpbWVfbm93ID0gZmxvYXQocmwuR2V0VGltZSgpKQogICAgZHQgPSBybC5HZXRGcmFtZVRpbWUoKQoKCiAgICAvL3RpY2sKICAgIGZvciAmcCBpbiB1cGRhdGVfcHJvY3MgewogICAgICBwKCkKICAgIH0KCiAgICAvL2xhdGUgdGljawogICAgZm9yICZwIGluIGxhdGVfdXBkYXRlX3Byb2NzIHsKICAgICAgcCgpCiAgICB9CgoKICAgIC8vUmVuZGVyCgogICAgLy8gUmVuZGVyIHNjZW5lIHRvIGJsb29tIGJ1ZmZlcgogICAgYmVnaW5fYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbk1vZGUzRChjYW1lcmEpCiAgICAvL3JsLkRyYXdHcmlkKDEwMCwgMSkKCiAgICBmb3IgJnAgaW4gZHJhd19wcm9jcyB7CiAgICAgIHAoKQogICAgfQoKCiAgICBybC5FbmRNb2RlM0QoKQoKICAgIGVuZF9ibG9vbV9zY2VuZSgmYmxvb21fY3R4KQogICAgcmwuQmVnaW5EcmF3aW5nKCkKICAgIHJsLkNsZWFyQmFja2dyb3VuZChybC5CTEFDSykKCiAgICByZW5kZXJfYmxvb20oJmJsb29tX2N0eCkKCgogICAgLy8gUEVSRiBNRVRSSUNTIERJU1BMQVkKICAgIGlmIChybC5Jc0tleVByZXNzZWQoLkYxKSkgewogICAgICBQUklOVF9QRVJGX01FVFJJQ1MgPSAhUFJJTlRfUEVSRl9NRVRSSUNTCiAgICB9CiAgICBpZiBQUklOVF9QRVJGX01FVFJJQ1MgewogICAgICBybC5EcmF3RlBTKDEwLCAxMCkKICAgICAgZHVyIDo9IHRpbWUuc3RvcHdhdGNoX2R1cmF0aW9uKHN3KQogICAgICBybC5EcmF3VGV4dChybC5UZXh0Rm9ybWF0KCJDUFUgJS4yZiIsIChkdXIgKiAxMDAwKS8xMDAwKSwgMTAsIDQwLCAxOCwgcmwuV0hJVEUpCiAgICB9CgogICAgcmwuRW5kRHJhd2luZygpCgoKICAgIC8vUkVTVCBURU1QIEFMTE9DCiAgICBmcmVlX2FsbChjb250ZXh0LnRlbXBfYWxsb2NhdG9yKQogICAgdGltZS5zdG9wd2F0Y2hfc3RvcCgmc3cpCiAgfQoKICBsb2cuZGVidWcoIlxuIikKICBsb2cuZGVidWcoIj09PT09PT09PT09PT09PT09PT09IFNIVVQgRE9XTiA9PT09PT09PT09PT09PT09PT09PVxuIikKICBybC5DbG9zZVdpbmRvdygpCn0K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbQ4AAAAAAABtDgAAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					3,
					"left_delete",
					null,
					"AwAAAGkOAAAAAAAAaQ4AAAAAAAAGAAAALyAxMDAwaA4AAAAAAABoDgAAAAAAAAEAAAAgZw4AAAAAAABnDgAAAAAAAAEAAAAp",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbw4AAAAAAABpDgAAAAAAAAAAAAAAAPC/"
				],
				[
					641,
					1,
					"left_delete",
					null,
					"AQAAAFwOAAAAAAAAXA4AAAAAAAABAAAAKA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXQ4AAAAAAABdDgAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:c\"\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport linalg \"core:math/linalg\"\r\nimport \"core:reflect\"\r\nimport \"core:time\"\r\nimport rl \"vendor:raylib\"\r\n\r\nmanager: EntityManager\r\n\r\n//ALIASES\r\nfloat :: f32\r\nfloat2 :: rl.Vector2\r\nfloat3 :: rl.Vector3\r\nfloat4 :: rl.Vector4\r\nfloat4_one :: rl.Vector4{1, 1, 1, 1}\r\nquaternion :: rl.Quaternion\r\nfloat3_up :: float3{0, 1, 0}\r\nfloat3_zero :: float3{}\r\nfloat3_one :: float3{1, 1, 1}\r\nfloat3_one_rl :: rl.Vector3{1, 1, 1}\r\nfloat3_fwd :: float3{0, 0, 1}\r\nfloat3_right :: float3{1, 0, 0}\r\nquaternion_identity :: linalg.QUATERNIONF32_IDENTITY\r\nint :: i32\r\n\r\nSCREEN_WIDTH: int\r\nSCREEN_HEIGHT: int\r\n\r\nwidth_windowed: int = 1920\r\nheight_windowed: int = 1080\r\nwidth_full: int = 2560\r\nheight_full: int = 1440\r\n\r\nFULL_SCREEN: bool = false\r\nPRINT_ENTITY_STRUCT: bool = false\r\nPRINT_PERF_METRICS: bool = false\r\n\r\nRAD_45: float\r\nRAD_90: float\r\nRAD_135: float\r\nRAD_180: float\r\nRAD_225: float\r\nRAD_270: float\r\n\r\nMAX_ENTITIES :: 10000\r\n\r\ntime_now: float\r\nnow_f64: f64\r\ndt: float\r\nupdate_procs: [dynamic]proc()\r\nlate_update_procs: [dynamic]proc()\r\ndraw_procs: [dynamic]proc()\r\n\r\nrender_target: rl.RenderTexture2D\r\nbloom_shader: rl.Shader\r\nsw: time.Stopwatch\r\n\r\n\r\nmain :: proc() \r\n{\r\n  context.logger = log.create_console_logger(.Debug, log.Location_Header_Opts)\r\n\r\n  SCREEN_WIDTH = FULL_SCREEN ? width_full : width_windowed\r\n  SCREEN_HEIGHT = FULL_SCREEN ? height_full : height_windowed\r\n  flags: rl.ConfigFlags = FULL_SCREEN ? {.MSAA_4X_HINT, .FULLSCREEN_MODE} : {.MSAA_4X_HINT}\r\n\r\n  RAD_45 = radians(float(45))\r\n  RAD_90 = radians(float(90))\r\n  RAD_135 = radians(float(135))\r\n  RAD_180 = radians(float(180))\r\n  RAD_225 = radians(float(225))\r\n  RAD_270 = radians(float(270))\r\n\r\n  update_procs = make([dynamic]proc())\r\n  late_update_procs = make([dynamic]proc())\r\n\r\n  manager = init_entity_manager()\r\n  defer destroy_entity_manager()\r\n\r\n  if PRINT_ENTITY_STRUCT {\r\n    log.debug(\"\\n\")\r\n    log.debug(\"==================\")\r\n    log.debug(\"ENTITY STRUCT INFO\")\r\n    log.debug(\"\\n\")\r\n    type_infos := reflect.struct_field_types(Entity)\r\n    type_names := reflect.struct_field_names(Entity)\r\n    for t, i in type_infos {\r\n      log.debug(\"field: \", type_names[i], type_infos[i].size)\r\n    }\r\n    log.debug(\"entity size total: \", size_of(Entity))\r\n  }\r\n\r\n\r\n  rl.SetTraceLogLevel(.WARNING)\r\n  rl.SetConfigFlags(flags)\r\n  rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Entity System Test\")\r\n\r\n  if FULL_SCREEN {\r\n    rl.SetWindowMonitor(0)\r\n  }\r\n\r\n  rl.SetTargetFPS(144)\r\n\r\n\r\n  //============ INIT ============\r\n\r\n  bloom_ctx: BloomContext\r\n  init_bloom(&bloom_ctx, SCREEN_WIDTH, SCREEN_HEIGHT)\r\n  defer cleanup_bloom(&bloom_ctx)\r\n\r\n  init_lighting()\r\n  init_input_handling()\r\n\r\n  append(&update_procs, update_aabbs)\r\n  append(&draw_procs, draw_aabbs)\r\n  init_camera()\r\n  init_player()\r\n  init_projectiles()\r\n  init_level_gen()\r\n  init_enemies()\r\n  init_knockback()\r\n\r\n\r\n  //late stuff\r\n  init_eventsystems()\r\n\r\n  for !rl.WindowShouldClose() {\r\n    time.stopwatch_reset(&sw)\r\n    time.stopwatch_start(&sw)\r\n\r\n    time_now = float(rl.GetTime())\r\n    dt = rl.GetFrameTime()\r\n\r\n\r\n    //tick\r\n    for &p in update_procs {\r\n      p()\r\n    }\r\n\r\n    //late tick\r\n    for &p in late_update_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    //Render\r\n\r\n    // Render scene to bloom buffer\r\n    begin_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginMode3D(camera)\r\n    //rl.DrawGrid(100, 1)\r\n\r\n    for &p in draw_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    rl.EndMode3D()\r\n\r\n    end_bloom_scene(&bloom_ctx)\r\n    rl.BeginDrawing()\r\n    rl.ClearBackground(rl.BLACK)\r\n\r\n    render_bloom(&bloom_ctx)\r\n\r\n\r\n    // PERF METRICS DISPLAY\r\n    if (rl.IsKeyPressed(.F1)) {\r\n      PRINT_PERF_METRICS = !PRINT_PERF_METRICS\r\n    }\r\n    if PRINT_PERF_METRICS {\r\n      rl.DrawFPS(10, 10)\r\n      dur := time.stopwatch_duration(sw)\r\n      rl.DrawText(rl.TextFormat(\"CPU %.2f\", dur * 1000), 10, 40, 18, rl.WHITE)\r\n    }\r\n\r\n    rl.EndDrawing()\r\n\r\n\r\n    //REST TEMP ALLOC\r\n    free_all(context.temp_allocator)\r\n    time.stopwatch_stop(&sw)\r\n  }\r\n\r\n  log.debug(\"\\n\")\r\n  log.debug(\"==================== SHUT DOWN ====================\\n\")\r\n  rl.CloseWindow()\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 192
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAZQ8AAAAAAABlDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6YyIKaW1wb3J0ICJjb3JlOmZtdCIKaW1wb3J0ICJjb3JlOmxvZyIKaW1wb3J0IGxpbmFsZyAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOnJlZmxlY3QiCmltcG9ydCAiY29yZTp0aW1lIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgptYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyCgovL0FMSUFTRVMKZmxvYXQgOjogZjMyCmZsb2F0MiA6OiBybC5WZWN0b3IyCmZsb2F0MyA6OiBybC5WZWN0b3IzCmZsb2F0NCA6OiBybC5WZWN0b3I0CmZsb2F0NF9vbmUgOjogcmwuVmVjdG9yNHsxLCAxLCAxLCAxfQpxdWF0ZXJuaW9uIDo6IHJsLlF1YXRlcm5pb24KZmxvYXQzX3VwIDo6IGZsb2F0M3swLCAxLCAwfQpmbG9hdDNfemVybyA6OiBmbG9hdDN7fQpmbG9hdDNfb25lIDo6IGZsb2F0M3sxLCAxLCAxfQpmbG9hdDNfb25lX3JsIDo6IHJsLlZlY3RvcjN7MSwgMSwgMX0KZmxvYXQzX2Z3ZCA6OiBmbG9hdDN7MCwgMCwgMX0KZmxvYXQzX3JpZ2h0IDo6IGZsb2F0M3sxLCAwLCAwfQpxdWF0ZXJuaW9uX2lkZW50aXR5IDo6IGxpbmFsZy5RVUFURVJOSU9ORjMyX0lERU5USVRZCmludCA6OiBpMzIKClNDUkVFTl9XSURUSDogaW50ClNDUkVFTl9IRUlHSFQ6IGludAoKd2lkdGhfd2luZG93ZWQ6IGludCA9IDE5MjAKaGVpZ2h0X3dpbmRvd2VkOiBpbnQgPSAxMDgwCndpZHRoX2Z1bGw6IGludCA9IDI1NjAKaGVpZ2h0X2Z1bGw6IGludCA9IDE0NDAKCkZVTExfU0NSRUVOOiBib29sID0gZmFsc2UKUFJJTlRfRU5USVRZX1NUUlVDVDogYm9vbCA9IGZhbHNlClBSSU5UX1BFUkZfTUVUUklDUzogYm9vbCA9IGZhbHNlCgpSQURfNDU6IGZsb2F0ClJBRF85MDogZmxvYXQKUkFEXzEzNTogZmxvYXQKUkFEXzE4MDogZmxvYXQKUkFEXzIyNTogZmxvYXQKUkFEXzI3MDogZmxvYXQKCk1BWF9FTlRJVElFUyA6OiAxMDAwMAoKdGltZV9ub3c6IGZsb2F0Cm5vd19mNjQ6IGY2NApkdDogZmxvYXQKdXBkYXRlX3Byb2NzOiBbZHluYW1pY11wcm9jKCkKbGF0ZV91cGRhdGVfcHJvY3M6IFtkeW5hbWljXXByb2MoKQpkcmF3X3Byb2NzOiBbZHluYW1pY11wcm9jKCkKCnJlbmRlcl90YXJnZXQ6IHJsLlJlbmRlclRleHR1cmUyRApibG9vbV9zaGFkZXI6IHJsLlNoYWRlcgpzdzogdGltZS5TdG9wd2F0Y2gKCgptYWluIDo6IHByb2MoKSAKewogIGNvbnRleHQubG9nZ2VyID0gbG9nLmNyZWF0ZV9jb25zb2xlX2xvZ2dlciguRGVidWcsIGxvZy5Mb2NhdGlvbl9IZWFkZXJfT3B0cykKCiAgU0NSRUVOX1dJRFRIID0gRlVMTF9TQ1JFRU4gPyB3aWR0aF9mdWxsIDogd2lkdGhfd2luZG93ZWQKICBTQ1JFRU5fSEVJR0hUID0gRlVMTF9TQ1JFRU4gPyBoZWlnaHRfZnVsbCA6IGhlaWdodF93aW5kb3dlZAogIGZsYWdzOiBybC5Db25maWdGbGFncyA9IEZVTExfU0NSRUVOID8gey5NU0FBXzRYX0hJTlQsIC5GVUxMU0NSRUVOX01PREV9IDogey5NU0FBXzRYX0hJTlR9CgogIFJBRF80NSA9IHJhZGlhbnMoZmxvYXQoNDUpKQogIFJBRF85MCA9IHJhZGlhbnMoZmxvYXQoOTApKQogIFJBRF8xMzUgPSByYWRpYW5zKGZsb2F0KDEzNSkpCiAgUkFEXzE4MCA9IHJhZGlhbnMoZmxvYXQoMTgwKSkKICBSQURfMjI1ID0gcmFkaWFucyhmbG9hdCgyMjUpKQogIFJBRF8yNzAgPSByYWRpYW5zKGZsb2F0KDI3MCkpCgogIHVwZGF0ZV9wcm9jcyA9IG1ha2UoW2R5bmFtaWNdcHJvYygpKQogIGxhdGVfdXBkYXRlX3Byb2NzID0gbWFrZShbZHluYW1pY11wcm9jKCkpCgogIG1hbmFnZXIgPSBpbml0X2VudGl0eV9tYW5hZ2VyKCkKICBkZWZlciBkZXN0cm95X2VudGl0eV9tYW5hZ2VyKCkKCiAgaWYgUFJJTlRfRU5USVRZX1NUUlVDVCB7CiAgICBsb2cuZGVidWcoIlxuIikKICAgIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09IikKICAgIGxvZy5kZWJ1ZygiRU5USVRZIFNUUlVDVCBJTkZPIikKICAgIGxvZy5kZWJ1ZygiXG4iKQogICAgdHlwZV9pbmZvcyA6PSByZWZsZWN0LnN0cnVjdF9maWVsZF90eXBlcyhFbnRpdHkpCiAgICB0eXBlX25hbWVzIDo9IHJlZmxlY3Quc3RydWN0X2ZpZWxkX25hbWVzKEVudGl0eSkKICAgIGZvciB0LCBpIGluIHR5cGVfaW5mb3MgewogICAgICBsb2cuZGVidWcoImZpZWxkOiAiLCB0eXBlX25hbWVzW2ldLCB0eXBlX2luZm9zW2ldLnNpemUpCiAgICB9CiAgICBsb2cuZGVidWcoImVudGl0eSBzaXplIHRvdGFsOiAiLCBzaXplX29mKEVudGl0eSkpCiAgfQoKCiAgcmwuU2V0VHJhY2VMb2dMZXZlbCguV0FSTklORykKICBybC5TZXRDb25maWdGbGFncyhmbGFncykKICBybC5Jbml0V2luZG93KFNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCwgIkVudGl0eSBTeXN0ZW0gVGVzdCIpCgogIGlmIEZVTExfU0NSRUVOIHsKICAgIHJsLlNldFdpbmRvd01vbml0b3IoMCkKICB9CgogIHJsLlNldFRhcmdldEZQUygxNDQpCgoKICAvLz09PT09PT09PT09PSBJTklUID09PT09PT09PT09PQoKICBibG9vbV9jdHg6IEJsb29tQ29udGV4dAogIGluaXRfYmxvb20oJmJsb29tX2N0eCwgU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUKQogIGRlZmVyIGNsZWFudXBfYmxvb20oJmJsb29tX2N0eCkKCiAgaW5pdF9saWdodGluZygpCiAgaW5pdF9pbnB1dF9oYW5kbGluZygpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfYWFiYnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2FhYmJzKQogIGluaXRfY2FtZXJhKCkKICBpbml0X3BsYXllcigpCiAgaW5pdF9wcm9qZWN0aWxlcygpCiAgaW5pdF9sZXZlbF9nZW4oKQogIGluaXRfZW5lbWllcygpCiAgaW5pdF9rbm9ja2JhY2soKQoKCiAgLy9sYXRlIHN0dWZmCiAgaW5pdF9ldmVudHN5c3RlbXMoKQoKICBmb3IgIXJsLldpbmRvd1Nob3VsZENsb3NlKCkgewogICAgdGltZS5zdG9wd2F0Y2hfcmVzZXQoJnN3KQogICAgdGltZS5zdG9wd2F0Y2hfc3RhcnQoJnN3KQoKICAgIHRpbWVfbm93ID0gZmxvYXQocmwuR2V0VGltZSgpKQogICAgZHQgPSBybC5HZXRGcmFtZVRpbWUoKQoKCiAgICAvL3RpY2sKICAgIGZvciAmcCBpbiB1cGRhdGVfcHJvY3MgewogICAgICBwKCkKICAgIH0KCiAgICAvL2xhdGUgdGljawogICAgZm9yICZwIGluIGxhdGVfdXBkYXRlX3Byb2NzIHsKICAgICAgcCgpCiAgICB9CgoKICAgIC8vUmVuZGVyCgogICAgLy8gUmVuZGVyIHNjZW5lIHRvIGJsb29tIGJ1ZmZlcgogICAgYmVnaW5fYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbk1vZGUzRChjYW1lcmEpCiAgICAvL3JsLkRyYXdHcmlkKDEwMCwgMSkKCiAgICBmb3IgJnAgaW4gZHJhd19wcm9jcyB7CiAgICAgIHAoKQogICAgfQoKCiAgICBybC5FbmRNb2RlM0QoKQoKICAgIGVuZF9ibG9vbV9zY2VuZSgmYmxvb21fY3R4KQogICAgcmwuQmVnaW5EcmF3aW5nKCkKICAgIHJsLkNsZWFyQmFja2dyb3VuZChybC5CTEFDSykKCiAgICByZW5kZXJfYmxvb20oJmJsb29tX2N0eCkKCgogICAgLy8gUEVSRiBNRVRSSUNTIERJU1BMQVkKICAgIGlmIChybC5Jc0tleVByZXNzZWQoLkYxKSkgewogICAgICBQUklOVF9QRVJGX01FVFJJQ1MgPSAhUFJJTlRfUEVSRl9NRVRSSUNTCiAgICB9CiAgICBpZiBQUklOVF9QRVJGX01FVFJJQ1MgewogICAgICBybC5EcmF3RlBTKDEwLCAxMCkKICAgICAgZHVyIDo9IHRpbWUuc3RvcHdhdGNoX2R1cmF0aW9uKHN3KQogICAgICBybC5EcmF3VGV4dChybC5UZXh0Rm9ybWF0KCJDUFUgJS4yZiIsIGR1ciAqIDEwMDApLCAxMCwgNDAsIDE4LCBybC5XSElURSkKICAgIH0KCiAgICBybC5FbmREcmF3aW5nKCkKCgogICAgLy9SRVNUIFRFTVAgQUxMT0MKICAgIGZyZWVfYWxsKGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgICB0aW1lLnN0b3B3YXRjaF9zdG9wKCZzdykKICB9CgogIGxvZy5kZWJ1ZygiXG4iKQogIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09PT0gU0hVVCBET1dOID09PT09PT09PT09PT09PT09PT09XG4iKQogIHJsLkNsb3NlV2luZG93KCkKfQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXQ4AAAAAAABdDgAAAAAAAAAAAAAAAPC/"
				],
				[
					649,
					3,
					"left_delete",
					null,
					"AwAAAGEOAAAAAAAAYQ4AAAAAAAAFAAAAIDEwMDBgDgAAAAAAAGAOAAAAAAAAAQAAACpfDgAAAAAAAF8OAAAAAAAAAQAAACA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYQ4AAAAAAABmDgAAAAAAAAAAAAAAAPC/"
				],
				[
					651,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:c\"\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport linalg \"core:math/linalg\"\r\nimport \"core:reflect\"\r\nimport \"core:time\"\r\nimport rl \"vendor:raylib\"\r\n\r\nmanager: EntityManager\r\n\r\n//ALIASES\r\nfloat :: f32\r\nfloat2 :: rl.Vector2\r\nfloat3 :: rl.Vector3\r\nfloat4 :: rl.Vector4\r\nfloat4_one :: rl.Vector4{1, 1, 1, 1}\r\nquaternion :: rl.Quaternion\r\nfloat3_up :: float3{0, 1, 0}\r\nfloat3_zero :: float3{}\r\nfloat3_one :: float3{1, 1, 1}\r\nfloat3_one_rl :: rl.Vector3{1, 1, 1}\r\nfloat3_fwd :: float3{0, 0, 1}\r\nfloat3_right :: float3{1, 0, 0}\r\nquaternion_identity :: linalg.QUATERNIONF32_IDENTITY\r\nint :: i32\r\n\r\nSCREEN_WIDTH: int\r\nSCREEN_HEIGHT: int\r\n\r\nwidth_windowed: int = 1920\r\nheight_windowed: int = 1080\r\nwidth_full: int = 2560\r\nheight_full: int = 1440\r\n\r\nFULL_SCREEN: bool = false\r\nPRINT_ENTITY_STRUCT: bool = false\r\nPRINT_PERF_METRICS: bool = false\r\n\r\nRAD_45: float\r\nRAD_90: float\r\nRAD_135: float\r\nRAD_180: float\r\nRAD_225: float\r\nRAD_270: float\r\n\r\nMAX_ENTITIES :: 10000\r\n\r\ntime_now: float\r\nnow_f64: f64\r\ndt: float\r\nupdate_procs: [dynamic]proc()\r\nlate_update_procs: [dynamic]proc()\r\ndraw_procs: [dynamic]proc()\r\n\r\nrender_target: rl.RenderTexture2D\r\nbloom_shader: rl.Shader\r\nsw: time.Stopwatch\r\n\r\n\r\nmain :: proc() \r\n{\r\n  context.logger = log.create_console_logger(.Debug, log.Location_Header_Opts)\r\n\r\n  SCREEN_WIDTH = FULL_SCREEN ? width_full : width_windowed\r\n  SCREEN_HEIGHT = FULL_SCREEN ? height_full : height_windowed\r\n  flags: rl.ConfigFlags = FULL_SCREEN ? {.MSAA_4X_HINT, .FULLSCREEN_MODE} : {.MSAA_4X_HINT}\r\n\r\n  RAD_45 = radians(float(45))\r\n  RAD_90 = radians(float(90))\r\n  RAD_135 = radians(float(135))\r\n  RAD_180 = radians(float(180))\r\n  RAD_225 = radians(float(225))\r\n  RAD_270 = radians(float(270))\r\n\r\n  update_procs = make([dynamic]proc())\r\n  late_update_procs = make([dynamic]proc())\r\n\r\n  manager = init_entity_manager()\r\n  defer destroy_entity_manager()\r\n\r\n  if PRINT_ENTITY_STRUCT {\r\n    log.debug(\"\\n\")\r\n    log.debug(\"==================\")\r\n    log.debug(\"ENTITY STRUCT INFO\")\r\n    log.debug(\"\\n\")\r\n    type_infos := reflect.struct_field_types(Entity)\r\n    type_names := reflect.struct_field_names(Entity)\r\n    for t, i in type_infos {\r\n      log.debug(\"field: \", type_names[i], type_infos[i].size)\r\n    }\r\n    log.debug(\"entity size total: \", size_of(Entity))\r\n  }\r\n\r\n\r\n  rl.SetTraceLogLevel(.WARNING)\r\n  rl.SetConfigFlags(flags)\r\n  rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Entity System Test\")\r\n\r\n  if FULL_SCREEN {\r\n    rl.SetWindowMonitor(0)\r\n  }\r\n\r\n  rl.SetTargetFPS(144)\r\n\r\n\r\n  //============ INIT ============\r\n\r\n  bloom_ctx: BloomContext\r\n  init_bloom(&bloom_ctx, SCREEN_WIDTH, SCREEN_HEIGHT)\r\n  defer cleanup_bloom(&bloom_ctx)\r\n\r\n  init_lighting()\r\n  init_input_handling()\r\n\r\n  append(&update_procs, update_aabbs)\r\n  append(&draw_procs, draw_aabbs)\r\n  init_camera()\r\n  init_player()\r\n  init_projectiles()\r\n  init_level_gen()\r\n  init_enemies()\r\n  init_knockback()\r\n\r\n\r\n  //late stuff\r\n  init_eventsystems()\r\n\r\n  for !rl.WindowShouldClose() {\r\n    time.stopwatch_reset(&sw)\r\n    time.stopwatch_start(&sw)\r\n\r\n    time_now = float(rl.GetTime())\r\n    dt = rl.GetFrameTime()\r\n\r\n\r\n    //tick\r\n    for &p in update_procs {\r\n      p()\r\n    }\r\n\r\n    //late tick\r\n    for &p in late_update_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    //Render\r\n\r\n    // Render scene to bloom buffer\r\n    begin_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginMode3D(camera)\r\n    //rl.DrawGrid(100, 1)\r\n\r\n    for &p in draw_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    rl.EndMode3D()\r\n\r\n    end_bloom_scene(&bloom_ctx)\r\n    rl.BeginDrawing()\r\n    rl.ClearBackground(rl.BLACK)\r\n\r\n    render_bloom(&bloom_ctx)\r\n\r\n\r\n    // PERF METRICS DISPLAY\r\n    if (rl.IsKeyPressed(.F1)) {\r\n      PRINT_PERF_METRICS = !PRINT_PERF_METRICS\r\n    }\r\n    if PRINT_PERF_METRICS {\r\n      rl.DrawFPS(10, 10)\r\n      dur := time.stopwatch_duration(sw)\r\n      rl.DrawText(rl.TextFormat(\"CPU %.2f\", dur), 10, 40, 18, rl.WHITE)\r\n    }\r\n\r\n    rl.EndDrawing()\r\n\r\n\r\n    //REST TEMP ALLOC\r\n    free_all(context.temp_allocator)\r\n    time.stopwatch_stop(&sw)\r\n  }\r\n\r\n  log.debug(\"\\n\")\r\n  log.debug(\"==================== SHUT DOWN ====================\\n\")\r\n  rl.CloseWindow()\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 192
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAXg8AAAAAAABeDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6YyIKaW1wb3J0ICJjb3JlOmZtdCIKaW1wb3J0ICJjb3JlOmxvZyIKaW1wb3J0IGxpbmFsZyAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOnJlZmxlY3QiCmltcG9ydCAiY29yZTp0aW1lIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgptYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyCgovL0FMSUFTRVMKZmxvYXQgOjogZjMyCmZsb2F0MiA6OiBybC5WZWN0b3IyCmZsb2F0MyA6OiBybC5WZWN0b3IzCmZsb2F0NCA6OiBybC5WZWN0b3I0CmZsb2F0NF9vbmUgOjogcmwuVmVjdG9yNHsxLCAxLCAxLCAxfQpxdWF0ZXJuaW9uIDo6IHJsLlF1YXRlcm5pb24KZmxvYXQzX3VwIDo6IGZsb2F0M3swLCAxLCAwfQpmbG9hdDNfemVybyA6OiBmbG9hdDN7fQpmbG9hdDNfb25lIDo6IGZsb2F0M3sxLCAxLCAxfQpmbG9hdDNfb25lX3JsIDo6IHJsLlZlY3RvcjN7MSwgMSwgMX0KZmxvYXQzX2Z3ZCA6OiBmbG9hdDN7MCwgMCwgMX0KZmxvYXQzX3JpZ2h0IDo6IGZsb2F0M3sxLCAwLCAwfQpxdWF0ZXJuaW9uX2lkZW50aXR5IDo6IGxpbmFsZy5RVUFURVJOSU9ORjMyX0lERU5USVRZCmludCA6OiBpMzIKClNDUkVFTl9XSURUSDogaW50ClNDUkVFTl9IRUlHSFQ6IGludAoKd2lkdGhfd2luZG93ZWQ6IGludCA9IDE5MjAKaGVpZ2h0X3dpbmRvd2VkOiBpbnQgPSAxMDgwCndpZHRoX2Z1bGw6IGludCA9IDI1NjAKaGVpZ2h0X2Z1bGw6IGludCA9IDE0NDAKCkZVTExfU0NSRUVOOiBib29sID0gZmFsc2UKUFJJTlRfRU5USVRZX1NUUlVDVDogYm9vbCA9IGZhbHNlClBSSU5UX1BFUkZfTUVUUklDUzogYm9vbCA9IGZhbHNlCgpSQURfNDU6IGZsb2F0ClJBRF85MDogZmxvYXQKUkFEXzEzNTogZmxvYXQKUkFEXzE4MDogZmxvYXQKUkFEXzIyNTogZmxvYXQKUkFEXzI3MDogZmxvYXQKCk1BWF9FTlRJVElFUyA6OiAxMDAwMAoKdGltZV9ub3c6IGZsb2F0Cm5vd19mNjQ6IGY2NApkdDogZmxvYXQKdXBkYXRlX3Byb2NzOiBbZHluYW1pY11wcm9jKCkKbGF0ZV91cGRhdGVfcHJvY3M6IFtkeW5hbWljXXByb2MoKQpkcmF3X3Byb2NzOiBbZHluYW1pY11wcm9jKCkKCnJlbmRlcl90YXJnZXQ6IHJsLlJlbmRlclRleHR1cmUyRApibG9vbV9zaGFkZXI6IHJsLlNoYWRlcgpzdzogdGltZS5TdG9wd2F0Y2gKCgptYWluIDo6IHByb2MoKSAKewogIGNvbnRleHQubG9nZ2VyID0gbG9nLmNyZWF0ZV9jb25zb2xlX2xvZ2dlciguRGVidWcsIGxvZy5Mb2NhdGlvbl9IZWFkZXJfT3B0cykKCiAgU0NSRUVOX1dJRFRIID0gRlVMTF9TQ1JFRU4gPyB3aWR0aF9mdWxsIDogd2lkdGhfd2luZG93ZWQKICBTQ1JFRU5fSEVJR0hUID0gRlVMTF9TQ1JFRU4gPyBoZWlnaHRfZnVsbCA6IGhlaWdodF93aW5kb3dlZAogIGZsYWdzOiBybC5Db25maWdGbGFncyA9IEZVTExfU0NSRUVOID8gey5NU0FBXzRYX0hJTlQsIC5GVUxMU0NSRUVOX01PREV9IDogey5NU0FBXzRYX0hJTlR9CgogIFJBRF80NSA9IHJhZGlhbnMoZmxvYXQoNDUpKQogIFJBRF85MCA9IHJhZGlhbnMoZmxvYXQoOTApKQogIFJBRF8xMzUgPSByYWRpYW5zKGZsb2F0KDEzNSkpCiAgUkFEXzE4MCA9IHJhZGlhbnMoZmxvYXQoMTgwKSkKICBSQURfMjI1ID0gcmFkaWFucyhmbG9hdCgyMjUpKQogIFJBRF8yNzAgPSByYWRpYW5zKGZsb2F0KDI3MCkpCgogIHVwZGF0ZV9wcm9jcyA9IG1ha2UoW2R5bmFtaWNdcHJvYygpKQogIGxhdGVfdXBkYXRlX3Byb2NzID0gbWFrZShbZHluYW1pY11wcm9jKCkpCgogIG1hbmFnZXIgPSBpbml0X2VudGl0eV9tYW5hZ2VyKCkKICBkZWZlciBkZXN0cm95X2VudGl0eV9tYW5hZ2VyKCkKCiAgaWYgUFJJTlRfRU5USVRZX1NUUlVDVCB7CiAgICBsb2cuZGVidWcoIlxuIikKICAgIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09IikKICAgIGxvZy5kZWJ1ZygiRU5USVRZIFNUUlVDVCBJTkZPIikKICAgIGxvZy5kZWJ1ZygiXG4iKQogICAgdHlwZV9pbmZvcyA6PSByZWZsZWN0LnN0cnVjdF9maWVsZF90eXBlcyhFbnRpdHkpCiAgICB0eXBlX25hbWVzIDo9IHJlZmxlY3Quc3RydWN0X2ZpZWxkX25hbWVzKEVudGl0eSkKICAgIGZvciB0LCBpIGluIHR5cGVfaW5mb3MgewogICAgICBsb2cuZGVidWcoImZpZWxkOiAiLCB0eXBlX25hbWVzW2ldLCB0eXBlX2luZm9zW2ldLnNpemUpCiAgICB9CiAgICBsb2cuZGVidWcoImVudGl0eSBzaXplIHRvdGFsOiAiLCBzaXplX29mKEVudGl0eSkpCiAgfQoKCiAgcmwuU2V0VHJhY2VMb2dMZXZlbCguV0FSTklORykKICBybC5TZXRDb25maWdGbGFncyhmbGFncykKICBybC5Jbml0V2luZG93KFNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCwgIkVudGl0eSBTeXN0ZW0gVGVzdCIpCgogIGlmIEZVTExfU0NSRUVOIHsKICAgIHJsLlNldFdpbmRvd01vbml0b3IoMCkKICB9CgogIHJsLlNldFRhcmdldEZQUygxNDQpCgoKICAvLz09PT09PT09PT09PSBJTklUID09PT09PT09PT09PQoKICBibG9vbV9jdHg6IEJsb29tQ29udGV4dAogIGluaXRfYmxvb20oJmJsb29tX2N0eCwgU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUKQogIGRlZmVyIGNsZWFudXBfYmxvb20oJmJsb29tX2N0eCkKCiAgaW5pdF9saWdodGluZygpCiAgaW5pdF9pbnB1dF9oYW5kbGluZygpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfYWFiYnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2FhYmJzKQogIGluaXRfY2FtZXJhKCkKICBpbml0X3BsYXllcigpCiAgaW5pdF9wcm9qZWN0aWxlcygpCiAgaW5pdF9sZXZlbF9nZW4oKQogIGluaXRfZW5lbWllcygpCiAgaW5pdF9rbm9ja2JhY2soKQoKCiAgLy9sYXRlIHN0dWZmCiAgaW5pdF9ldmVudHN5c3RlbXMoKQoKICBmb3IgIXJsLldpbmRvd1Nob3VsZENsb3NlKCkgewogICAgdGltZS5zdG9wd2F0Y2hfcmVzZXQoJnN3KQogICAgdGltZS5zdG9wd2F0Y2hfc3RhcnQoJnN3KQoKICAgIHRpbWVfbm93ID0gZmxvYXQocmwuR2V0VGltZSgpKQogICAgZHQgPSBybC5HZXRGcmFtZVRpbWUoKQoKCiAgICAvL3RpY2sKICAgIGZvciAmcCBpbiB1cGRhdGVfcHJvY3MgewogICAgICBwKCkKICAgIH0KCiAgICAvL2xhdGUgdGljawogICAgZm9yICZwIGluIGxhdGVfdXBkYXRlX3Byb2NzIHsKICAgICAgcCgpCiAgICB9CgoKICAgIC8vUmVuZGVyCgogICAgLy8gUmVuZGVyIHNjZW5lIHRvIGJsb29tIGJ1ZmZlcgogICAgYmVnaW5fYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbk1vZGUzRChjYW1lcmEpCiAgICAvL3JsLkRyYXdHcmlkKDEwMCwgMSkKCiAgICBmb3IgJnAgaW4gZHJhd19wcm9jcyB7CiAgICAgIHAoKQogICAgfQoKCiAgICBybC5FbmRNb2RlM0QoKQoKICAgIGVuZF9ibG9vbV9zY2VuZSgmYmxvb21fY3R4KQogICAgcmwuQmVnaW5EcmF3aW5nKCkKICAgIHJsLkNsZWFyQmFja2dyb3VuZChybC5CTEFDSykKCiAgICByZW5kZXJfYmxvb20oJmJsb29tX2N0eCkKCgogICAgLy8gUEVSRiBNRVRSSUNTIERJU1BMQVkKICAgIGlmIChybC5Jc0tleVByZXNzZWQoLkYxKSkgewogICAgICBQUklOVF9QRVJGX01FVFJJQ1MgPSAhUFJJTlRfUEVSRl9NRVRSSUNTCiAgICB9CiAgICBpZiBQUklOVF9QRVJGX01FVFJJQ1MgewogICAgICBybC5EcmF3RlBTKDEwLCAxMCkKICAgICAgZHVyIDo9IHRpbWUuc3RvcHdhdGNoX2R1cmF0aW9uKHN3KQogICAgICBybC5EcmF3VGV4dChybC5UZXh0Rm9ybWF0KCJDUFUgJS4yZiIsIGR1ciksIDEwLCA0MCwgMTgsIHJsLldISVRFKQogICAgfQoKICAgIHJsLkVuZERyYXdpbmcoKQoKCiAgICAvL1JFU1QgVEVNUCBBTExPQwogICAgZnJlZV9hbGwoY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICAgIHRpbWUuc3RvcHdhdGNoX3N0b3AoJnN3KQogIH0KCiAgbG9nLmRlYnVnKCJcbiIpCiAgbG9nLmRlYnVnKCI9PT09PT09PT09PT09PT09PT09PSBTSFVUIERPV04gPT09PT09PT09PT09PT09PT09PT1cbiIpCiAgcmwuQ2xvc2VXaW5kb3coKQp9Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXw4AAAAAAABfDgAAAAAAAAAAAAAAAPC/"
				],
				[
					658,
					1,
					"insert",
					{
						"characters": ".d"
					},
					"AgAAAC8OAAAAAAAAMA4AAAAAAAAAAAAAMA4AAAAAAAAxDgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALw4AAAAAAAAvDgAAAAAAAAAAAAAAAPC/"
				],
				[
					659,
					2,
					"left_delete",
					null,
					"AgAAADAOAAAAAAAAMA4AAAAAAAABAAAAZC8OAAAAAAAALw4AAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMQ4AAAAAAAAxDgAAAAAAAAAAAAAAAPC/"
				],
				[
					661,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:c\"\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport linalg \"core:math/linalg\"\r\nimport \"core:reflect\"\r\nimport \"core:time\"\r\nimport rl \"vendor:raylib\"\r\n\r\nmanager: EntityManager\r\n\r\n//ALIASES\r\nfloat :: f32\r\nfloat2 :: rl.Vector2\r\nfloat3 :: rl.Vector3\r\nfloat4 :: rl.Vector4\r\nfloat4_one :: rl.Vector4{1, 1, 1, 1}\r\nquaternion :: rl.Quaternion\r\nfloat3_up :: float3{0, 1, 0}\r\nfloat3_zero :: float3{}\r\nfloat3_one :: float3{1, 1, 1}\r\nfloat3_one_rl :: rl.Vector3{1, 1, 1}\r\nfloat3_fwd :: float3{0, 0, 1}\r\nfloat3_right :: float3{1, 0, 0}\r\nquaternion_identity :: linalg.QUATERNIONF32_IDENTITY\r\nint :: i32\r\n\r\nSCREEN_WIDTH: int\r\nSCREEN_HEIGHT: int\r\n\r\nwidth_windowed: int = 1920\r\nheight_windowed: int = 1080\r\nwidth_full: int = 2560\r\nheight_full: int = 1440\r\n\r\nFULL_SCREEN: bool = false\r\nPRINT_ENTITY_STRUCT: bool = false\r\nPRINT_PERF_METRICS: bool = false\r\n\r\nRAD_45: float\r\nRAD_90: float\r\nRAD_135: float\r\nRAD_180: float\r\nRAD_225: float\r\nRAD_270: float\r\n\r\nMAX_ENTITIES :: 10000\r\n\r\ntime_now: float\r\nnow_f64: f64\r\ndt: float\r\nupdate_procs: [dynamic]proc()\r\nlate_update_procs: [dynamic]proc()\r\ndraw_procs: [dynamic]proc()\r\n\r\nrender_target: rl.RenderTexture2D\r\nbloom_shader: rl.Shader\r\nsw: time.Stopwatch\r\n\r\n\r\nmain :: proc() \r\n{\r\n  context.logger = log.create_console_logger(.Debug, log.Location_Header_Opts)\r\n\r\n  SCREEN_WIDTH = FULL_SCREEN ? width_full : width_windowed\r\n  SCREEN_HEIGHT = FULL_SCREEN ? height_full : height_windowed\r\n  flags: rl.ConfigFlags = FULL_SCREEN ? {.MSAA_4X_HINT, .FULLSCREEN_MODE} : {.MSAA_4X_HINT}\r\n\r\n  RAD_45 = radians(float(45))\r\n  RAD_90 = radians(float(90))\r\n  RAD_135 = radians(float(135))\r\n  RAD_180 = radians(float(180))\r\n  RAD_225 = radians(float(225))\r\n  RAD_270 = radians(float(270))\r\n\r\n  update_procs = make([dynamic]proc())\r\n  late_update_procs = make([dynamic]proc())\r\n\r\n  manager = init_entity_manager()\r\n  defer destroy_entity_manager()\r\n\r\n  if PRINT_ENTITY_STRUCT {\r\n    log.debug(\"\\n\")\r\n    log.debug(\"==================\")\r\n    log.debug(\"ENTITY STRUCT INFO\")\r\n    log.debug(\"\\n\")\r\n    type_infos := reflect.struct_field_types(Entity)\r\n    type_names := reflect.struct_field_names(Entity)\r\n    for t, i in type_infos {\r\n      log.debug(\"field: \", type_names[i], type_infos[i].size)\r\n    }\r\n    log.debug(\"entity size total: \", size_of(Entity))\r\n  }\r\n\r\n\r\n  rl.SetTraceLogLevel(.WARNING)\r\n  rl.SetConfigFlags(flags)\r\n  rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Entity System Test\")\r\n\r\n  if FULL_SCREEN {\r\n    rl.SetWindowMonitor(0)\r\n  }\r\n\r\n  rl.SetTargetFPS(144)\r\n\r\n\r\n  //============ INIT ============\r\n\r\n  bloom_ctx: BloomContext\r\n  init_bloom(&bloom_ctx, SCREEN_WIDTH, SCREEN_HEIGHT)\r\n  defer cleanup_bloom(&bloom_ctx)\r\n\r\n  init_lighting()\r\n  init_input_handling()\r\n\r\n  append(&update_procs, update_aabbs)\r\n  append(&draw_procs, draw_aabbs)\r\n  init_camera()\r\n  init_player()\r\n  init_projectiles()\r\n  init_level_gen()\r\n  init_enemies()\r\n  init_knockback()\r\n\r\n\r\n  //late stuff\r\n  init_eventsystems()\r\n\r\n  for !rl.WindowShouldClose() {\r\n    time.stopwatch_reset(&sw)\r\n    time.stopwatch_start(&sw)\r\n\r\n    time_now = float(rl.GetTime())\r\n    dt = rl.GetFrameTime()\r\n\r\n\r\n    //tick\r\n    for &p in update_procs {\r\n      p()\r\n    }\r\n\r\n    //late tick\r\n    for &p in late_update_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    //Render\r\n\r\n    // Render scene to bloom buffer\r\n    begin_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginMode3D(camera)\r\n    //rl.DrawGrid(100, 1)\r\n\r\n    for &p in draw_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    rl.EndMode3D()\r\n\r\n    end_bloom_scene(&bloom_ctx)\r\n    rl.BeginDrawing()\r\n    rl.ClearBackground(rl.BLACK)\r\n\r\n    render_bloom(&bloom_ctx)\r\n\r\n\r\n    // PERF METRICS DISPLAY\r\n    if (rl.IsKeyPressed(.F1)) {\r\n      PRINT_PERF_METRICS = !PRINT_PERF_METRICS\r\n    }\r\n    if PRINT_PERF_METRICS {\r\n      rl.DrawFPS(10, 10)\r\n      dur := time.stopwatch_duration(sw)\r\n      rl.DrawText(rl.TextFormat(\"CPU %.2f\", dur), 10, 40, 18, rl.WHITE)\r\n    }\r\n\r\n    rl.EndDrawing()\r\n\r\n\r\n    //REST TEMP ALLOC\r\n    free_all(context.temp_allocator)\r\n    time.stopwatch_stop(&sw)\r\n  }\r\n\r\n  log.debug(\"\\n\")\r\n  log.debug(\"==================== SHUT DOWN ====================\\n\")\r\n  rl.CloseWindow()\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 192
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAXg8AAAAAAABeDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6YyIKaW1wb3J0ICJjb3JlOmZtdCIKaW1wb3J0ICJjb3JlOmxvZyIKaW1wb3J0IGxpbmFsZyAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOnJlZmxlY3QiCmltcG9ydCAiY29yZTp0aW1lIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgptYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyCgovL0FMSUFTRVMKZmxvYXQgOjogZjMyCmZsb2F0MiA6OiBybC5WZWN0b3IyCmZsb2F0MyA6OiBybC5WZWN0b3IzCmZsb2F0NCA6OiBybC5WZWN0b3I0CmZsb2F0NF9vbmUgOjogcmwuVmVjdG9yNHsxLCAxLCAxLCAxfQpxdWF0ZXJuaW9uIDo6IHJsLlF1YXRlcm5pb24KZmxvYXQzX3VwIDo6IGZsb2F0M3swLCAxLCAwfQpmbG9hdDNfemVybyA6OiBmbG9hdDN7fQpmbG9hdDNfb25lIDo6IGZsb2F0M3sxLCAxLCAxfQpmbG9hdDNfb25lX3JsIDo6IHJsLlZlY3RvcjN7MSwgMSwgMX0KZmxvYXQzX2Z3ZCA6OiBmbG9hdDN7MCwgMCwgMX0KZmxvYXQzX3JpZ2h0IDo6IGZsb2F0M3sxLCAwLCAwfQpxdWF0ZXJuaW9uX2lkZW50aXR5IDo6IGxpbmFsZy5RVUFURVJOSU9ORjMyX0lERU5USVRZCmludCA6OiBpMzIKClNDUkVFTl9XSURUSDogaW50ClNDUkVFTl9IRUlHSFQ6IGludAoKd2lkdGhfd2luZG93ZWQ6IGludCA9IDE5MjAKaGVpZ2h0X3dpbmRvd2VkOiBpbnQgPSAxMDgwCndpZHRoX2Z1bGw6IGludCA9IDI1NjAKaGVpZ2h0X2Z1bGw6IGludCA9IDE0NDAKCkZVTExfU0NSRUVOOiBib29sID0gZmFsc2UKUFJJTlRfRU5USVRZX1NUUlVDVDogYm9vbCA9IGZhbHNlClBSSU5UX1BFUkZfTUVUUklDUzogYm9vbCA9IGZhbHNlCgpSQURfNDU6IGZsb2F0ClJBRF85MDogZmxvYXQKUkFEXzEzNTogZmxvYXQKUkFEXzE4MDogZmxvYXQKUkFEXzIyNTogZmxvYXQKUkFEXzI3MDogZmxvYXQKCk1BWF9FTlRJVElFUyA6OiAxMDAwMAoKdGltZV9ub3c6IGZsb2F0Cm5vd19mNjQ6IGY2NApkdDogZmxvYXQKdXBkYXRlX3Byb2NzOiBbZHluYW1pY11wcm9jKCkKbGF0ZV91cGRhdGVfcHJvY3M6IFtkeW5hbWljXXByb2MoKQpkcmF3X3Byb2NzOiBbZHluYW1pY11wcm9jKCkKCnJlbmRlcl90YXJnZXQ6IHJsLlJlbmRlclRleHR1cmUyRApibG9vbV9zaGFkZXI6IHJsLlNoYWRlcgpzdzogdGltZS5TdG9wd2F0Y2gKCgptYWluIDo6IHByb2MoKSAKewogIGNvbnRleHQubG9nZ2VyID0gbG9nLmNyZWF0ZV9jb25zb2xlX2xvZ2dlciguRGVidWcsIGxvZy5Mb2NhdGlvbl9IZWFkZXJfT3B0cykKCiAgU0NSRUVOX1dJRFRIID0gRlVMTF9TQ1JFRU4gPyB3aWR0aF9mdWxsIDogd2lkdGhfd2luZG93ZWQKICBTQ1JFRU5fSEVJR0hUID0gRlVMTF9TQ1JFRU4gPyBoZWlnaHRfZnVsbCA6IGhlaWdodF93aW5kb3dlZAogIGZsYWdzOiBybC5Db25maWdGbGFncyA9IEZVTExfU0NSRUVOID8gey5NU0FBXzRYX0hJTlQsIC5GVUxMU0NSRUVOX01PREV9IDogey5NU0FBXzRYX0hJTlR9CgogIFJBRF80NSA9IHJhZGlhbnMoZmxvYXQoNDUpKQogIFJBRF85MCA9IHJhZGlhbnMoZmxvYXQoOTApKQogIFJBRF8xMzUgPSByYWRpYW5zKGZsb2F0KDEzNSkpCiAgUkFEXzE4MCA9IHJhZGlhbnMoZmxvYXQoMTgwKSkKICBSQURfMjI1ID0gcmFkaWFucyhmbG9hdCgyMjUpKQogIFJBRF8yNzAgPSByYWRpYW5zKGZsb2F0KDI3MCkpCgogIHVwZGF0ZV9wcm9jcyA9IG1ha2UoW2R5bmFtaWNdcHJvYygpKQogIGxhdGVfdXBkYXRlX3Byb2NzID0gbWFrZShbZHluYW1pY11wcm9jKCkpCgogIG1hbmFnZXIgPSBpbml0X2VudGl0eV9tYW5hZ2VyKCkKICBkZWZlciBkZXN0cm95X2VudGl0eV9tYW5hZ2VyKCkKCiAgaWYgUFJJTlRfRU5USVRZX1NUUlVDVCB7CiAgICBsb2cuZGVidWcoIlxuIikKICAgIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09IikKICAgIGxvZy5kZWJ1ZygiRU5USVRZIFNUUlVDVCBJTkZPIikKICAgIGxvZy5kZWJ1ZygiXG4iKQogICAgdHlwZV9pbmZvcyA6PSByZWZsZWN0LnN0cnVjdF9maWVsZF90eXBlcyhFbnRpdHkpCiAgICB0eXBlX25hbWVzIDo9IHJlZmxlY3Quc3RydWN0X2ZpZWxkX25hbWVzKEVudGl0eSkKICAgIGZvciB0LCBpIGluIHR5cGVfaW5mb3MgewogICAgICBsb2cuZGVidWcoImZpZWxkOiAiLCB0eXBlX25hbWVzW2ldLCB0eXBlX2luZm9zW2ldLnNpemUpCiAgICB9CiAgICBsb2cuZGVidWcoImVudGl0eSBzaXplIHRvdGFsOiAiLCBzaXplX29mKEVudGl0eSkpCiAgfQoKCiAgcmwuU2V0VHJhY2VMb2dMZXZlbCguV0FSTklORykKICBybC5TZXRDb25maWdGbGFncyhmbGFncykKICBybC5Jbml0V2luZG93KFNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCwgIkVudGl0eSBTeXN0ZW0gVGVzdCIpCgogIGlmIEZVTExfU0NSRUVOIHsKICAgIHJsLlNldFdpbmRvd01vbml0b3IoMCkKICB9CgogIHJsLlNldFRhcmdldEZQUygxNDQpCgoKICAvLz09PT09PT09PT09PSBJTklUID09PT09PT09PT09PQoKICBibG9vbV9jdHg6IEJsb29tQ29udGV4dAogIGluaXRfYmxvb20oJmJsb29tX2N0eCwgU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUKQogIGRlZmVyIGNsZWFudXBfYmxvb20oJmJsb29tX2N0eCkKCiAgaW5pdF9saWdodGluZygpCiAgaW5pdF9pbnB1dF9oYW5kbGluZygpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfYWFiYnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2FhYmJzKQogIGluaXRfY2FtZXJhKCkKICBpbml0X3BsYXllcigpCiAgaW5pdF9wcm9qZWN0aWxlcygpCiAgaW5pdF9sZXZlbF9nZW4oKQogIGluaXRfZW5lbWllcygpCiAgaW5pdF9rbm9ja2JhY2soKQoKCiAgLy9sYXRlIHN0dWZmCiAgaW5pdF9ldmVudHN5c3RlbXMoKQoKICBmb3IgIXJsLldpbmRvd1Nob3VsZENsb3NlKCkgewogICAgdGltZS5zdG9wd2F0Y2hfcmVzZXQoJnN3KQogICAgdGltZS5zdG9wd2F0Y2hfc3RhcnQoJnN3KQoKICAgIHRpbWVfbm93ID0gZmxvYXQocmwuR2V0VGltZSgpKQogICAgZHQgPSBybC5HZXRGcmFtZVRpbWUoKQoKCiAgICAvL3RpY2sKICAgIGZvciAmcCBpbiB1cGRhdGVfcHJvY3MgewogICAgICBwKCkKICAgIH0KCiAgICAvL2xhdGUgdGljawogICAgZm9yICZwIGluIGxhdGVfdXBkYXRlX3Byb2NzIHsKICAgICAgcCgpCiAgICB9CgoKICAgIC8vUmVuZGVyCgogICAgLy8gUmVuZGVyIHNjZW5lIHRvIGJsb29tIGJ1ZmZlcgogICAgYmVnaW5fYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbk1vZGUzRChjYW1lcmEpCiAgICAvL3JsLkRyYXdHcmlkKDEwMCwgMSkKCiAgICBmb3IgJnAgaW4gZHJhd19wcm9jcyB7CiAgICAgIHAoKQogICAgfQoKCiAgICBybC5FbmRNb2RlM0QoKQoKICAgIGVuZF9ibG9vbV9zY2VuZSgmYmxvb21fY3R4KQogICAgcmwuQmVnaW5EcmF3aW5nKCkKICAgIHJsLkNsZWFyQmFja2dyb3VuZChybC5CTEFDSykKCiAgICByZW5kZXJfYmxvb20oJmJsb29tX2N0eCkKCgogICAgLy8gUEVSRiBNRVRSSUNTIERJU1BMQVkKICAgIGlmIChybC5Jc0tleVByZXNzZWQoLkYxKSkgewogICAgICBQUklOVF9QRVJGX01FVFJJQ1MgPSAhUFJJTlRfUEVSRl9NRVRSSUNTCiAgICB9CiAgICBpZiBQUklOVF9QRVJGX01FVFJJQ1MgewogICAgICBybC5EcmF3RlBTKDEwLCAxMCkKICAgICAgZHVyIDo9IHRpbWUuc3RvcHdhdGNoX2R1cmF0aW9uKHN3KQogICAgICBybC5EcmF3VGV4dChybC5UZXh0Rm9ybWF0KCJDUFUgJS4yZiIsIGR1ciksIDEwLCA0MCwgMTgsIHJsLldISVRFKQogICAgfQoKICAgIHJsLkVuZERyYXdpbmcoKQoKCiAgICAvL1JFU1QgVEVNUCBBTExPQwogICAgZnJlZV9hbGwoY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICAgIHRpbWUuc3RvcHdhdGNoX3N0b3AoJnN3KQogIH0KCiAgbG9nLmRlYnVnKCJcbiIpCiAgbG9nLmRlYnVnKCI9PT09PT09PT09PT09PT09PT09PSBTSFVUIERPV04gPT09PT09PT09PT09PT09PT09PT1cbiIpCiAgcmwuQ2xvc2VXaW5kb3coKQp9Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALw4AAAAAAAAvDgAAAAAAAAAAAAAAAPC/"
				],
				[
					663,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:c\"\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport linalg \"core:math/linalg\"\r\nimport \"core:reflect\"\r\nimport \"core:time\"\r\nimport rl \"vendor:raylib\"\r\n\r\nmanager: EntityManager\r\n\r\n//ALIASES\r\nfloat :: f32\r\nfloat2 :: rl.Vector2\r\nfloat3 :: rl.Vector3\r\nfloat4 :: rl.Vector4\r\nfloat4_one :: rl.Vector4{1, 1, 1, 1}\r\nquaternion :: rl.Quaternion\r\nfloat3_up :: float3{0, 1, 0}\r\nfloat3_zero :: float3{}\r\nfloat3_one :: float3{1, 1, 1}\r\nfloat3_one_rl :: rl.Vector3{1, 1, 1}\r\nfloat3_fwd :: float3{0, 0, 1}\r\nfloat3_right :: float3{1, 0, 0}\r\nquaternion_identity :: linalg.QUATERNIONF32_IDENTITY\r\nint :: i32\r\n\r\nSCREEN_WIDTH: int\r\nSCREEN_HEIGHT: int\r\n\r\nwidth_windowed: int = 1920\r\nheight_windowed: int = 1080\r\nwidth_full: int = 2560\r\nheight_full: int = 1440\r\n\r\nFULL_SCREEN: bool = false\r\nPRINT_ENTITY_STRUCT: bool = false\r\nPRINT_PERF_METRICS: bool = false\r\n\r\nRAD_45: float\r\nRAD_90: float\r\nRAD_135: float\r\nRAD_180: float\r\nRAD_225: float\r\nRAD_270: float\r\n\r\nMAX_ENTITIES :: 10000\r\n\r\ntime_now: float\r\nnow_f64: f64\r\ndt: float\r\nupdate_procs: [dynamic]proc()\r\nlate_update_procs: [dynamic]proc()\r\ndraw_procs: [dynamic]proc()\r\n\r\nrender_target: rl.RenderTexture2D\r\nbloom_shader: rl.Shader\r\nsw: time.Stopwatch\r\n\r\n\r\nmain :: proc() \r\n{\r\n  context.logger = log.create_console_logger(.Debug, log.Location_Header_Opts)\r\n\r\n  SCREEN_WIDTH = FULL_SCREEN ? width_full : width_windowed\r\n  SCREEN_HEIGHT = FULL_SCREEN ? height_full : height_windowed\r\n  flags: rl.ConfigFlags = FULL_SCREEN ? {.MSAA_4X_HINT, .FULLSCREEN_MODE} : {.MSAA_4X_HINT}\r\n\r\n  RAD_45 = radians(float(45))\r\n  RAD_90 = radians(float(90))\r\n  RAD_135 = radians(float(135))\r\n  RAD_180 = radians(float(180))\r\n  RAD_225 = radians(float(225))\r\n  RAD_270 = radians(float(270))\r\n\r\n  update_procs = make([dynamic]proc())\r\n  late_update_procs = make([dynamic]proc())\r\n\r\n  manager = init_entity_manager()\r\n  defer destroy_entity_manager()\r\n\r\n  if PRINT_ENTITY_STRUCT {\r\n    log.debug(\"\\n\")\r\n    log.debug(\"==================\")\r\n    log.debug(\"ENTITY STRUCT INFO\")\r\n    log.debug(\"\\n\")\r\n    type_infos := reflect.struct_field_types(Entity)\r\n    type_names := reflect.struct_field_names(Entity)\r\n    for t, i in type_infos {\r\n      log.debug(\"field: \", type_names[i], type_infos[i].size)\r\n    }\r\n    log.debug(\"entity size total: \", size_of(Entity))\r\n  }\r\n\r\n\r\n  rl.SetTraceLogLevel(.WARNING)\r\n  rl.SetConfigFlags(flags)\r\n  rl.InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Entity System Test\")\r\n\r\n  if FULL_SCREEN {\r\n    rl.SetWindowMonitor(0)\r\n  }\r\n\r\n  rl.SetTargetFPS(144)\r\n\r\n\r\n  //============ INIT ============\r\n\r\n  bloom_ctx: BloomContext\r\n  init_bloom(&bloom_ctx, SCREEN_WIDTH, SCREEN_HEIGHT)\r\n  defer cleanup_bloom(&bloom_ctx)\r\n\r\n  init_lighting()\r\n  init_input_handling()\r\n\r\n  append(&update_procs, update_aabbs)\r\n  append(&draw_procs, draw_aabbs)\r\n  init_camera()\r\n  init_player()\r\n  init_projectiles()\r\n  init_level_gen()\r\n  init_enemies()\r\n  init_knockback()\r\n\r\n\r\n  //late stuff\r\n  init_eventsystems()\r\n\r\n  for !rl.WindowShouldClose() {\r\n    time.stopwatch_reset(&sw)\r\n    time.stopwatch_start(&sw)\r\n\r\n    time_now = float(rl.GetTime())\r\n    dt = rl.GetFrameTime()\r\n\r\n\r\n    //tick\r\n    for &p in update_procs {\r\n      p()\r\n    }\r\n\r\n    //late tick\r\n    for &p in late_update_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    //Render\r\n\r\n    // Render scene to bloom buffer\r\n    begin_bloom_scene(&bloom_ctx)\r\n\r\n    rl.BeginMode3D(camera)\r\n    //rl.DrawGrid(100, 1)\r\n\r\n    for &p in draw_procs {\r\n      p()\r\n    }\r\n\r\n\r\n    rl.EndMode3D()\r\n\r\n    end_bloom_scene(&bloom_ctx)\r\n    rl.BeginDrawing()\r\n    rl.ClearBackground(rl.BLACK)\r\n\r\n    render_bloom(&bloom_ctx)\r\n\r\n\r\n    // PERF METRICS DISPLAY\r\n    if (rl.IsKeyPressed(.F1)) {\r\n      PRINT_PERF_METRICS = !PRINT_PERF_METRICS\r\n    }\r\n    if PRINT_PERF_METRICS {\r\n      rl.DrawFPS(10, 10)\r\n      dur := time.stopwatch_duration(sw)\r\n      rl.DrawText(rl.TextFormat(\"CPU %.2f\", dur), 10, 40, 18, rl.WHITE)\r\n    }\r\n\r\n    rl.EndDrawing()\r\n\r\n\r\n    //REST TEMP ALLOC\r\n    free_all(context.temp_allocator)\r\n    time.stopwatch_stop(&sw)\r\n  }\r\n\r\n  log.debug(\"\\n\")\r\n  log.debug(\"==================== SHUT DOWN ====================\\n\")\r\n  rl.CloseWindow()\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 192
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAXg8AAAAAAABeDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6YyIKaW1wb3J0ICJjb3JlOmZtdCIKaW1wb3J0ICJjb3JlOmxvZyIKaW1wb3J0IGxpbmFsZyAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOnJlZmxlY3QiCmltcG9ydCAiY29yZTp0aW1lIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgptYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyCgovL0FMSUFTRVMKZmxvYXQgOjogZjMyCmZsb2F0MiA6OiBybC5WZWN0b3IyCmZsb2F0MyA6OiBybC5WZWN0b3IzCmZsb2F0NCA6OiBybC5WZWN0b3I0CmZsb2F0NF9vbmUgOjogcmwuVmVjdG9yNHsxLCAxLCAxLCAxfQpxdWF0ZXJuaW9uIDo6IHJsLlF1YXRlcm5pb24KZmxvYXQzX3VwIDo6IGZsb2F0M3swLCAxLCAwfQpmbG9hdDNfemVybyA6OiBmbG9hdDN7fQpmbG9hdDNfb25lIDo6IGZsb2F0M3sxLCAxLCAxfQpmbG9hdDNfb25lX3JsIDo6IHJsLlZlY3RvcjN7MSwgMSwgMX0KZmxvYXQzX2Z3ZCA6OiBmbG9hdDN7MCwgMCwgMX0KZmxvYXQzX3JpZ2h0IDo6IGZsb2F0M3sxLCAwLCAwfQpxdWF0ZXJuaW9uX2lkZW50aXR5IDo6IGxpbmFsZy5RVUFURVJOSU9ORjMyX0lERU5USVRZCmludCA6OiBpMzIKClNDUkVFTl9XSURUSDogaW50ClNDUkVFTl9IRUlHSFQ6IGludAoKd2lkdGhfd2luZG93ZWQ6IGludCA9IDE5MjAKaGVpZ2h0X3dpbmRvd2VkOiBpbnQgPSAxMDgwCndpZHRoX2Z1bGw6IGludCA9IDI1NjAKaGVpZ2h0X2Z1bGw6IGludCA9IDE0NDAKCkZVTExfU0NSRUVOOiBib29sID0gZmFsc2UKUFJJTlRfRU5USVRZX1NUUlVDVDogYm9vbCA9IGZhbHNlClBSSU5UX1BFUkZfTUVUUklDUzogYm9vbCA9IGZhbHNlCgpSQURfNDU6IGZsb2F0ClJBRF85MDogZmxvYXQKUkFEXzEzNTogZmxvYXQKUkFEXzE4MDogZmxvYXQKUkFEXzIyNTogZmxvYXQKUkFEXzI3MDogZmxvYXQKCk1BWF9FTlRJVElFUyA6OiAxMDAwMAoKdGltZV9ub3c6IGZsb2F0Cm5vd19mNjQ6IGY2NApkdDogZmxvYXQKdXBkYXRlX3Byb2NzOiBbZHluYW1pY11wcm9jKCkKbGF0ZV91cGRhdGVfcHJvY3M6IFtkeW5hbWljXXByb2MoKQpkcmF3X3Byb2NzOiBbZHluYW1pY11wcm9jKCkKCnJlbmRlcl90YXJnZXQ6IHJsLlJlbmRlclRleHR1cmUyRApibG9vbV9zaGFkZXI6IHJsLlNoYWRlcgpzdzogdGltZS5TdG9wd2F0Y2gKCgptYWluIDo6IHByb2MoKSAKewogIGNvbnRleHQubG9nZ2VyID0gbG9nLmNyZWF0ZV9jb25zb2xlX2xvZ2dlciguRGVidWcsIGxvZy5Mb2NhdGlvbl9IZWFkZXJfT3B0cykKCiAgU0NSRUVOX1dJRFRIID0gRlVMTF9TQ1JFRU4gPyB3aWR0aF9mdWxsIDogd2lkdGhfd2luZG93ZWQKICBTQ1JFRU5fSEVJR0hUID0gRlVMTF9TQ1JFRU4gPyBoZWlnaHRfZnVsbCA6IGhlaWdodF93aW5kb3dlZAogIGZsYWdzOiBybC5Db25maWdGbGFncyA9IEZVTExfU0NSRUVOID8gey5NU0FBXzRYX0hJTlQsIC5GVUxMU0NSRUVOX01PREV9IDogey5NU0FBXzRYX0hJTlR9CgogIFJBRF80NSA9IHJhZGlhbnMoZmxvYXQoNDUpKQogIFJBRF85MCA9IHJhZGlhbnMoZmxvYXQoOTApKQogIFJBRF8xMzUgPSByYWRpYW5zKGZsb2F0KDEzNSkpCiAgUkFEXzE4MCA9IHJhZGlhbnMoZmxvYXQoMTgwKSkKICBSQURfMjI1ID0gcmFkaWFucyhmbG9hdCgyMjUpKQogIFJBRF8yNzAgPSByYWRpYW5zKGZsb2F0KDI3MCkpCgogIHVwZGF0ZV9wcm9jcyA9IG1ha2UoW2R5bmFtaWNdcHJvYygpKQogIGxhdGVfdXBkYXRlX3Byb2NzID0gbWFrZShbZHluYW1pY11wcm9jKCkpCgogIG1hbmFnZXIgPSBpbml0X2VudGl0eV9tYW5hZ2VyKCkKICBkZWZlciBkZXN0cm95X2VudGl0eV9tYW5hZ2VyKCkKCiAgaWYgUFJJTlRfRU5USVRZX1NUUlVDVCB7CiAgICBsb2cuZGVidWcoIlxuIikKICAgIGxvZy5kZWJ1ZygiPT09PT09PT09PT09PT09PT09IikKICAgIGxvZy5kZWJ1ZygiRU5USVRZIFNUUlVDVCBJTkZPIikKICAgIGxvZy5kZWJ1ZygiXG4iKQogICAgdHlwZV9pbmZvcyA6PSByZWZsZWN0LnN0cnVjdF9maWVsZF90eXBlcyhFbnRpdHkpCiAgICB0eXBlX25hbWVzIDo9IHJlZmxlY3Quc3RydWN0X2ZpZWxkX25hbWVzKEVudGl0eSkKICAgIGZvciB0LCBpIGluIHR5cGVfaW5mb3MgewogICAgICBsb2cuZGVidWcoImZpZWxkOiAiLCB0eXBlX25hbWVzW2ldLCB0eXBlX2luZm9zW2ldLnNpemUpCiAgICB9CiAgICBsb2cuZGVidWcoImVudGl0eSBzaXplIHRvdGFsOiAiLCBzaXplX29mKEVudGl0eSkpCiAgfQoKCiAgcmwuU2V0VHJhY2VMb2dMZXZlbCguV0FSTklORykKICBybC5TZXRDb25maWdGbGFncyhmbGFncykKICBybC5Jbml0V2luZG93KFNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCwgIkVudGl0eSBTeXN0ZW0gVGVzdCIpCgogIGlmIEZVTExfU0NSRUVOIHsKICAgIHJsLlNldFdpbmRvd01vbml0b3IoMCkKICB9CgogIHJsLlNldFRhcmdldEZQUygxNDQpCgoKICAvLz09PT09PT09PT09PSBJTklUID09PT09PT09PT09PQoKICBibG9vbV9jdHg6IEJsb29tQ29udGV4dAogIGluaXRfYmxvb20oJmJsb29tX2N0eCwgU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUKQogIGRlZmVyIGNsZWFudXBfYmxvb20oJmJsb29tX2N0eCkKCiAgaW5pdF9saWdodGluZygpCiAgaW5pdF9pbnB1dF9oYW5kbGluZygpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfYWFiYnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2FhYmJzKQogIGluaXRfY2FtZXJhKCkKICBpbml0X3BsYXllcigpCiAgaW5pdF9wcm9qZWN0aWxlcygpCiAgaW5pdF9sZXZlbF9nZW4oKQogIGluaXRfZW5lbWllcygpCiAgaW5pdF9rbm9ja2JhY2soKQoKCiAgLy9sYXRlIHN0dWZmCiAgaW5pdF9ldmVudHN5c3RlbXMoKQoKICBmb3IgIXJsLldpbmRvd1Nob3VsZENsb3NlKCkgewogICAgdGltZS5zdG9wd2F0Y2hfcmVzZXQoJnN3KQogICAgdGltZS5zdG9wd2F0Y2hfc3RhcnQoJnN3KQoKICAgIHRpbWVfbm93ID0gZmxvYXQocmwuR2V0VGltZSgpKQogICAgZHQgPSBybC5HZXRGcmFtZVRpbWUoKQoKCiAgICAvL3RpY2sKICAgIGZvciAmcCBpbiB1cGRhdGVfcHJvY3MgewogICAgICBwKCkKICAgIH0KCiAgICAvL2xhdGUgdGljawogICAgZm9yICZwIGluIGxhdGVfdXBkYXRlX3Byb2NzIHsKICAgICAgcCgpCiAgICB9CgoKICAgIC8vUmVuZGVyCgogICAgLy8gUmVuZGVyIHNjZW5lIHRvIGJsb29tIGJ1ZmZlcgogICAgYmVnaW5fYmxvb21fc2NlbmUoJmJsb29tX2N0eCkKCiAgICBybC5CZWdpbk1vZGUzRChjYW1lcmEpCiAgICAvL3JsLkRyYXdHcmlkKDEwMCwgMSkKCiAgICBmb3IgJnAgaW4gZHJhd19wcm9jcyB7CiAgICAgIHAoKQogICAgfQoKCiAgICBybC5FbmRNb2RlM0QoKQoKICAgIGVuZF9ibG9vbV9zY2VuZSgmYmxvb21fY3R4KQogICAgcmwuQmVnaW5EcmF3aW5nKCkKICAgIHJsLkNsZWFyQmFja2dyb3VuZChybC5CTEFDSykKCiAgICByZW5kZXJfYmxvb20oJmJsb29tX2N0eCkKCgogICAgLy8gUEVSRiBNRVRSSUNTIERJU1BMQVkKICAgIGlmIChybC5Jc0tleVByZXNzZWQoLkYxKSkgewogICAgICBQUklOVF9QRVJGX01FVFJJQ1MgPSAhUFJJTlRfUEVSRl9NRVRSSUNTCiAgICB9CiAgICBpZiBQUklOVF9QRVJGX01FVFJJQ1MgewogICAgICBybC5EcmF3RlBTKDEwLCAxMCkKICAgICAgZHVyIDo9IHRpbWUuc3RvcHdhdGNoX2R1cmF0aW9uKHN3KQogICAgICBybC5EcmF3VGV4dChybC5UZXh0Rm9ybWF0KCJDUFUgJS4yZiIsIGR1ciksIDEwLCA0MCwgMTgsIHJsLldISVRFKQogICAgfQoKICAgIHJsLkVuZERyYXdpbmcoKQoKCiAgICAvL1JFU1QgVEVNUCBBTExPQwogICAgZnJlZV9hbGwoY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICAgIHRpbWUuc3RvcHdhdGNoX3N0b3AoJnN3KQogIH0KCiAgbG9nLmRlYnVnKCJcbiIpCiAgbG9nLmRlYnVnKCI9PT09PT09PT09PT09PT09PT09PSBTSFVUIERPV04gPT09PT09PT09PT09PT09PT09PT1cbiIpCiAgcmwuQ2xvc2VXaW5kb3coKQp9Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALw4AAAAAAAAvDgAAAAAAAAAAAAAAAPC/"
				],
				[
					676,
					1,
					"left_delete",
					null,
					"AQAAANQMAAAAAAAA1AwAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QwAAAAAAADVDAAAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"left_delete",
					null,
					"AQAAAOcMAAAAAAAA5wwAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6AwAAAAAAADoDAAAAAAAAAAAAAAAAAAA"
				],
				[
					682,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAcNAAAAAAAADA0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABw0AAAAAAAAHDQAAAAAAAP///////+9/"
				],
				[
					684,
					1,
					"left_delete",
					null,
					"AgAAAEMNAAAAAAAAQw0AAAAAAAABAAAACggNAAAAAAAACA0AAAAAAAAEAAAAICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARA0AAAAAAABEDQAAAAAAAAAAAAAAgERA"
				],
				[
					686,
					1,
					"left_delete",
					null,
					"AQAAAFwNAAAAAAAAXA0AAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXQ0AAAAAAABdDQAAAAAAAAAAAAAAYHRA"
				],
				[
					688,
					1,
					"left_delete",
					null,
					"AQAAAFwNAAAAAAAAXA0AAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXQ0AAAAAAABdDQAAAAAAAAAAAAAA4HFA"
				],
				[
					689,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFwNAAAAAAAAYQ0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXA0AAAAAAABcDQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "doom_combat.sublime-project",
			"settings":
			{
				"buffer_size": 205,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAACEAAAAAAAAAIQAAAAAAAAAeAAAARDpcXE9kaW4gUHJvamVjdHNcXERvb21fQ29tYmF0",
					"AQAAAAAAAAABAAAAPwAAAAAAAAAhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAACEAAAAAAAAAIgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQAAAAAAAAAhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACoAAAAAAAAAKwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAQGNA"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACsAAAAAAAAALQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwAAAAAAAAArAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAC0AAAAAAAAALwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQAAAAAAAAAtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "build_"
					},
					"BgAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgAAAAAAAAAuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "systems"
					},
					"BwAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA+AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD4AAAAAAAAAPwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgAAAAAAAAA+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAD8AAAAAAAAAQQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwAAAAAAAAA/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEEAAAAAAAAAQwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert_snippet",
					{
						"contents": "\n\t$0\n"
					},
					"AQAAAEIAAAAAAAAARwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEUAAAAAAAAARwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQAAAAAAAABFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BAAAAEYAAAAAAAAASQAAAAAAAAAAAAAASQAAAAAAAABMAAAAAAAAAAAAAABHAAAAAAAAAEcAAAAAAAAAAgAAAAkJRwAAAAAAAABKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgAAAAAAAABGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAEoAAAAAAAAATAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgAAAAAAAABKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "name"
					},
					"BAAAAEsAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABNAAAAAAAAAAAAAABNAAAAAAAAAE4AAAAAAAAAAAAAAE4AAAAAAAAATwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwAAAAAAAABLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAFAAAAAAAAAAUQAAAAAAAAAAAAAAUQAAAAAAAABSAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFIAAAAAAAAAUwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgAAAAAAAABSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAFMAAAAAAAAAVQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwAAAAAAAABTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "sublime_odin"
					},
					"DAAAAFQAAAAAAAAAVQAAAAAAAAAAAAAAVQAAAAAAAABWAAAAAAAAAAAAAABWAAAAAAAAAFcAAAAAAAAAAAAAAFcAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABZAAAAAAAAAAAAAABZAAAAAAAAAFoAAAAAAAAAAAAAAFoAAAAAAAAAWwAAAAAAAAAAAAAAWwAAAAAAAABcAAAAAAAAAAAAAABcAAAAAAAAAF0AAAAAAAAAAAAAAF0AAAAAAAAAXgAAAAAAAAAAAAAAXgAAAAAAAABfAAAAAAAAAAAAAABfAAAAAAAAAGAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAAAAAAAAABUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "_template"
					},
					"CQAAAGAAAAAAAAAAYQAAAAAAAAAAAAAAYQAAAAAAAABiAAAAAAAAAAAAAABiAAAAAAAAAGMAAAAAAAAAAAAAAGMAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABlAAAAAAAAAAAAAABlAAAAAAAAAGYAAAAAAAAAAAAAAGYAAAAAAAAAZwAAAAAAAAAAAAAAZwAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAGkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGoAAAAAAAAAawAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagAAAAAAAABqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGsAAAAAAAAAbwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawAAAAAAAABrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAG8AAAAAAAAAcQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwAAAAAAAABvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "cmd"
					},
					"AwAAAHAAAAAAAAAAcQAAAAAAAAAAAAAAcQAAAAAAAAByAAAAAAAAAAAAAAByAAAAAAAAAHMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAHQAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAAAAAAAAAB0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHYAAAAAAAAAdwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgAAAAAAAAB2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAHcAAAAAAAAAeQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwAAAAAAAAB3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "odin"
					},
					"BAAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAB6AAAAAAAAAHsAAAAAAAAAAAAAAHsAAAAAAAAAfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAAAAAAAAAB4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " run"
					},
					"BAAAAHwAAAAAAAAAfQAAAAAAAAAAAAAAfQAAAAAAAAB+AAAAAAAAAAAAAAB+AAAAAAAAAH8AAAAAAAAAAAAAAH8AAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAAAAAAAAAB8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " ."
					},
					"AgAAAIAAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACCAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "-debug"
					},
					"BgAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIUAAAAAAAAAAAAAAIUAAAAAAAAAhgAAAAAAAAAAAAAAhgAAAAAAAACHAAAAAAAAAAAAAACHAAAAAAAAAIgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggAAAAAAAACCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIIAAAAAAAAAgwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggAAAAAAAACCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"left_delete",
					null,
					"AQAAAIIAAAAAAAAAggAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIIAAAAAAAAAgwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggAAAAAAAACCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIoAAAAAAAAAiwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIsAAAAAAAAAjwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAI8AAAAAAAAAkQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "file_rege"
					},
					"CQAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAACSAAAAAAAAAJMAAAAAAAAAAAAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAJYAAAAAAAAAlwAAAAAAAAAAAAAAlwAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAJkAAAAAAAAAmgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwAAAAAAAACbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ0AAAAAAAAAngAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAJ4AAAAAAAAAoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngAAAAAAAACeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKAAAAAAAAAAoQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAAAAAAAAACgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"paste",
					null,
					"AQAAAJ8AAAAAAAAAwQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwAAAAAAAACfAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "player.odin",
			"settings":
			{
				"buffer_size": 4173,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"insert",
					{
						"characters": "ab"
					},
					"AgAAAO0OAAAAAAAA7g4AAAAAAAAVAAAAc2hpZWxkX2Rhc2hfdHJpZ2dlcmVk7g4AAAAAAADvDgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAg8AAAAAAADtDgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ability_triggered"
					},
					"AgAAAO0OAAAAAAAA7Q4AAAAAAAACAAAAYWLtDgAAAAAAAP4OAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7w4AAAAAAADvDgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport \"core:slice\"\r\nimport \"core:sort\"\r\nimport rl \"vendor:raylib\"\r\n\r\nplayer_handle: EntityHandle\r\n\r\n//ground plane\r\nground_plane_p1 :: float3{-1000, 0, -1000}\r\nground_plane_p2 :: float3{-1000, 0, 1000}\r\nground_plane_p3 :: float3{1000, 0, 1000}\r\nground_plane_p4 :: float3{1000, 0, -1000}\r\n\r\nanimCurrentFrame: i32\r\nanimCount: i32\r\nanimIndex: i32\r\n\r\nplayer_model: rl.Model\r\nplayer_anims: [^]rl.ModelAnimation\r\nplayer_shader: rl.Shader\r\nanims_loaded: bool\r\nplayer_accel: float\r\nsynt_atlas_1: rl.Texture\r\nplayer_fresnel_color :: rl.Color{114, 232, 195, 255}\r\nloc_fresnel: int\r\n\r\n\r\ninit_player :: proc() \r\n{\r\n  loc_fresnel = rl.GetShaderLocation(default_shader, \"fresnelColor\")\r\n  player_handle = create_entity()\r\n  player := get_entity(player_handle)\r\n  player.flags = {.player}\r\n  player.position = float3_zero\r\n  player.rotation = quaternion_identity\r\n  init_player_stats()\r\n  append(&update_procs, update_player)\r\n  append(&draw_procs, draw_player)\r\n  //create_crossbow()\r\n  create_shotgun()\r\n\r\n  //animation test\r\n  animCount = 0\r\n  animIndex = 0\r\n  animCurrentFrame = 0\r\n\r\n  //material and shader setup\r\n  idx := load_entity_model(\"player.glb\")\r\n  player_model = entity_models[idx]\r\n  for i in 0 ..< player_model.meshCount {\r\n    smooth_all_mesh_normals(&player_model.meshes[i])\r\n  }\r\n\r\n  assign_material_all_mats(&player_model, synty_mat)\r\n\r\n  //player_model.materials[0] = synty_mat\r\n  //player_model.materials[1] = synty_mat\r\n  //player_model.materials[2] = synty_mat\r\n  if animCount != 0 {\r\n    anims_loaded = true\r\n  }\r\n}\r\n\r\ndashing: bool\r\ndashing_end: float3\r\ndashing_start: float3\r\nts_dash_start: float\r\ndash_cd :: 1\r\ndash_speed :: 50.0\r\ndash_range :: 15.0\r\nts_dash_ready: float\r\nplayer_velocity: float3\r\n\r\nupdate_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  player.stats.speed = 5\r\n  accel: float = 40\r\n  decel: float = 50\r\n\r\n  // read input, construct move vector and transform move vector by camera rotation so its camera relative\r\n  moveVec := norm(float3{core_input.moveHorizontal, 0, core_input.moveVertical})\r\n  moveVec = rl.Vector3RotateByAxisAngle(moveVec, float3_up, RAD_45)\r\n  // calculate desired velocity based on input\r\n  desiredVelocity := moveVec * player.stats.speed\r\n\r\n  // apply acceleration or deceleration\r\n  if linalg.length(moveVec) > 0 {\r\n    // Accelerate towards desired velocity\r\n    player_velocity = linalg.lerp(player_velocity, desiredVelocity, accel * dt)\r\n  } else {\r\n    // Decelerate when no input\r\n    currentSpeed := linalg.length(player_velocity)\r\n    if currentSpeed > 0 {\r\n      decelAmount := decel * dt\r\n      newSpeed := max(0, currentSpeed - decelAmount)\r\n      player_velocity = norm(player_velocity) * newSpeed\r\n    }\r\n  }\r\n\r\n  knockback := float3_zero\r\n  if player.knockback.power > 0.01 do knockback = player.knockback.current_offset\r\n\r\n  player.position += knockback + player_velocity * dt\r\n\r\n  //scan for dash targets\r\n  if core_input.ability_held && time_now > ts_dash_ready {\r\n    targets := get_enemies_in_range(dash_range, player.position)\r\n    for &handle, i in targets {\r\n      enemy := get_entity(handle)\r\n      dir := norm(enemy.position - player.position)\r\n      dot := linalg.dot(player.forward, dir)\r\n      if (dot < 0.98 || enemy == player || !is_valid_handle(handle)) {\r\n        unordered_remove(&targets, i)\r\n      }\r\n    }\r\n\r\n    if len(targets) > 1 {\r\n      //sort by distance to player\r\n      slice.sort_by(targets[:], proc(a, b: EntityHandle) -> bool \r\n      {\r\n        posA := get_entity(a).position\r\n        posB := get_entity(b).position\r\n        player := get_entity(player_handle)\r\n        return linalg.distance(posA, player.position) < linalg.distance(posB, player.position)\r\n      })\r\n    }\r\n\r\n    if len(targets) > 0 && !dashing {\r\n      player.target = targets[0]\r\n    }\r\n  } else {\r\n    player.target = zero_handle\r\n  }\r\n\r\n  //trigger dash\r\n  if core_input.ability_triggered && time_now > ts_dash_ready && is_valid_handle(player.target) {\r\n    dashing = true\r\n    targetPos := get_entity(player.target).position\r\n    dirVec := targetPos - player.position\r\n    dashing_start = player.position\r\n    dashing_end = targetPos - norm(dirVec) * 1.5\r\n    ts_dash_start = time_now\r\n  }\r\n\r\n  // player rotation\r\n  mousePos := get_mouse_pos_world()\r\n  player.rotation = look_rot(player.position, mousePos, float3_up)\r\n  player.forward = norm(mousePos - player.position)\r\n  player_model.transform = matrix_trs(float3_zero, float3_one, player.rotation)\r\n\r\n\r\n  //execute dash\r\n  if dashing {\r\n    distCovered := (time_now - ts_dash_start) * dash_speed\r\n    t := distCovered / linalg.length(dashing_end - dashing_start)\r\n    player.position = linalg.lerp(dashing_start, dashing_end, t)\r\n\r\n    //Dash End\r\n    if t >= 1.0 {\r\n      dashing = false\r\n      ts_dash_ready = time_now + dash_cd\r\n      if is_valid_handle(player.target) {\r\n        e := get_entity(player.target)\r\n        in_range := get_enemies_in_range(3, e.position)\r\n\r\n        for &handle in in_range {\r\n          enemy := get_entity(handle)\r\n          dmg := .enemy_fodder in enemy.flags ? enemy.stats.health : 10\r\n          enemy.stats.health -= dmg\r\n          if enemy.stats.health <= 0 {\r\n            enemy.flags += {.dead}\r\n          }\r\n        }\r\n\r\n        camera_shake(.small)\r\n        //player.target = zero_handle\r\n      }\r\n    }\r\n  }\r\n\r\n  if anims_loaded {\r\n    anim := player_anims[animIndex]\r\n    animCurrentFrame = (animCurrentFrame + 1) % anim.frameCount\r\n    rl.UpdateModelAnimation(player_model, anim, animCurrentFrame)\r\n  }\r\n}\r\n\r\n\r\ndraw_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  fresnel := rl.ColorNormalize(player_fresnel_color)\r\n  black := rl.ColorNormalize(rl.BLACK)\r\n\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &fresnel, .VEC4)\r\n  rl.DrawModel(player_model, player.position, 1, rl.WHITE)\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &black, .VEC4)\r\n\r\n  if is_valid_handle(player.target) {\r\n    rl.DrawSphere(get_entity(player.target).position + float3_up * 3, 0.25, rl.BLUE)\r\n  }\r\n}\r\n\r\nget_mouse_pos_world :: proc() -> float3 \r\n{\r\n  ray := rl.GetScreenToWorldRay(rl.GetMousePosition(), camera)\r\n  hitInfo: rl.RayCollision\r\n  hitInfo = rl.GetRayCollisionQuad(ray, ground_plane_p1, ground_plane_p2, ground_plane_p3, ground_plane_p4)\r\n  return hitInfo.point\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 216
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/w4AAAAAAAD/DgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AQAAABwGAAAAAAAAHAYAAAAAAACsAAAAZGFzaGluZzogYm9vbApkYXNoaW5nX2VuZDogZmxvYXQzCmRhc2hpbmdfc3RhcnQ6IGZsb2F0Mwp0c19kYXNoX3N0YXJ0OiBmbG9hdApkYXNoX2NkIDo6IDEKZGFzaF9zcGVlZCA6OiA1MC4wCmRhc2hfcmFuZ2UgOjogMTUuMAp0c19kYXNoX3JlYWR5OiBmbG9hdApwbGF5ZXJfdmVsb2NpdHk6IGZsb2F0Mw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyAYAAAAAAAAcBgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport \"core:slice\"\r\nimport \"core:sort\"\r\nimport rl \"vendor:raylib\"\r\n\r\nplayer_handle: EntityHandle\r\n\r\n//ground plane\r\nground_plane_p1 :: float3{-1000, 0, -1000}\r\nground_plane_p2 :: float3{-1000, 0, 1000}\r\nground_plane_p3 :: float3{1000, 0, 1000}\r\nground_plane_p4 :: float3{1000, 0, -1000}\r\n\r\nanimCurrentFrame: i32\r\nanimCount: i32\r\nanimIndex: i32\r\n\r\nplayer_model: rl.Model\r\nplayer_anims: [^]rl.ModelAnimation\r\nplayer_shader: rl.Shader\r\nanims_loaded: bool\r\nplayer_accel: float\r\nsynt_atlas_1: rl.Texture\r\nplayer_fresnel_color :: rl.Color{114, 232, 195, 255}\r\nloc_fresnel: int\r\n\r\n\r\ninit_player :: proc() \r\n{\r\n  loc_fresnel = rl.GetShaderLocation(default_shader, \"fresnelColor\")\r\n  player_handle = create_entity()\r\n  player := get_entity(player_handle)\r\n  player.flags = {.player}\r\n  player.position = float3_zero\r\n  player.rotation = quaternion_identity\r\n  init_player_stats()\r\n  append(&update_procs, update_player)\r\n  append(&draw_procs, draw_player)\r\n  //create_crossbow()\r\n  create_shotgun()\r\n\r\n  //animation test\r\n  animCount = 0\r\n  animIndex = 0\r\n  animCurrentFrame = 0\r\n\r\n  //material and shader setup\r\n  idx := load_entity_model(\"player.glb\")\r\n  player_model = entity_models[idx]\r\n  for i in 0 ..< player_model.meshCount {\r\n    smooth_all_mesh_normals(&player_model.meshes[i])\r\n  }\r\n\r\n  assign_material_all_mats(&player_model, synty_mat)\r\n\r\n  //player_model.materials[0] = synty_mat\r\n  //player_model.materials[1] = synty_mat\r\n  //player_model.materials[2] = synty_mat\r\n  if animCount != 0 {\r\n    anims_loaded = true\r\n  }\r\n}\r\n\r\n\r\nupdate_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  player.stats.speed = 5\r\n  accel: float = 40\r\n  decel: float = 50\r\n\r\n  // read input, construct move vector and transform move vector by camera rotation so its camera relative\r\n  moveVec := norm(float3{core_input.moveHorizontal, 0, core_input.moveVertical})\r\n  moveVec = rl.Vector3RotateByAxisAngle(moveVec, float3_up, RAD_45)\r\n  // calculate desired velocity based on input\r\n  desiredVelocity := moveVec * player.stats.speed\r\n\r\n  // apply acceleration or deceleration\r\n  if linalg.length(moveVec) > 0 {\r\n    // Accelerate towards desired velocity\r\n    player_velocity = linalg.lerp(player_velocity, desiredVelocity, accel * dt)\r\n  } else {\r\n    // Decelerate when no input\r\n    currentSpeed := linalg.length(player_velocity)\r\n    if currentSpeed > 0 {\r\n      decelAmount := decel * dt\r\n      newSpeed := max(0, currentSpeed - decelAmount)\r\n      player_velocity = norm(player_velocity) * newSpeed\r\n    }\r\n  }\r\n\r\n  knockback := float3_zero\r\n  if player.knockback.power > 0.01 do knockback = player.knockback.current_offset\r\n\r\n  player.position += knockback + player_velocity * dt\r\n\r\n  //scan for dash targets\r\n  if core_input.ability_held && time_now > ts_dash_ready {\r\n    targets := get_enemies_in_range(dash_range, player.position)\r\n    for &handle, i in targets {\r\n      enemy := get_entity(handle)\r\n      dir := norm(enemy.position - player.position)\r\n      dot := linalg.dot(player.forward, dir)\r\n      if (dot < 0.98 || enemy == player || !is_valid_handle(handle)) {\r\n        unordered_remove(&targets, i)\r\n      }\r\n    }\r\n\r\n    if len(targets) > 1 {\r\n      //sort by distance to player\r\n      slice.sort_by(targets[:], proc(a, b: EntityHandle) -> bool \r\n      {\r\n        posA := get_entity(a).position\r\n        posB := get_entity(b).position\r\n        player := get_entity(player_handle)\r\n        return linalg.distance(posA, player.position) < linalg.distance(posB, player.position)\r\n      })\r\n    }\r\n\r\n    if len(targets) > 0 && !dashing {\r\n      player.target = targets[0]\r\n    }\r\n  } else {\r\n    player.target = zero_handle\r\n  }\r\n\r\n  //trigger dash\r\n  if core_input.ability_triggered && time_now > ts_dash_ready && is_valid_handle(player.target) {\r\n    dashing = true\r\n    targetPos := get_entity(player.target).position\r\n    dirVec := targetPos - player.position\r\n    dashing_start = player.position\r\n    dashing_end = targetPos - norm(dirVec) * 1.5\r\n    ts_dash_start = time_now\r\n  }\r\n\r\n  // player rotation\r\n  mousePos := get_mouse_pos_world()\r\n  player.rotation = look_rot(player.position, mousePos, float3_up)\r\n  player.forward = norm(mousePos - player.position)\r\n  player_model.transform = matrix_trs(float3_zero, float3_one, player.rotation)\r\n\r\n\r\n  //execute dash\r\n  if dashing {\r\n    distCovered := (time_now - ts_dash_start) * dash_speed\r\n    t := distCovered / linalg.length(dashing_end - dashing_start)\r\n    player.position = linalg.lerp(dashing_start, dashing_end, t)\r\n\r\n    //Dash End\r\n    if t >= 1.0 {\r\n      dashing = false\r\n      ts_dash_ready = time_now + dash_cd\r\n      if is_valid_handle(player.target) {\r\n        e := get_entity(player.target)\r\n        in_range := get_enemies_in_range(3, e.position)\r\n\r\n        for &handle in in_range {\r\n          enemy := get_entity(handle)\r\n          dmg := .enemy_fodder in enemy.flags ? enemy.stats.health : 10\r\n          enemy.stats.health -= dmg\r\n          if enemy.stats.health <= 0 {\r\n            enemy.flags += {.dead}\r\n          }\r\n        }\r\n\r\n        camera_shake(.small)\r\n        //player.target = zero_handle\r\n      }\r\n    }\r\n  }\r\n\r\n  if anims_loaded {\r\n    anim := player_anims[animIndex]\r\n    animCurrentFrame = (animCurrentFrame + 1) % anim.frameCount\r\n    rl.UpdateModelAnimation(player_model, anim, animCurrentFrame)\r\n  }\r\n}\r\n\r\n\r\ndraw_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  fresnel := rl.ColorNormalize(player_fresnel_color)\r\n  black := rl.ColorNormalize(rl.BLACK)\r\n\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &fresnel, .VEC4)\r\n  rl.DrawModel(player_model, player.position, 1, rl.WHITE)\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &black, .VEC4)\r\n\r\n  if is_valid_handle(player.target) {\r\n    rl.DrawSphere(get_entity(player.target).position + float3_up * 3, 0.25, rl.BLUE)\r\n  }\r\n}\r\n\r\nget_mouse_pos_world :: proc() -> float3 \r\n{\r\n  ray := rl.GetScreenToWorldRay(rl.GetMousePosition(), camera)\r\n  hitInfo: rl.RayCollision\r\n  hitInfo = rl.GetRayCollisionQuad(ray, ground_plane_p1, ground_plane_p2, ground_plane_p3, ground_plane_p4)\r\n  return hitInfo.point\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 208
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHAYAAAAAAAAcBgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport \"core:slice\"\r\nimport \"core:sort\"\r\nimport rl \"vendor:raylib\"\r\n\r\nplayer_handle: EntityHandle\r\n\r\n//ground plane\r\nground_plane_p1 :: float3{-1000, 0, -1000}\r\nground_plane_p2 :: float3{-1000, 0, 1000}\r\nground_plane_p3 :: float3{1000, 0, 1000}\r\nground_plane_p4 :: float3{1000, 0, -1000}\r\n\r\nanimCurrentFrame: i32\r\nanimCount: i32\r\nanimIndex: i32\r\n\r\nplayer_model: rl.Model\r\nplayer_anims: [^]rl.ModelAnimation\r\nplayer_shader: rl.Shader\r\nanims_loaded: bool\r\nplayer_accel: float\r\nsynt_atlas_1: rl.Texture\r\nplayer_fresnel_color :: rl.Color{114, 232, 195, 255}\r\nloc_fresnel: int\r\n\r\n\r\ninit_player :: proc() \r\n{\r\n  loc_fresnel = rl.GetShaderLocation(default_shader, \"fresnelColor\")\r\n  player_handle = create_entity()\r\n  player := get_entity(player_handle)\r\n  player.flags = {.player}\r\n  player.position = float3_zero\r\n  player.rotation = quaternion_identity\r\n  init_player_stats()\r\n  append(&update_procs, update_player)\r\n  append(&draw_procs, draw_player)\r\n  //create_crossbow()\r\n  create_shotgun()\r\n\r\n  //animation test\r\n  animCount = 0\r\n  animIndex = 0\r\n  animCurrentFrame = 0\r\n\r\n  //material and shader setup\r\n  idx := load_entity_model(\"player.glb\")\r\n  player_model = entity_models[idx]\r\n  for i in 0 ..< player_model.meshCount {\r\n    smooth_all_mesh_normals(&player_model.meshes[i])\r\n  }\r\n\r\n  assign_material_all_mats(&player_model, synty_mat)\r\n\r\n  //player_model.materials[0] = synty_mat\r\n  //player_model.materials[1] = synty_mat\r\n  //player_model.materials[2] = synty_mat\r\n  if animCount != 0 {\r\n    anims_loaded = true\r\n  }\r\n}\r\n\r\n\r\nupdate_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  player.stats.speed = 5\r\n  accel: float = 40\r\n  decel: float = 50\r\n\r\n  // read input, construct move vector and transform move vector by camera rotation so its camera relative\r\n  moveVec := norm(float3{core_input.moveHorizontal, 0, core_input.moveVertical})\r\n  moveVec = rl.Vector3RotateByAxisAngle(moveVec, float3_up, RAD_45)\r\n  // calculate desired velocity based on input\r\n  desiredVelocity := moveVec * player.stats.speed\r\n\r\n  // apply acceleration or deceleration\r\n  if linalg.length(moveVec) > 0 {\r\n    // Accelerate towards desired velocity\r\n    player_velocity = linalg.lerp(player_velocity, desiredVelocity, accel * dt)\r\n  } else {\r\n    // Decelerate when no input\r\n    currentSpeed := linalg.length(player_velocity)\r\n    if currentSpeed > 0 {\r\n      decelAmount := decel * dt\r\n      newSpeed := max(0, currentSpeed - decelAmount)\r\n      player_velocity = norm(player_velocity) * newSpeed\r\n    }\r\n  }\r\n\r\n  knockback := float3_zero\r\n  if player.knockback.power > 0.01 do knockback = player.knockback.current_offset\r\n\r\n  player.position += knockback + player_velocity * dt\r\n\r\n  //scan for dash targets\r\n  if core_input.ability_held && time_now > ts_dash_ready {\r\n    targets := get_enemies_in_range(dash_range, player.position)\r\n    for &handle, i in targets {\r\n      enemy := get_entity(handle)\r\n      dir := norm(enemy.position - player.position)\r\n      dot := linalg.dot(player.forward, dir)\r\n      if (dot < 0.98 || enemy == player || !is_valid_handle(handle)) {\r\n        unordered_remove(&targets, i)\r\n      }\r\n    }\r\n\r\n    if len(targets) > 1 {\r\n      //sort by distance to player\r\n      slice.sort_by(targets[:], proc(a, b: EntityHandle) -> bool \r\n      {\r\n        posA := get_entity(a).position\r\n        posB := get_entity(b).position\r\n        player := get_entity(player_handle)\r\n        return linalg.distance(posA, player.position) < linalg.distance(posB, player.position)\r\n      })\r\n    }\r\n\r\n    if len(targets) > 0 && !dashing {\r\n      player.target = targets[0]\r\n    }\r\n  } else {\r\n    player.target = zero_handle\r\n  }\r\n\r\n  //trigger dash\r\n  if core_input.ability_triggered && time_now > ts_dash_ready && is_valid_handle(player.target) {\r\n    dashing = true\r\n    targetPos := get_entity(player.target).position\r\n    dirVec := targetPos - player.position\r\n    dashing_start = player.position\r\n    dashing_end = targetPos - norm(dirVec) * 1.5\r\n    ts_dash_start = time_now\r\n  }\r\n\r\n  // player rotation\r\n  mousePos := get_mouse_pos_world()\r\n  player.rotation = look_rot(player.position, mousePos, float3_up)\r\n  player.forward = norm(mousePos - player.position)\r\n  player_model.transform = matrix_trs(float3_zero, float3_one, player.rotation)\r\n\r\n\r\n  //execute dash\r\n  if dashing {\r\n    distCovered := (time_now - ts_dash_start) * dash_speed\r\n    t := distCovered / linalg.length(dashing_end - dashing_start)\r\n    player.position = linalg.lerp(dashing_start, dashing_end, t)\r\n\r\n    //Dash End\r\n    if t >= 1.0 {\r\n      dashing = false\r\n      ts_dash_ready = time_now + dash_cd\r\n      if is_valid_handle(player.target) {\r\n        e := get_entity(player.target)\r\n        in_range := get_enemies_in_range(3, e.position)\r\n\r\n        for &handle in in_range {\r\n          enemy := get_entity(handle)\r\n          dmg := .enemy_fodder in enemy.flags ? enemy.stats.health : 10\r\n          enemy.stats.health -= dmg\r\n          if enemy.stats.health <= 0 {\r\n            enemy.flags += {.dead}\r\n          }\r\n        }\r\n\r\n        camera_shake(.small)\r\n        //player.target = zero_handle\r\n      }\r\n    }\r\n  }\r\n\r\n  if anims_loaded {\r\n    anim := player_anims[animIndex]\r\n    animCurrentFrame = (animCurrentFrame + 1) % anim.frameCount\r\n    rl.UpdateModelAnimation(player_model, anim, animCurrentFrame)\r\n  }\r\n}\r\n\r\n\r\ndraw_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  fresnel := rl.ColorNormalize(player_fresnel_color)\r\n  black := rl.ColorNormalize(rl.BLACK)\r\n\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &fresnel, .VEC4)\r\n  rl.DrawModel(player_model, player.position, 1, rl.WHITE)\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &black, .VEC4)\r\n\r\n  if is_valid_handle(player.target) {\r\n    rl.DrawSphere(get_entity(player.target).position + float3_up * 3, 0.25, rl.BLUE)\r\n  }\r\n}\r\n\r\nget_mouse_pos_world :: proc() -> float3 \r\n{\r\n  ray := rl.GetScreenToWorldRay(rl.GetMousePosition(), camera)\r\n  hitInfo: rl.RayCollision\r\n  hitInfo = rl.GetRayCollisionQuad(ray, ground_plane_p1, ground_plane_p2, ground_plane_p3, ground_plane_p4)\r\n  return hitInfo.point\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 207
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAWBcAAAAAAABYFwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6Zm10IgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgImNvcmU6c2xpY2UiCmltcG9ydCAiY29yZTpzb3J0IgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpwbGF5ZXJfaGFuZGxlOiBFbnRpdHlIYW5kbGUKCi8vZ3JvdW5kIHBsYW5lCmdyb3VuZF9wbGFuZV9wMSA6OiBmbG9hdDN7LTEwMDAsIDAsIC0xMDAwfQpncm91bmRfcGxhbmVfcDIgOjogZmxvYXQzey0xMDAwLCAwLCAxMDAwfQpncm91bmRfcGxhbmVfcDMgOjogZmxvYXQzezEwMDAsIDAsIDEwMDB9Cmdyb3VuZF9wbGFuZV9wNCA6OiBmbG9hdDN7MTAwMCwgMCwgLTEwMDB9CgphbmltQ3VycmVudEZyYW1lOiBpMzIKYW5pbUNvdW50OiBpMzIKYW5pbUluZGV4OiBpMzIKCnBsYXllcl9tb2RlbDogcmwuTW9kZWwKcGxheWVyX2FuaW1zOiBbXl1ybC5Nb2RlbEFuaW1hdGlvbgpwbGF5ZXJfc2hhZGVyOiBybC5TaGFkZXIKYW5pbXNfbG9hZGVkOiBib29sCnBsYXllcl9hY2NlbDogZmxvYXQKc3ludF9hdGxhc18xOiBybC5UZXh0dXJlCnBsYXllcl9mcmVzbmVsX2NvbG9yIDo6IHJsLkNvbG9yezExNCwgMjMyLCAxOTUsIDI1NX0KbG9jX2ZyZXNuZWw6IGludAoKCmluaXRfcGxheWVyIDo6IHByb2MoKSAKewogIGxvY19mcmVzbmVsID0gcmwuR2V0U2hhZGVyTG9jYXRpb24oZGVmYXVsdF9zaGFkZXIsICJmcmVzbmVsQ29sb3IiKQogIHBsYXllcl9oYW5kbGUgPSBjcmVhdGVfZW50aXR5KCkKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIHBsYXllci5mbGFncyA9IHsucGxheWVyfQogIHBsYXllci5wb3NpdGlvbiA9IGZsb2F0M196ZXJvCiAgcGxheWVyLnJvdGF0aW9uID0gcXVhdGVybmlvbl9pZGVudGl0eQogIGluaXRfcGxheWVyX3N0YXRzKCkKICBhcHBlbmQoJnVwZGF0ZV9wcm9jcywgdXBkYXRlX3BsYXllcikKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfcGxheWVyKQogIC8vY3JlYXRlX2Nyb3NzYm93KCkKICBjcmVhdGVfc2hvdGd1bigpCgogIC8vYW5pbWF0aW9uIHRlc3QKICBhbmltQ291bnQgPSAwCiAgYW5pbUluZGV4ID0gMAogIGFuaW1DdXJyZW50RnJhbWUgPSAwCgogIC8vbWF0ZXJpYWwgYW5kIHNoYWRlciBzZXR1cAogIGlkeCA6PSBsb2FkX2VudGl0eV9tb2RlbCgicGxheWVyLmdsYiIpCiAgcGxheWVyX21vZGVsID0gZW50aXR5X21vZGVsc1tpZHhdCiAgZm9yIGkgaW4gMCAuLjwgcGxheWVyX21vZGVsLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmcGxheWVyX21vZGVsLm1lc2hlc1tpXSkKICB9CgogIGFzc2lnbl9tYXRlcmlhbF9hbGxfbWF0cygmcGxheWVyX21vZGVsLCBzeW50eV9tYXQpCgogIC8vcGxheWVyX21vZGVsLm1hdGVyaWFsc1swXSA9IHN5bnR5X21hdAogIC8vcGxheWVyX21vZGVsLm1hdGVyaWFsc1sxXSA9IHN5bnR5X21hdAogIC8vcGxheWVyX21vZGVsLm1hdGVyaWFsc1syXSA9IHN5bnR5X21hdAogIGlmIGFuaW1Db3VudCAhPSAwIHsKICAgIGFuaW1zX2xvYWRlZCA9IHRydWUKICB9Cn0KCgp1cGRhdGVfcGxheWVyIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfZW50aXR5KHBsYXllcl9oYW5kbGUpCiAgcGxheWVyLnN0YXRzLnNwZWVkID0gNQogIGFjY2VsOiBmbG9hdCA9IDQwCiAgZGVjZWw6IGZsb2F0ID0gNTAKCiAgLy8gcmVhZCBpbnB1dCwgY29uc3RydWN0IG1vdmUgdmVjdG9yIGFuZCB0cmFuc2Zvcm0gbW92ZSB2ZWN0b3IgYnkgY2FtZXJhIHJvdGF0aW9uIHNvIGl0cyBjYW1lcmEgcmVsYXRpdmUKICBtb3ZlVmVjIDo9IG5vcm0oZmxvYXQze2NvcmVfaW5wdXQubW92ZUhvcml6b250YWwsIDAsIGNvcmVfaW5wdXQubW92ZVZlcnRpY2FsfSkKICBtb3ZlVmVjID0gcmwuVmVjdG9yM1JvdGF0ZUJ5QXhpc0FuZ2xlKG1vdmVWZWMsIGZsb2F0M191cCwgUkFEXzQ1KQogIC8vIGNhbGN1bGF0ZSBkZXNpcmVkIHZlbG9jaXR5IGJhc2VkIG9uIGlucHV0CiAgZGVzaXJlZFZlbG9jaXR5IDo9IG1vdmVWZWMgKiBwbGF5ZXIuc3RhdHMuc3BlZWQKCiAgLy8gYXBwbHkgYWNjZWxlcmF0aW9uIG9yIGRlY2VsZXJhdGlvbgogIGlmIGxpbmFsZy5sZW5ndGgobW92ZVZlYykgPiAwIHsKICAgIC8vIEFjY2VsZXJhdGUgdG93YXJkcyBkZXNpcmVkIHZlbG9jaXR5CiAgICBwbGF5ZXJfdmVsb2NpdHkgPSBsaW5hbGcubGVycChwbGF5ZXJfdmVsb2NpdHksIGRlc2lyZWRWZWxvY2l0eSwgYWNjZWwgKiBkdCkKICB9IGVsc2UgewogICAgLy8gRGVjZWxlcmF0ZSB3aGVuIG5vIGlucHV0CiAgICBjdXJyZW50U3BlZWQgOj0gbGluYWxnLmxlbmd0aChwbGF5ZXJfdmVsb2NpdHkpCiAgICBpZiBjdXJyZW50U3BlZWQgPiAwIHsKICAgICAgZGVjZWxBbW91bnQgOj0gZGVjZWwgKiBkdAogICAgICBuZXdTcGVlZCA6PSBtYXgoMCwgY3VycmVudFNwZWVkIC0gZGVjZWxBbW91bnQpCiAgICAgIHBsYXllcl92ZWxvY2l0eSA9IG5vcm0ocGxheWVyX3ZlbG9jaXR5KSAqIG5ld1NwZWVkCiAgICB9CiAgfQoKICBrbm9ja2JhY2sgOj0gZmxvYXQzX3plcm8KICBpZiBwbGF5ZXIua25vY2tiYWNrLnBvd2VyID4gMC4wMSBkbyBrbm9ja2JhY2sgPSBwbGF5ZXIua25vY2tiYWNrLmN1cnJlbnRfb2Zmc2V0CgogIHBsYXllci5wb3NpdGlvbiArPSBrbm9ja2JhY2sgKyBwbGF5ZXJfdmVsb2NpdHkgKiBkdAoKICAvL3NjYW4gZm9yIGRhc2ggdGFyZ2V0cwogIGlmIGNvcmVfaW5wdXQuYWJpbGl0eV9oZWxkICYmIHRpbWVfbm93ID4gdHNfZGFzaF9yZWFkeSB7CiAgICB0YXJnZXRzIDo9IGdldF9lbmVtaWVzX2luX3JhbmdlKGRhc2hfcmFuZ2UsIHBsYXllci5wb3NpdGlvbikKICAgIGZvciAmaGFuZGxlLCBpIGluIHRhcmdldHMgewogICAgICBlbmVteSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgICAgZGlyIDo9IG5vcm0oZW5lbXkucG9zaXRpb24gLSBwbGF5ZXIucG9zaXRpb24pCiAgICAgIGRvdCA6PSBsaW5hbGcuZG90KHBsYXllci5mb3J3YXJkLCBkaXIpCiAgICAgIGlmIChkb3QgPCAwLjk4IHx8IGVuZW15ID09IHBsYXllciB8fCAhaXNfdmFsaWRfaGFuZGxlKGhhbmRsZSkpIHsKICAgICAgICB1bm9yZGVyZWRfcmVtb3ZlKCZ0YXJnZXRzLCBpKQogICAgICB9CiAgICB9CgogICAgaWYgbGVuKHRhcmdldHMpID4gMSB7CiAgICAgIC8vc29ydCBieSBkaXN0YW5jZSB0byBwbGF5ZXIKICAgICAgc2xpY2Uuc29ydF9ieSh0YXJnZXRzWzpdLCBwcm9jKGEsIGI6IEVudGl0eUhhbmRsZSkgLT4gYm9vbCAKICAgICAgewogICAgICAgIHBvc0EgOj0gZ2V0X2VudGl0eShhKS5wb3NpdGlvbgogICAgICAgIHBvc0IgOj0gZ2V0X2VudGl0eShiKS5wb3NpdGlvbgogICAgICAgIHBsYXllciA6PSBnZXRfZW50aXR5KHBsYXllcl9oYW5kbGUpCiAgICAgICAgcmV0dXJuIGxpbmFsZy5kaXN0YW5jZShwb3NBLCBwbGF5ZXIucG9zaXRpb24pIDwgbGluYWxnLmRpc3RhbmNlKHBvc0IsIHBsYXllci5wb3NpdGlvbikKICAgICAgfSkKICAgIH0KCiAgICBpZiBsZW4odGFyZ2V0cykgPiAwICYmICFkYXNoaW5nIHsKICAgICAgcGxheWVyLnRhcmdldCA9IHRhcmdldHNbMF0KICAgIH0KICB9IGVsc2UgewogICAgcGxheWVyLnRhcmdldCA9IHplcm9faGFuZGxlCiAgfQoKICAvL3RyaWdnZXIgZGFzaAogIGlmIGNvcmVfaW5wdXQuYWJpbGl0eV90cmlnZ2VyZWQgJiYgdGltZV9ub3cgPiB0c19kYXNoX3JlYWR5ICYmIGlzX3ZhbGlkX2hhbmRsZShwbGF5ZXIudGFyZ2V0KSB7CiAgICBkYXNoaW5nID0gdHJ1ZQogICAgdGFyZ2V0UG9zIDo9IGdldF9lbnRpdHkocGxheWVyLnRhcmdldCkucG9zaXRpb24KICAgIGRpclZlYyA6PSB0YXJnZXRQb3MgLSBwbGF5ZXIucG9zaXRpb24KICAgIGRhc2hpbmdfc3RhcnQgPSBwbGF5ZXIucG9zaXRpb24KICAgIGRhc2hpbmdfZW5kID0gdGFyZ2V0UG9zIC0gbm9ybShkaXJWZWMpICogMS41CiAgICB0c19kYXNoX3N0YXJ0ID0gdGltZV9ub3cKICB9CgogIC8vIHBsYXllciByb3RhdGlvbgogIG1vdXNlUG9zIDo9IGdldF9tb3VzZV9wb3Nfd29ybGQoKQogIHBsYXllci5yb3RhdGlvbiA9IGxvb2tfcm90KHBsYXllci5wb3NpdGlvbiwgbW91c2VQb3MsIGZsb2F0M191cCkKICBwbGF5ZXIuZm9yd2FyZCA9IG5vcm0obW91c2VQb3MgLSBwbGF5ZXIucG9zaXRpb24pCiAgcGxheWVyX21vZGVsLnRyYW5zZm9ybSA9IG1hdHJpeF90cnMoZmxvYXQzX3plcm8sIGZsb2F0M19vbmUsIHBsYXllci5yb3RhdGlvbikKCgogIC8vZXhlY3V0ZSBkYXNoCiAgaWYgZGFzaGluZyB7CiAgICBkaXN0Q292ZXJlZCA6PSAodGltZV9ub3cgLSB0c19kYXNoX3N0YXJ0KSAqIGRhc2hfc3BlZWQKICAgIHQgOj0gZGlzdENvdmVyZWQgLyBsaW5hbGcubGVuZ3RoKGRhc2hpbmdfZW5kIC0gZGFzaGluZ19zdGFydCkKICAgIHBsYXllci5wb3NpdGlvbiA9IGxpbmFsZy5sZXJwKGRhc2hpbmdfc3RhcnQsIGRhc2hpbmdfZW5kLCB0KQoKICAgIC8vRGFzaCBFbmQKICAgIGlmIHQgPj0gMS4wIHsKICAgICAgZGFzaGluZyA9IGZhbHNlCiAgICAgIHRzX2Rhc2hfcmVhZHkgPSB0aW1lX25vdyArIGRhc2hfY2QKICAgICAgaWYgaXNfdmFsaWRfaGFuZGxlKHBsYXllci50YXJnZXQpIHsKICAgICAgICBlIDo9IGdldF9lbnRpdHkocGxheWVyLnRhcmdldCkKICAgICAgICBpbl9yYW5nZSA6PSBnZXRfZW5lbWllc19pbl9yYW5nZSgzLCBlLnBvc2l0aW9uKQoKICAgICAgICBmb3IgJmhhbmRsZSBpbiBpbl9yYW5nZSB7CiAgICAgICAgICBlbmVteSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgICAgICAgIGRtZyA6PSAuZW5lbXlfZm9kZGVyIGluIGVuZW15LmZsYWdzID8gZW5lbXkuc3RhdHMuaGVhbHRoIDogMTAKICAgICAgICAgIGVuZW15LnN0YXRzLmhlYWx0aCAtPSBkbWcKICAgICAgICAgIGlmIGVuZW15LnN0YXRzLmhlYWx0aCA8PSAwIHsKICAgICAgICAgICAgZW5lbXkuZmxhZ3MgKz0gey5kZWFkfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY2FtZXJhX3NoYWtlKC5zbWFsbCkKICAgICAgICAvL3BsYXllci50YXJnZXQgPSB6ZXJvX2hhbmRsZQogICAgICB9CiAgICB9CiAgfQoKICBpZiBhbmltc19sb2FkZWQgewogICAgYW5pbSA6PSBwbGF5ZXJfYW5pbXNbYW5pbUluZGV4XQogICAgYW5pbUN1cnJlbnRGcmFtZSA9IChhbmltQ3VycmVudEZyYW1lICsgMSkgJSBhbmltLmZyYW1lQ291bnQKICAgIHJsLlVwZGF0ZU1vZGVsQW5pbWF0aW9uKHBsYXllcl9tb2RlbCwgYW5pbSwgYW5pbUN1cnJlbnRGcmFtZSkKICB9Cn0KCgpkcmF3X3BsYXllciA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIGZyZXNuZWwgOj0gcmwuQ29sb3JOb3JtYWxpemUocGxheWVyX2ZyZXNuZWxfY29sb3IpCiAgYmxhY2sgOj0gcmwuQ29sb3JOb3JtYWxpemUocmwuQkxBQ0spCgogIHJsLlNldFNoYWRlclZhbHVlKGRlZmF1bHRfc2hhZGVyLCBsb2NfZnJlc25lbCwgJmZyZXNuZWwsIC5WRUM0KQogIHJsLkRyYXdNb2RlbChwbGF5ZXJfbW9kZWwsIHBsYXllci5wb3NpdGlvbiwgMSwgcmwuV0hJVEUpCiAgcmwuU2V0U2hhZGVyVmFsdWUoZGVmYXVsdF9zaGFkZXIsIGxvY19mcmVzbmVsLCAmYmxhY2ssIC5WRUM0KQoKICBpZiBpc192YWxpZF9oYW5kbGUocGxheWVyLnRhcmdldCkgewogICAgcmwuRHJhd1NwaGVyZShnZXRfZW50aXR5KHBsYXllci50YXJnZXQpLnBvc2l0aW9uICsgZmxvYXQzX3VwICogMywgMC4yNSwgcmwuQkxVRSkKICB9Cn0KCmdldF9tb3VzZV9wb3Nfd29ybGQgOjogcHJvYygpIC0+IGZsb2F0MyAKewogIHJheSA6PSBybC5HZXRTY3JlZW5Ub1dvcmxkUmF5KHJsLkdldE1vdXNlUG9zaXRpb24oKSwgY2FtZXJhKQogIGhpdEluZm86IHJsLlJheUNvbGxpc2lvbgogIGhpdEluZm8gPSBybC5HZXRSYXlDb2xsaXNpb25RdWFkKHJheSwgZ3JvdW5kX3BsYW5lX3AxLCBncm91bmRfcGxhbmVfcDIsIGdyb3VuZF9wbGFuZV9wMywgZ3JvdW5kX3BsYW5lX3A0KQogIHJldHVybiBoaXRJbmZvLnBvaW50Cn0K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnwYAAAAAAACfBgAAAAAAAAAAAAAAQGhA"
				],
				[
					66,
					1,
					"cut",
					null,
					"AQAAAHwKAAAAAAAAfAoAAAAAAAChAwAACiAgLy9zY2FuIGZvciBkYXNoIHRhcmdldHMKICBpZiBjb3JlX2lucHV0LmFiaWxpdHlfaGVsZCAmJiB0aW1lX25vdyA+IHRzX2Rhc2hfcmVhZHkgewogICAgdGFyZ2V0cyA6PSBnZXRfZW5lbWllc19pbl9yYW5nZShkYXNoX3JhbmdlLCBwbGF5ZXIucG9zaXRpb24pCiAgICBmb3IgJmhhbmRsZSwgaSBpbiB0YXJnZXRzIHsKICAgICAgZW5lbXkgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICAgIGRpciA6PSBub3JtKGVuZW15LnBvc2l0aW9uIC0gcGxheWVyLnBvc2l0aW9uKQogICAgICBkb3QgOj0gbGluYWxnLmRvdChwbGF5ZXIuZm9yd2FyZCwgZGlyKQogICAgICBpZiAoZG90IDwgMC45OCB8fCBlbmVteSA9PSBwbGF5ZXIgfHwgIWlzX3ZhbGlkX2hhbmRsZShoYW5kbGUpKSB7CiAgICAgICAgdW5vcmRlcmVkX3JlbW92ZSgmdGFyZ2V0cywgaSkKICAgICAgfQogICAgfQoKICAgIGlmIGxlbih0YXJnZXRzKSA+IDEgewogICAgICAvL3NvcnQgYnkgZGlzdGFuY2UgdG8gcGxheWVyCiAgICAgIHNsaWNlLnNvcnRfYnkodGFyZ2V0c1s6XSwgcHJvYyhhLCBiOiBFbnRpdHlIYW5kbGUpIC0+IGJvb2wgCiAgICAgIHsKICAgICAgICBwb3NBIDo9IGdldF9lbnRpdHkoYSkucG9zaXRpb24KICAgICAgICBwb3NCIDo9IGdldF9lbnRpdHkoYikucG9zaXRpb24KICAgICAgICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogICAgICAgIHJldHVybiBsaW5hbGcuZGlzdGFuY2UocG9zQSwgcGxheWVyLnBvc2l0aW9uKSA8IGxpbmFsZy5kaXN0YW5jZShwb3NCLCBwbGF5ZXIucG9zaXRpb24pCiAgICAgIH0pCiAgICB9CgogICAgaWYgbGVuKHRhcmdldHMpID4gMCAmJiAhZGFzaGluZyB7CiAgICAgIHBsYXllci50YXJnZXQgPSB0YXJnZXRzWzBdCiAgICB9CiAgfSBlbHNlIHsKICAgIHBsYXllci50YXJnZXQgPSB6ZXJvX2hhbmRsZQogIH0",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHQ4AAAAAAAB8CgAAAAAAAAAAAAAA6IBA"
				],
				[
					81,
					1,
					"cut",
					null,
					"AQAAAN0MAAAAAAAA3QwAAAAAAAAsAwAALy9leGVjdXRlIGRhc2gKICBpZiBkYXNoaW5nIHsKICAgIGRpc3RDb3ZlcmVkIDo9ICh0aW1lX25vdyAtIHRzX2Rhc2hfc3RhcnQpICogZGFzaF9zcGVlZAogICAgdCA6PSBkaXN0Q292ZXJlZCAvIGxpbmFsZy5sZW5ndGgoZGFzaGluZ19lbmQgLSBkYXNoaW5nX3N0YXJ0KQogICAgcGxheWVyLnBvc2l0aW9uID0gbGluYWxnLmxlcnAoZGFzaGluZ19zdGFydCwgZGFzaGluZ19lbmQsIHQpCgogICAgLy9EYXNoIEVuZAogICAgaWYgdCA+PSAxLjAgewogICAgICBkYXNoaW5nID0gZmFsc2UKICAgICAgdHNfZGFzaF9yZWFkeSA9IHRpbWVfbm93ICsgZGFzaF9jZAogICAgICBpZiBpc192YWxpZF9oYW5kbGUocGxheWVyLnRhcmdldCkgewogICAgICAgIGUgOj0gZ2V0X2VudGl0eShwbGF5ZXIudGFyZ2V0KQogICAgICAgIGluX3JhbmdlIDo9IGdldF9lbmVtaWVzX2luX3JhbmdlKDMsIGUucG9zaXRpb24pCgogICAgICAgIGZvciAmaGFuZGxlIGluIGluX3JhbmdlIHsKICAgICAgICAgIGVuZW15IDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgICAgICAgZG1nIDo9IC5lbmVteV9mb2RkZXIgaW4gZW5lbXkuZmxhZ3MgPyBlbmVteS5zdGF0cy5oZWFsdGggOiAxMAogICAgICAgICAgZW5lbXkuc3RhdHMuaGVhbHRoIC09IGRtZwogICAgICAgICAgaWYgZW5lbXkuc3RhdHMuaGVhbHRoIDw9IDAgewogICAgICAgICAgICBlbmVteS5mbGFncyArPSB7LmRlYWR9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBjYW1lcmFfc2hha2UoLnNtYWxsKQogICAgICAgIC8vcGxheWVyLnRhcmdldCA9IHplcm9faGFuZGxlCiAgICAgIH0KICAgIH0",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACRAAAAAAAADdDAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"left_delete",
					null,
					"AQAAAOAMAAAAAAAA4AwAAAAAAAABAAAAfQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QwAAAAAAADhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport \"core:slice\"\r\nimport \"core:sort\"\r\nimport rl \"vendor:raylib\"\r\n\r\nplayer_handle: EntityHandle\r\n\r\n//ground plane\r\nground_plane_p1 :: float3{-1000, 0, -1000}\r\nground_plane_p2 :: float3{-1000, 0, 1000}\r\nground_plane_p3 :: float3{1000, 0, 1000}\r\nground_plane_p4 :: float3{1000, 0, -1000}\r\n\r\nanimCurrentFrame: i32\r\nanimCount: i32\r\nanimIndex: i32\r\n\r\nplayer_model: rl.Model\r\nplayer_anims: [^]rl.ModelAnimation\r\nplayer_shader: rl.Shader\r\nanims_loaded: bool\r\nplayer_accel: float\r\nsynt_atlas_1: rl.Texture\r\nplayer_fresnel_color :: rl.Color{114, 232, 195, 255}\r\nloc_fresnel: int\r\n\r\n\r\ninit_player :: proc() \r\n{\r\n  loc_fresnel = rl.GetShaderLocation(default_shader, \"fresnelColor\")\r\n  player_handle = create_entity()\r\n  player := get_entity(player_handle)\r\n  player.flags = {.player}\r\n  player.position = float3_zero\r\n  player.rotation = quaternion_identity\r\n  init_player_stats()\r\n  append(&update_procs, update_player)\r\n  append(&draw_procs, draw_player)\r\n  //create_crossbow()\r\n  create_shotgun()\r\n\r\n  //animation test\r\n  animCount = 0\r\n  animIndex = 0\r\n  animCurrentFrame = 0\r\n\r\n  //material and shader setup\r\n  idx := load_entity_model(\"player.glb\")\r\n  player_model = entity_models[idx]\r\n  for i in 0 ..< player_model.meshCount {\r\n    smooth_all_mesh_normals(&player_model.meshes[i])\r\n  }\r\n\r\n  assign_material_all_mats(&player_model, synty_mat)\r\n\r\n  //player_model.materials[0] = synty_mat\r\n  //player_model.materials[1] = synty_mat\r\n  //player_model.materials[2] = synty_mat\r\n  if animCount != 0 {\r\n    anims_loaded = true\r\n  }\r\n}\r\n\r\n\r\nupdate_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  player.stats.speed = 5\r\n  accel: float = 40\r\n  decel: float = 50\r\n\r\n  // read input, construct move vector and transform move vector by camera rotation so its camera relative\r\n  moveVec := norm(float3{core_input.moveHorizontal, 0, core_input.moveVertical})\r\n  moveVec = rl.Vector3RotateByAxisAngle(moveVec, float3_up, RAD_45)\r\n  // calculate desired velocity based on input\r\n  desiredVelocity := moveVec * player.stats.speed\r\n\r\n  // apply acceleration or deceleration\r\n  if linalg.length(moveVec) > 0 {\r\n    // Accelerate towards desired velocity\r\n    player_velocity = linalg.lerp(player_velocity, desiredVelocity, accel * dt)\r\n  } else {\r\n    // Decelerate when no input\r\n    currentSpeed := linalg.length(player_velocity)\r\n    if currentSpeed > 0 {\r\n      decelAmount := decel * dt\r\n      newSpeed := max(0, currentSpeed - decelAmount)\r\n      player_velocity = norm(player_velocity) * newSpeed\r\n    }\r\n  }\r\n\r\n  knockback := float3_zero\r\n  if player.knockback.power > 0.01 do knockback = player.knockback.current_offset\r\n\r\n  player.position += knockback + player_velocity * dt\r\n\r\n\r\n  //trigger dash\r\n  if core_input.ability_triggered && time_now > ts_dash_ready && is_valid_handle(player.target) {\r\n    dashing = true\r\n    targetPos := get_entity(player.target).position\r\n    dirVec := targetPos - player.position\r\n    dashing_start = player.position\r\n    dashing_end = targetPos - norm(dirVec) * 1.5\r\n    ts_dash_start = time_now\r\n  }\r\n\r\n  // player rotation\r\n  mousePos := get_mouse_pos_world()\r\n  player.rotation = look_rot(player.position, mousePos, float3_up)\r\n  player.forward = norm(mousePos - player.position)\r\n  player_model.transform = matrix_trs(float3_zero, float3_one, player.rotation)\r\n\r\n\r\n  if anims_loaded {\r\n    anim := player_anims[animIndex]\r\n    animCurrentFrame = (animCurrentFrame + 1) % anim.frameCount\r\n    rl.UpdateModelAnimation(player_model, anim, animCurrentFrame)\r\n  }\r\n}\r\n\r\n\r\ndraw_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  fresnel := rl.ColorNormalize(player_fresnel_color)\r\n  black := rl.ColorNormalize(rl.BLACK)\r\n\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &fresnel, .VEC4)\r\n  rl.DrawModel(player_model, player.position, 1, rl.WHITE)\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &black, .VEC4)\r\n\r\n  if is_valid_handle(player.target) {\r\n    rl.DrawSphere(get_entity(player.target).position + float3_up * 3, 0.25, rl.BLUE)\r\n  }\r\n}\r\n\r\nget_mouse_pos_world :: proc() -> float3 \r\n{\r\n  ray := rl.GetScreenToWorldRay(rl.GetMousePosition(), camera)\r\n  hitInfo: rl.RayCollision\r\n  hitInfo = rl.GetRayCollisionQuad(ray, ground_plane_p1, ground_plane_p2, ground_plane_p3, ground_plane_p4)\r\n  return hitInfo.point\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 152
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAgxAAAAAAAACKEAAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6Zm10IgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgImNvcmU6c2xpY2UiCmltcG9ydCAiY29yZTpzb3J0IgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpwbGF5ZXJfaGFuZGxlOiBFbnRpdHlIYW5kbGUKCi8vZ3JvdW5kIHBsYW5lCmdyb3VuZF9wbGFuZV9wMSA6OiBmbG9hdDN7LTEwMDAsIDAsIC0xMDAwfQpncm91bmRfcGxhbmVfcDIgOjogZmxvYXQzey0xMDAwLCAwLCAxMDAwfQpncm91bmRfcGxhbmVfcDMgOjogZmxvYXQzezEwMDAsIDAsIDEwMDB9Cmdyb3VuZF9wbGFuZV9wNCA6OiBmbG9hdDN7MTAwMCwgMCwgLTEwMDB9CgphbmltQ3VycmVudEZyYW1lOiBpMzIKYW5pbUNvdW50OiBpMzIKYW5pbUluZGV4OiBpMzIKCnBsYXllcl9tb2RlbDogcmwuTW9kZWwKcGxheWVyX2FuaW1zOiBbXl1ybC5Nb2RlbEFuaW1hdGlvbgpwbGF5ZXJfc2hhZGVyOiBybC5TaGFkZXIKYW5pbXNfbG9hZGVkOiBib29sCnBsYXllcl9hY2NlbDogZmxvYXQKc3ludF9hdGxhc18xOiBybC5UZXh0dXJlCnBsYXllcl9mcmVzbmVsX2NvbG9yIDo6IHJsLkNvbG9yezExNCwgMjMyLCAxOTUsIDI1NX0KbG9jX2ZyZXNuZWw6IGludAoKCmluaXRfcGxheWVyIDo6IHByb2MoKSAKewogIGxvY19mcmVzbmVsID0gcmwuR2V0U2hhZGVyTG9jYXRpb24oZGVmYXVsdF9zaGFkZXIsICJmcmVzbmVsQ29sb3IiKQogIHBsYXllcl9oYW5kbGUgPSBjcmVhdGVfZW50aXR5KCkKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIHBsYXllci5mbGFncyA9IHsucGxheWVyfQogIHBsYXllci5wb3NpdGlvbiA9IGZsb2F0M196ZXJvCiAgcGxheWVyLnJvdGF0aW9uID0gcXVhdGVybmlvbl9pZGVudGl0eQogIGluaXRfcGxheWVyX3N0YXRzKCkKICBhcHBlbmQoJnVwZGF0ZV9wcm9jcywgdXBkYXRlX3BsYXllcikKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfcGxheWVyKQogIC8vY3JlYXRlX2Nyb3NzYm93KCkKICBjcmVhdGVfc2hvdGd1bigpCgogIC8vYW5pbWF0aW9uIHRlc3QKICBhbmltQ291bnQgPSAwCiAgYW5pbUluZGV4ID0gMAogIGFuaW1DdXJyZW50RnJhbWUgPSAwCgogIC8vbWF0ZXJpYWwgYW5kIHNoYWRlciBzZXR1cAogIGlkeCA6PSBsb2FkX2VudGl0eV9tb2RlbCgicGxheWVyLmdsYiIpCiAgcGxheWVyX21vZGVsID0gZW50aXR5X21vZGVsc1tpZHhdCiAgZm9yIGkgaW4gMCAuLjwgcGxheWVyX21vZGVsLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmcGxheWVyX21vZGVsLm1lc2hlc1tpXSkKICB9CgogIGFzc2lnbl9tYXRlcmlhbF9hbGxfbWF0cygmcGxheWVyX21vZGVsLCBzeW50eV9tYXQpCgogIC8vcGxheWVyX21vZGVsLm1hdGVyaWFsc1swXSA9IHN5bnR5X21hdAogIC8vcGxheWVyX21vZGVsLm1hdGVyaWFsc1sxXSA9IHN5bnR5X21hdAogIC8vcGxheWVyX21vZGVsLm1hdGVyaWFsc1syXSA9IHN5bnR5X21hdAogIGlmIGFuaW1Db3VudCAhPSAwIHsKICAgIGFuaW1zX2xvYWRlZCA9IHRydWUKICB9Cn0KCgp1cGRhdGVfcGxheWVyIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfZW50aXR5KHBsYXllcl9oYW5kbGUpCiAgcGxheWVyLnN0YXRzLnNwZWVkID0gNQogIGFjY2VsOiBmbG9hdCA9IDQwCiAgZGVjZWw6IGZsb2F0ID0gNTAKCiAgLy8gcmVhZCBpbnB1dCwgY29uc3RydWN0IG1vdmUgdmVjdG9yIGFuZCB0cmFuc2Zvcm0gbW92ZSB2ZWN0b3IgYnkgY2FtZXJhIHJvdGF0aW9uIHNvIGl0cyBjYW1lcmEgcmVsYXRpdmUKICBtb3ZlVmVjIDo9IG5vcm0oZmxvYXQze2NvcmVfaW5wdXQubW92ZUhvcml6b250YWwsIDAsIGNvcmVfaW5wdXQubW92ZVZlcnRpY2FsfSkKICBtb3ZlVmVjID0gcmwuVmVjdG9yM1JvdGF0ZUJ5QXhpc0FuZ2xlKG1vdmVWZWMsIGZsb2F0M191cCwgUkFEXzQ1KQogIC8vIGNhbGN1bGF0ZSBkZXNpcmVkIHZlbG9jaXR5IGJhc2VkIG9uIGlucHV0CiAgZGVzaXJlZFZlbG9jaXR5IDo9IG1vdmVWZWMgKiBwbGF5ZXIuc3RhdHMuc3BlZWQKCiAgLy8gYXBwbHkgYWNjZWxlcmF0aW9uIG9yIGRlY2VsZXJhdGlvbgogIGlmIGxpbmFsZy5sZW5ndGgobW92ZVZlYykgPiAwIHsKICAgIC8vIEFjY2VsZXJhdGUgdG93YXJkcyBkZXNpcmVkIHZlbG9jaXR5CiAgICBwbGF5ZXJfdmVsb2NpdHkgPSBsaW5hbGcubGVycChwbGF5ZXJfdmVsb2NpdHksIGRlc2lyZWRWZWxvY2l0eSwgYWNjZWwgKiBkdCkKICB9IGVsc2UgewogICAgLy8gRGVjZWxlcmF0ZSB3aGVuIG5vIGlucHV0CiAgICBjdXJyZW50U3BlZWQgOj0gbGluYWxnLmxlbmd0aChwbGF5ZXJfdmVsb2NpdHkpCiAgICBpZiBjdXJyZW50U3BlZWQgPiAwIHsKICAgICAgZGVjZWxBbW91bnQgOj0gZGVjZWwgKiBkdAogICAgICBuZXdTcGVlZCA6PSBtYXgoMCwgY3VycmVudFNwZWVkIC0gZGVjZWxBbW91bnQpCiAgICAgIHBsYXllcl92ZWxvY2l0eSA9IG5vcm0ocGxheWVyX3ZlbG9jaXR5KSAqIG5ld1NwZWVkCiAgICB9CiAgfQoKICBrbm9ja2JhY2sgOj0gZmxvYXQzX3plcm8KICBpZiBwbGF5ZXIua25vY2tiYWNrLnBvd2VyID4gMC4wMSBkbyBrbm9ja2JhY2sgPSBwbGF5ZXIua25vY2tiYWNrLmN1cnJlbnRfb2Zmc2V0CgogIHBsYXllci5wb3NpdGlvbiArPSBrbm9ja2JhY2sgKyBwbGF5ZXJfdmVsb2NpdHkgKiBkdAoKCiAgLy90cmlnZ2VyIGRhc2gKICBpZiBjb3JlX2lucHV0LmFiaWxpdHlfdHJpZ2dlcmVkICYmIHRpbWVfbm93ID4gdHNfZGFzaF9yZWFkeSAmJiBpc192YWxpZF9oYW5kbGUocGxheWVyLnRhcmdldCkgewogICAgZGFzaGluZyA9IHRydWUKICAgIHRhcmdldFBvcyA6PSBnZXRfZW50aXR5KHBsYXllci50YXJnZXQpLnBvc2l0aW9uCiAgICBkaXJWZWMgOj0gdGFyZ2V0UG9zIC0gcGxheWVyLnBvc2l0aW9uCiAgICBkYXNoaW5nX3N0YXJ0ID0gcGxheWVyLnBvc2l0aW9uCiAgICBkYXNoaW5nX2VuZCA9IHRhcmdldFBvcyAtIG5vcm0oZGlyVmVjKSAqIDEuNQogICAgdHNfZGFzaF9zdGFydCA9IHRpbWVfbm93CiAgfQoKICAvLyBwbGF5ZXIgcm90YXRpb24KICBtb3VzZVBvcyA6PSBnZXRfbW91c2VfcG9zX3dvcmxkKCkKICBwbGF5ZXIucm90YXRpb24gPSBsb29rX3JvdChwbGF5ZXIucG9zaXRpb24sIG1vdXNlUG9zLCBmbG9hdDNfdXApCiAgcGxheWVyLmZvcndhcmQgPSBub3JtKG1vdXNlUG9zIC0gcGxheWVyLnBvc2l0aW9uKQogIHBsYXllcl9tb2RlbC50cmFuc2Zvcm0gPSBtYXRyaXhfdHJzKGZsb2F0M196ZXJvLCBmbG9hdDNfb25lLCBwbGF5ZXIucm90YXRpb24pCgoKICAKICAKCiAgaWYgYW5pbXNfbG9hZGVkIHsKICAgIGFuaW0gOj0gcGxheWVyX2FuaW1zW2FuaW1JbmRleF0KICAgIGFuaW1DdXJyZW50RnJhbWUgPSAoYW5pbUN1cnJlbnRGcmFtZSArIDEpICUgYW5pbS5mcmFtZUNvdW50CiAgICBybC5VcGRhdGVNb2RlbEFuaW1hdGlvbihwbGF5ZXJfbW9kZWwsIGFuaW0sIGFuaW1DdXJyZW50RnJhbWUpCiAgfQp9CgoKZHJhd19wbGF5ZXIgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9lbnRpdHkocGxheWVyX2hhbmRsZSkKICBmcmVzbmVsIDo9IHJsLkNvbG9yTm9ybWFsaXplKHBsYXllcl9mcmVzbmVsX2NvbG9yKQogIGJsYWNrIDo9IHJsLkNvbG9yTm9ybWFsaXplKHJsLkJMQUNLKQoKICBybC5TZXRTaGFkZXJWYWx1ZShkZWZhdWx0X3NoYWRlciwgbG9jX2ZyZXNuZWwsICZmcmVzbmVsLCAuVkVDNCkKICBybC5EcmF3TW9kZWwocGxheWVyX21vZGVsLCBwbGF5ZXIucG9zaXRpb24sIDEsIHJsLldISVRFKQogIHJsLlNldFNoYWRlclZhbHVlKGRlZmF1bHRfc2hhZGVyLCBsb2NfZnJlc25lbCwgJmJsYWNrLCAuVkVDNCkKCiAgaWYgaXNfdmFsaWRfaGFuZGxlKHBsYXllci50YXJnZXQpIHsKICAgIHJsLkRyYXdTcGhlcmUoZ2V0X2VudGl0eShwbGF5ZXIudGFyZ2V0KS5wb3NpdGlvbiArIGZsb2F0M191cCAqIDMsIDAuMjUsIHJsLkJMVUUpCiAgfQp9CgpnZXRfbW91c2VfcG9zX3dvcmxkIDo6IHByb2MoKSAtPiBmbG9hdDMgCnsKICByYXkgOj0gcmwuR2V0U2NyZWVuVG9Xb3JsZFJheShybC5HZXRNb3VzZVBvc2l0aW9uKCksIGNhbWVyYSkKICBoaXRJbmZvOiBybC5SYXlDb2xsaXNpb24KICBoaXRJbmZvID0gcmwuR2V0UmF5Q29sbGlzaW9uUXVhZChyYXksIGdyb3VuZF9wbGFuZV9wMSwgZ3JvdW5kX3BsYW5lX3AyLCBncm91bmRfcGxhbmVfcDMsIGdyb3VuZF9wbGFuZV9wNCkKICByZXR1cm4gaGl0SW5mby5wb2ludAp9Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4AwAAAAAAADgDAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport \"core:slice\"\r\nimport \"core:sort\"\r\nimport rl \"vendor:raylib\"\r\n\r\nplayer_handle: EntityHandle\r\n\r\n//ground plane\r\nground_plane_p1 :: float3{-1000, 0, -1000}\r\nground_plane_p2 :: float3{-1000, 0, 1000}\r\nground_plane_p3 :: float3{1000, 0, 1000}\r\nground_plane_p4 :: float3{1000, 0, -1000}\r\n\r\nanimCurrentFrame: i32\r\nanimCount: i32\r\nanimIndex: i32\r\n\r\nplayer_model: rl.Model\r\nplayer_anims: [^]rl.ModelAnimation\r\nplayer_shader: rl.Shader\r\nanims_loaded: bool\r\nplayer_accel: float\r\nsynt_atlas_1: rl.Texture\r\nplayer_fresnel_color :: rl.Color{114, 232, 195, 255}\r\nloc_fresnel: int\r\n\r\n\r\ninit_player :: proc() \r\n{\r\n  loc_fresnel = rl.GetShaderLocation(default_shader, \"fresnelColor\")\r\n  player_handle = create_entity()\r\n  player := get_entity(player_handle)\r\n  player.flags = {.player}\r\n  player.position = float3_zero\r\n  player.rotation = quaternion_identity\r\n  init_player_stats()\r\n  append(&update_procs, update_player)\r\n  append(&draw_procs, draw_player)\r\n  //create_crossbow()\r\n  create_shotgun()\r\n\r\n  //animation test\r\n  animCount = 0\r\n  animIndex = 0\r\n  animCurrentFrame = 0\r\n\r\n  //material and shader setup\r\n  idx := load_entity_model(\"player.glb\")\r\n  player_model = entity_models[idx]\r\n  for i in 0 ..< player_model.meshCount {\r\n    smooth_all_mesh_normals(&player_model.meshes[i])\r\n  }\r\n\r\n  assign_material_all_mats(&player_model, synty_mat)\r\n\r\n  //player_model.materials[0] = synty_mat\r\n  //player_model.materials[1] = synty_mat\r\n  //player_model.materials[2] = synty_mat\r\n  if animCount != 0 {\r\n    anims_loaded = true\r\n  }\r\n}\r\n\r\n\r\nupdate_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  player.stats.speed = 5\r\n  accel: float = 40\r\n  decel: float = 50\r\n\r\n  // read input, construct move vector and transform move vector by camera rotation so its camera relative\r\n  moveVec := norm(float3{core_input.moveHorizontal, 0, core_input.moveVertical})\r\n  moveVec = rl.Vector3RotateByAxisAngle(moveVec, float3_up, RAD_45)\r\n  // calculate desired velocity based on input\r\n  desiredVelocity := moveVec * player.stats.speed\r\n\r\n  // apply acceleration or deceleration\r\n  if linalg.length(moveVec) > 0 {\r\n    // Accelerate towards desired velocity\r\n    player_velocity = linalg.lerp(player_velocity, desiredVelocity, accel * dt)\r\n  } else {\r\n    // Decelerate when no input\r\n    currentSpeed := linalg.length(player_velocity)\r\n    if currentSpeed > 0 {\r\n      decelAmount := decel * dt\r\n      newSpeed := max(0, currentSpeed - decelAmount)\r\n      player_velocity = norm(player_velocity) * newSpeed\r\n    }\r\n  }\r\n\r\n  knockback := float3_zero\r\n  if player.knockback.power > 0.01 do knockback = player.knockback.current_offset\r\n\r\n  player.position += knockback + player_velocity * dt\r\n\r\n\r\n  //trigger dash\r\n  if core_input.ability_triggered && time_now > ts_dash_ready && is_valid_handle(player.target) {\r\n    dashing = true\r\n    targetPos := get_entity(player.target).position\r\n    dirVec := targetPos - player.position\r\n    dashing_start = player.position\r\n    dashing_end = targetPos - norm(dirVec) * 1.5\r\n    ts_dash_start = time_now\r\n  }\r\n\r\n  // player rotation\r\n  mousePos := get_mouse_pos_world()\r\n  player.rotation = look_rot(player.position, mousePos, float3_up)\r\n  player.forward = norm(mousePos - player.position)\r\n  player_model.transform = matrix_trs(float3_zero, float3_one, player.rotation)\r\n\r\n\r\n  if anims_loaded {\r\n    anim := player_anims[animIndex]\r\n    animCurrentFrame = (animCurrentFrame + 1) % anim.frameCount\r\n    rl.UpdateModelAnimation(player_model, anim, animCurrentFrame)\r\n  }\r\n}\r\n\r\n\r\ndraw_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  fresnel := rl.ColorNormalize(player_fresnel_color)\r\n  black := rl.ColorNormalize(rl.BLACK)\r\n\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &fresnel, .VEC4)\r\n  rl.DrawModel(player_model, player.position, 1, rl.WHITE)\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &black, .VEC4)\r\n\r\n  if is_valid_handle(player.target) {\r\n    rl.DrawSphere(get_entity(player.target).position + float3_up * 3, 0.25, rl.BLUE)\r\n  }\r\n}\r\n\r\nget_mouse_pos_world :: proc() -> float3 \r\n{\r\n  ray := rl.GetScreenToWorldRay(rl.GetMousePosition(), camera)\r\n  hitInfo: rl.RayCollision\r\n  hitInfo = rl.GetRayCollisionQuad(ray, ground_plane_p1, ground_plane_p2, ground_plane_p3, ground_plane_p4)\r\n  return hitInfo.point\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 149
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAgxAAAAAAAACDEAAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6Zm10IgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgImNvcmU6c2xpY2UiCmltcG9ydCAiY29yZTpzb3J0IgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpwbGF5ZXJfaGFuZGxlOiBFbnRpdHlIYW5kbGUKCi8vZ3JvdW5kIHBsYW5lCmdyb3VuZF9wbGFuZV9wMSA6OiBmbG9hdDN7LTEwMDAsIDAsIC0xMDAwfQpncm91bmRfcGxhbmVfcDIgOjogZmxvYXQzey0xMDAwLCAwLCAxMDAwfQpncm91bmRfcGxhbmVfcDMgOjogZmxvYXQzezEwMDAsIDAsIDEwMDB9Cmdyb3VuZF9wbGFuZV9wNCA6OiBmbG9hdDN7MTAwMCwgMCwgLTEwMDB9CgphbmltQ3VycmVudEZyYW1lOiBpMzIKYW5pbUNvdW50OiBpMzIKYW5pbUluZGV4OiBpMzIKCnBsYXllcl9tb2RlbDogcmwuTW9kZWwKcGxheWVyX2FuaW1zOiBbXl1ybC5Nb2RlbEFuaW1hdGlvbgpwbGF5ZXJfc2hhZGVyOiBybC5TaGFkZXIKYW5pbXNfbG9hZGVkOiBib29sCnBsYXllcl9hY2NlbDogZmxvYXQKc3ludF9hdGxhc18xOiBybC5UZXh0dXJlCnBsYXllcl9mcmVzbmVsX2NvbG9yIDo6IHJsLkNvbG9yezExNCwgMjMyLCAxOTUsIDI1NX0KbG9jX2ZyZXNuZWw6IGludAoKCmluaXRfcGxheWVyIDo6IHByb2MoKSAKewogIGxvY19mcmVzbmVsID0gcmwuR2V0U2hhZGVyTG9jYXRpb24oZGVmYXVsdF9zaGFkZXIsICJmcmVzbmVsQ29sb3IiKQogIHBsYXllcl9oYW5kbGUgPSBjcmVhdGVfZW50aXR5KCkKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIHBsYXllci5mbGFncyA9IHsucGxheWVyfQogIHBsYXllci5wb3NpdGlvbiA9IGZsb2F0M196ZXJvCiAgcGxheWVyLnJvdGF0aW9uID0gcXVhdGVybmlvbl9pZGVudGl0eQogIGluaXRfcGxheWVyX3N0YXRzKCkKICBhcHBlbmQoJnVwZGF0ZV9wcm9jcywgdXBkYXRlX3BsYXllcikKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfcGxheWVyKQogIC8vY3JlYXRlX2Nyb3NzYm93KCkKICBjcmVhdGVfc2hvdGd1bigpCgogIC8vYW5pbWF0aW9uIHRlc3QKICBhbmltQ291bnQgPSAwCiAgYW5pbUluZGV4ID0gMAogIGFuaW1DdXJyZW50RnJhbWUgPSAwCgogIC8vbWF0ZXJpYWwgYW5kIHNoYWRlciBzZXR1cAogIGlkeCA6PSBsb2FkX2VudGl0eV9tb2RlbCgicGxheWVyLmdsYiIpCiAgcGxheWVyX21vZGVsID0gZW50aXR5X21vZGVsc1tpZHhdCiAgZm9yIGkgaW4gMCAuLjwgcGxheWVyX21vZGVsLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmcGxheWVyX21vZGVsLm1lc2hlc1tpXSkKICB9CgogIGFzc2lnbl9tYXRlcmlhbF9hbGxfbWF0cygmcGxheWVyX21vZGVsLCBzeW50eV9tYXQpCgogIC8vcGxheWVyX21vZGVsLm1hdGVyaWFsc1swXSA9IHN5bnR5X21hdAogIC8vcGxheWVyX21vZGVsLm1hdGVyaWFsc1sxXSA9IHN5bnR5X21hdAogIC8vcGxheWVyX21vZGVsLm1hdGVyaWFsc1syXSA9IHN5bnR5X21hdAogIGlmIGFuaW1Db3VudCAhPSAwIHsKICAgIGFuaW1zX2xvYWRlZCA9IHRydWUKICB9Cn0KCgp1cGRhdGVfcGxheWVyIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfZW50aXR5KHBsYXllcl9oYW5kbGUpCiAgcGxheWVyLnN0YXRzLnNwZWVkID0gNQogIGFjY2VsOiBmbG9hdCA9IDQwCiAgZGVjZWw6IGZsb2F0ID0gNTAKCiAgLy8gcmVhZCBpbnB1dCwgY29uc3RydWN0IG1vdmUgdmVjdG9yIGFuZCB0cmFuc2Zvcm0gbW92ZSB2ZWN0b3IgYnkgY2FtZXJhIHJvdGF0aW9uIHNvIGl0cyBjYW1lcmEgcmVsYXRpdmUKICBtb3ZlVmVjIDo9IG5vcm0oZmxvYXQze2NvcmVfaW5wdXQubW92ZUhvcml6b250YWwsIDAsIGNvcmVfaW5wdXQubW92ZVZlcnRpY2FsfSkKICBtb3ZlVmVjID0gcmwuVmVjdG9yM1JvdGF0ZUJ5QXhpc0FuZ2xlKG1vdmVWZWMsIGZsb2F0M191cCwgUkFEXzQ1KQogIC8vIGNhbGN1bGF0ZSBkZXNpcmVkIHZlbG9jaXR5IGJhc2VkIG9uIGlucHV0CiAgZGVzaXJlZFZlbG9jaXR5IDo9IG1vdmVWZWMgKiBwbGF5ZXIuc3RhdHMuc3BlZWQKCiAgLy8gYXBwbHkgYWNjZWxlcmF0aW9uIG9yIGRlY2VsZXJhdGlvbgogIGlmIGxpbmFsZy5sZW5ndGgobW92ZVZlYykgPiAwIHsKICAgIC8vIEFjY2VsZXJhdGUgdG93YXJkcyBkZXNpcmVkIHZlbG9jaXR5CiAgICBwbGF5ZXJfdmVsb2NpdHkgPSBsaW5hbGcubGVycChwbGF5ZXJfdmVsb2NpdHksIGRlc2lyZWRWZWxvY2l0eSwgYWNjZWwgKiBkdCkKICB9IGVsc2UgewogICAgLy8gRGVjZWxlcmF0ZSB3aGVuIG5vIGlucHV0CiAgICBjdXJyZW50U3BlZWQgOj0gbGluYWxnLmxlbmd0aChwbGF5ZXJfdmVsb2NpdHkpCiAgICBpZiBjdXJyZW50U3BlZWQgPiAwIHsKICAgICAgZGVjZWxBbW91bnQgOj0gZGVjZWwgKiBkdAogICAgICBuZXdTcGVlZCA6PSBtYXgoMCwgY3VycmVudFNwZWVkIC0gZGVjZWxBbW91bnQpCiAgICAgIHBsYXllcl92ZWxvY2l0eSA9IG5vcm0ocGxheWVyX3ZlbG9jaXR5KSAqIG5ld1NwZWVkCiAgICB9CiAgfQoKICBrbm9ja2JhY2sgOj0gZmxvYXQzX3plcm8KICBpZiBwbGF5ZXIua25vY2tiYWNrLnBvd2VyID4gMC4wMSBkbyBrbm9ja2JhY2sgPSBwbGF5ZXIua25vY2tiYWNrLmN1cnJlbnRfb2Zmc2V0CgogIHBsYXllci5wb3NpdGlvbiArPSBrbm9ja2JhY2sgKyBwbGF5ZXJfdmVsb2NpdHkgKiBkdAoKCiAgLy90cmlnZ2VyIGRhc2gKICBpZiBjb3JlX2lucHV0LmFiaWxpdHlfdHJpZ2dlcmVkICYmIHRpbWVfbm93ID4gdHNfZGFzaF9yZWFkeSAmJiBpc192YWxpZF9oYW5kbGUocGxheWVyLnRhcmdldCkgewogICAgZGFzaGluZyA9IHRydWUKICAgIHRhcmdldFBvcyA6PSBnZXRfZW50aXR5KHBsYXllci50YXJnZXQpLnBvc2l0aW9uCiAgICBkaXJWZWMgOj0gdGFyZ2V0UG9zIC0gcGxheWVyLnBvc2l0aW9uCiAgICBkYXNoaW5nX3N0YXJ0ID0gcGxheWVyLnBvc2l0aW9uCiAgICBkYXNoaW5nX2VuZCA9IHRhcmdldFBvcyAtIG5vcm0oZGlyVmVjKSAqIDEuNQogICAgdHNfZGFzaF9zdGFydCA9IHRpbWVfbm93CiAgfQoKICAvLyBwbGF5ZXIgcm90YXRpb24KICBtb3VzZVBvcyA6PSBnZXRfbW91c2VfcG9zX3dvcmxkKCkKICBwbGF5ZXIucm90YXRpb24gPSBsb29rX3JvdChwbGF5ZXIucG9zaXRpb24sIG1vdXNlUG9zLCBmbG9hdDNfdXApCiAgcGxheWVyLmZvcndhcmQgPSBub3JtKG1vdXNlUG9zIC0gcGxheWVyLnBvc2l0aW9uKQogIHBsYXllcl9tb2RlbC50cmFuc2Zvcm0gPSBtYXRyaXhfdHJzKGZsb2F0M196ZXJvLCBmbG9hdDNfb25lLCBwbGF5ZXIucm90YXRpb24pCgoKICBpZiBhbmltc19sb2FkZWQgewogICAgYW5pbSA6PSBwbGF5ZXJfYW5pbXNbYW5pbUluZGV4XQogICAgYW5pbUN1cnJlbnRGcmFtZSA9IChhbmltQ3VycmVudEZyYW1lICsgMSkgJSBhbmltLmZyYW1lQ291bnQKICAgIHJsLlVwZGF0ZU1vZGVsQW5pbWF0aW9uKHBsYXllcl9tb2RlbCwgYW5pbSwgYW5pbUN1cnJlbnRGcmFtZSkKICB9Cn0KCgpkcmF3X3BsYXllciA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIGZyZXNuZWwgOj0gcmwuQ29sb3JOb3JtYWxpemUocGxheWVyX2ZyZXNuZWxfY29sb3IpCiAgYmxhY2sgOj0gcmwuQ29sb3JOb3JtYWxpemUocmwuQkxBQ0spCgogIHJsLlNldFNoYWRlclZhbHVlKGRlZmF1bHRfc2hhZGVyLCBsb2NfZnJlc25lbCwgJmZyZXNuZWwsIC5WRUM0KQogIHJsLkRyYXdNb2RlbChwbGF5ZXJfbW9kZWwsIHBsYXllci5wb3NpdGlvbiwgMSwgcmwuV0hJVEUpCiAgcmwuU2V0U2hhZGVyVmFsdWUoZGVmYXVsdF9zaGFkZXIsIGxvY19mcmVzbmVsLCAmYmxhY2ssIC5WRUM0KQoKICBpZiBpc192YWxpZF9oYW5kbGUocGxheWVyLnRhcmdldCkgewogICAgcmwuRHJhd1NwaGVyZShnZXRfZW50aXR5KHBsYXllci50YXJnZXQpLnBvc2l0aW9uICsgZmxvYXQzX3VwICogMywgMC4yNSwgcmwuQkxVRSkKICB9Cn0KCmdldF9tb3VzZV9wb3Nfd29ybGQgOjogcHJvYygpIC0+IGZsb2F0MyAKewogIHJheSA6PSBybC5HZXRTY3JlZW5Ub1dvcmxkUmF5KHJsLkdldE1vdXNlUG9zaXRpb24oKSwgY2FtZXJhKQogIGhpdEluZm86IHJsLlJheUNvbGxpc2lvbgogIGhpdEluZm8gPSBybC5HZXRSYXlDb2xsaXNpb25RdWFkKHJheSwgZ3JvdW5kX3BsYW5lX3AxLCBncm91bmRfcGxhbmVfcDIsIGdyb3VuZF9wbGFuZV9wMywgZ3JvdW5kX3BsYW5lX3A0KQogIHJldHVybiBoaXRJbmZvLnBvaW50Cn0K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gwAAAAAAADaDAAAAAAAAAAAAAAAAAAA"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "\ncreateshi"
					},
					"CgAAABcEAAAAAAAAGgQAAAAAAAAAAAAAGgQAAAAAAAAbBAAAAAAAAAAAAAAbBAAAAAAAABwEAAAAAAAAAAAAABwEAAAAAAAAHQQAAAAAAAAAAAAAHQQAAAAAAAAeBAAAAAAAAAAAAAAeBAAAAAAAAB8EAAAAAAAAAAAAAB8EAAAAAAAAIAQAAAAAAAAAAAAAIAQAAAAAAAAhBAAAAAAAAAAAAAAhBAAAAAAAACIEAAAAAAAAAAAAACIEAAAAAAAAIwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFwQAAAAAAAAXBAAAAAAAAAAAAAAAEHVA"
				],
				[
					98,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "create_shield_dash()"
					},
					"AgAAABoEAAAAAAAAGgQAAAAAAAAJAAAAY3JlYXRlc2hpGgQAAAAAAAAsBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwQAAAAAAAAjBAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACwEAAAAAAAALgQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALAQAAAAAAAAsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport \"core:slice\"\r\nimport \"core:sort\"\r\nimport rl \"vendor:raylib\"\r\n\r\nplayer_handle: EntityHandle\r\n\r\n//ground plane\r\nground_plane_p1 :: float3{-1000, 0, -1000}\r\nground_plane_p2 :: float3{-1000, 0, 1000}\r\nground_plane_p3 :: float3{1000, 0, 1000}\r\nground_plane_p4 :: float3{1000, 0, -1000}\r\n\r\nanimCurrentFrame: i32\r\nanimCount: i32\r\nanimIndex: i32\r\n\r\nplayer_model: rl.Model\r\nplayer_anims: [^]rl.ModelAnimation\r\nplayer_shader: rl.Shader\r\nanims_loaded: bool\r\nplayer_accel: float\r\nsynt_atlas_1: rl.Texture\r\nplayer_fresnel_color :: rl.Color{114, 232, 195, 255}\r\nloc_fresnel: int\r\n\r\n\r\ninit_player :: proc() \r\n{\r\n  loc_fresnel = rl.GetShaderLocation(default_shader, \"fresnelColor\")\r\n  player_handle = create_entity()\r\n  player := get_entity(player_handle)\r\n  player.flags = {.player}\r\n  player.position = float3_zero\r\n  player.rotation = quaternion_identity\r\n  init_player_stats()\r\n  append(&update_procs, update_player)\r\n  append(&draw_procs, draw_player)\r\n  //create_crossbow()\r\n  create_shotgun()\r\n  create_shield_dash()\r\n\r\n  //animation test\r\n  animCount = 0\r\n  animIndex = 0\r\n  animCurrentFrame = 0\r\n\r\n  //material and shader setup\r\n  idx := load_entity_model(\"player.glb\")\r\n  player_model = entity_models[idx]\r\n  for i in 0 ..< player_model.meshCount {\r\n    smooth_all_mesh_normals(&player_model.meshes[i])\r\n  }\r\n\r\n  assign_material_all_mats(&player_model, synty_mat)\r\n\r\n  //player_model.materials[0] = synty_mat\r\n  //player_model.materials[1] = synty_mat\r\n  //player_model.materials[2] = synty_mat\r\n  if animCount != 0 {\r\n    anims_loaded = true\r\n  }\r\n}\r\n\r\n\r\nupdate_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  player.stats.speed = 5\r\n  accel: float = 40\r\n  decel: float = 50\r\n\r\n  // read input, construct move vector and transform move vector by camera rotation so its camera relative\r\n  moveVec := norm(float3{core_input.moveHorizontal, 0, core_input.moveVertical})\r\n  moveVec = rl.Vector3RotateByAxisAngle(moveVec, float3_up, RAD_45)\r\n  // calculate desired velocity based on input\r\n  desiredVelocity := moveVec * player.stats.speed\r\n\r\n  // apply acceleration or deceleration\r\n  if linalg.length(moveVec) > 0 {\r\n    // Accelerate towards desired velocity\r\n    player_velocity = linalg.lerp(player_velocity, desiredVelocity, accel * dt)\r\n  } else {\r\n    // Decelerate when no input\r\n    currentSpeed := linalg.length(player_velocity)\r\n    if currentSpeed > 0 {\r\n      decelAmount := decel * dt\r\n      newSpeed := max(0, currentSpeed - decelAmount)\r\n      player_velocity = norm(player_velocity) * newSpeed\r\n    }\r\n  }\r\n\r\n  knockback := float3_zero\r\n  if player.knockback.power > 0.01 do knockback = player.knockback.current_offset\r\n\r\n  player.position += knockback + player_velocity * dt\r\n\r\n\r\n  //trigger dash\r\n  if core_input.ability_triggered && time_now > ts_dash_ready && is_valid_handle(player.target) {\r\n    dashing = true\r\n    targetPos := get_entity(player.target).position\r\n    dirVec := targetPos - player.position\r\n    dashing_start = player.position\r\n    dashing_end = targetPos - norm(dirVec) * 1.5\r\n    ts_dash_start = time_now\r\n  }\r\n\r\n  // player rotation\r\n  mousePos := get_mouse_pos_world()\r\n  player.rotation = look_rot(player.position, mousePos, float3_up)\r\n  player.forward = norm(mousePos - player.position)\r\n  player_model.transform = matrix_trs(float3_zero, float3_one, player.rotation)\r\n\r\n\r\n  if anims_loaded {\r\n    anim := player_anims[animIndex]\r\n    animCurrentFrame = (animCurrentFrame + 1) % anim.frameCount\r\n    rl.UpdateModelAnimation(player_model, anim, animCurrentFrame)\r\n  }\r\n}\r\n\r\n\r\ndraw_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  fresnel := rl.ColorNormalize(player_fresnel_color)\r\n  black := rl.ColorNormalize(rl.BLACK)\r\n\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &fresnel, .VEC4)\r\n  rl.DrawModel(player_model, player.position, 1, rl.WHITE)\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &black, .VEC4)\r\n\r\n  if is_valid_handle(player.target) {\r\n    rl.DrawSphere(get_entity(player.target).position + float3_up * 3, 0.25, rl.BLUE)\r\n  }\r\n}\r\n\r\nget_mouse_pos_world :: proc() -> float3 \r\n{\r\n  ray := rl.GetScreenToWorldRay(rl.GetMousePosition(), camera)\r\n  hitInfo: rl.RayCollision\r\n  hitInfo = rl.GetRayCollisionQuad(ray, ground_plane_p1, ground_plane_p2, ground_plane_p3, ground_plane_p4)\r\n  return hitInfo.point\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 150
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAmhAAAAAAAACaEAAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6Zm10IgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgImNvcmU6c2xpY2UiCmltcG9ydCAiY29yZTpzb3J0IgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpwbGF5ZXJfaGFuZGxlOiBFbnRpdHlIYW5kbGUKCi8vZ3JvdW5kIHBsYW5lCmdyb3VuZF9wbGFuZV9wMSA6OiBmbG9hdDN7LTEwMDAsIDAsIC0xMDAwfQpncm91bmRfcGxhbmVfcDIgOjogZmxvYXQzey0xMDAwLCAwLCAxMDAwfQpncm91bmRfcGxhbmVfcDMgOjogZmxvYXQzezEwMDAsIDAsIDEwMDB9Cmdyb3VuZF9wbGFuZV9wNCA6OiBmbG9hdDN7MTAwMCwgMCwgLTEwMDB9CgphbmltQ3VycmVudEZyYW1lOiBpMzIKYW5pbUNvdW50OiBpMzIKYW5pbUluZGV4OiBpMzIKCnBsYXllcl9tb2RlbDogcmwuTW9kZWwKcGxheWVyX2FuaW1zOiBbXl1ybC5Nb2RlbEFuaW1hdGlvbgpwbGF5ZXJfc2hhZGVyOiBybC5TaGFkZXIKYW5pbXNfbG9hZGVkOiBib29sCnBsYXllcl9hY2NlbDogZmxvYXQKc3ludF9hdGxhc18xOiBybC5UZXh0dXJlCnBsYXllcl9mcmVzbmVsX2NvbG9yIDo6IHJsLkNvbG9yezExNCwgMjMyLCAxOTUsIDI1NX0KbG9jX2ZyZXNuZWw6IGludAoKCmluaXRfcGxheWVyIDo6IHByb2MoKSAKewogIGxvY19mcmVzbmVsID0gcmwuR2V0U2hhZGVyTG9jYXRpb24oZGVmYXVsdF9zaGFkZXIsICJmcmVzbmVsQ29sb3IiKQogIHBsYXllcl9oYW5kbGUgPSBjcmVhdGVfZW50aXR5KCkKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIHBsYXllci5mbGFncyA9IHsucGxheWVyfQogIHBsYXllci5wb3NpdGlvbiA9IGZsb2F0M196ZXJvCiAgcGxheWVyLnJvdGF0aW9uID0gcXVhdGVybmlvbl9pZGVudGl0eQogIGluaXRfcGxheWVyX3N0YXRzKCkKICBhcHBlbmQoJnVwZGF0ZV9wcm9jcywgdXBkYXRlX3BsYXllcikKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfcGxheWVyKQogIC8vY3JlYXRlX2Nyb3NzYm93KCkKICBjcmVhdGVfc2hvdGd1bigpCiAgY3JlYXRlX3NoaWVsZF9kYXNoKCkKCiAgLy9hbmltYXRpb24gdGVzdAogIGFuaW1Db3VudCA9IDAKICBhbmltSW5kZXggPSAwCiAgYW5pbUN1cnJlbnRGcmFtZSA9IDAKCiAgLy9tYXRlcmlhbCBhbmQgc2hhZGVyIHNldHVwCiAgaWR4IDo9IGxvYWRfZW50aXR5X21vZGVsKCJwbGF5ZXIuZ2xiIikKICBwbGF5ZXJfbW9kZWwgPSBlbnRpdHlfbW9kZWxzW2lkeF0KICBmb3IgaSBpbiAwIC4uPCBwbGF5ZXJfbW9kZWwubWVzaENvdW50IHsKICAgIHNtb290aF9hbGxfbWVzaF9ub3JtYWxzKCZwbGF5ZXJfbW9kZWwubWVzaGVzW2ldKQogIH0KCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZwbGF5ZXJfbW9kZWwsIHN5bnR5X21hdCkKCiAgLy9wbGF5ZXJfbW9kZWwubWF0ZXJpYWxzWzBdID0gc3ludHlfbWF0CiAgLy9wbGF5ZXJfbW9kZWwubWF0ZXJpYWxzWzFdID0gc3ludHlfbWF0CiAgLy9wbGF5ZXJfbW9kZWwubWF0ZXJpYWxzWzJdID0gc3ludHlfbWF0CiAgaWYgYW5pbUNvdW50ICE9IDAgewogICAgYW5pbXNfbG9hZGVkID0gdHJ1ZQogIH0KfQoKCnVwZGF0ZV9wbGF5ZXIgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9lbnRpdHkocGxheWVyX2hhbmRsZSkKICBwbGF5ZXIuc3RhdHMuc3BlZWQgPSA1CiAgYWNjZWw6IGZsb2F0ID0gNDAKICBkZWNlbDogZmxvYXQgPSA1MAoKICAvLyByZWFkIGlucHV0LCBjb25zdHJ1Y3QgbW92ZSB2ZWN0b3IgYW5kIHRyYW5zZm9ybSBtb3ZlIHZlY3RvciBieSBjYW1lcmEgcm90YXRpb24gc28gaXRzIGNhbWVyYSByZWxhdGl2ZQogIG1vdmVWZWMgOj0gbm9ybShmbG9hdDN7Y29yZV9pbnB1dC5tb3ZlSG9yaXpvbnRhbCwgMCwgY29yZV9pbnB1dC5tb3ZlVmVydGljYWx9KQogIG1vdmVWZWMgPSBybC5WZWN0b3IzUm90YXRlQnlBeGlzQW5nbGUobW92ZVZlYywgZmxvYXQzX3VwLCBSQURfNDUpCiAgLy8gY2FsY3VsYXRlIGRlc2lyZWQgdmVsb2NpdHkgYmFzZWQgb24gaW5wdXQKICBkZXNpcmVkVmVsb2NpdHkgOj0gbW92ZVZlYyAqIHBsYXllci5zdGF0cy5zcGVlZAoKICAvLyBhcHBseSBhY2NlbGVyYXRpb24gb3IgZGVjZWxlcmF0aW9uCiAgaWYgbGluYWxnLmxlbmd0aChtb3ZlVmVjKSA+IDAgewogICAgLy8gQWNjZWxlcmF0ZSB0b3dhcmRzIGRlc2lyZWQgdmVsb2NpdHkKICAgIHBsYXllcl92ZWxvY2l0eSA9IGxpbmFsZy5sZXJwKHBsYXllcl92ZWxvY2l0eSwgZGVzaXJlZFZlbG9jaXR5LCBhY2NlbCAqIGR0KQogIH0gZWxzZSB7CiAgICAvLyBEZWNlbGVyYXRlIHdoZW4gbm8gaW5wdXQKICAgIGN1cnJlbnRTcGVlZCA6PSBsaW5hbGcubGVuZ3RoKHBsYXllcl92ZWxvY2l0eSkKICAgIGlmIGN1cnJlbnRTcGVlZCA+IDAgewogICAgICBkZWNlbEFtb3VudCA6PSBkZWNlbCAqIGR0CiAgICAgIG5ld1NwZWVkIDo9IG1heCgwLCBjdXJyZW50U3BlZWQgLSBkZWNlbEFtb3VudCkKICAgICAgcGxheWVyX3ZlbG9jaXR5ID0gbm9ybShwbGF5ZXJfdmVsb2NpdHkpICogbmV3U3BlZWQKICAgIH0KICB9CgogIGtub2NrYmFjayA6PSBmbG9hdDNfemVybwogIGlmIHBsYXllci5rbm9ja2JhY2sucG93ZXIgPiAwLjAxIGRvIGtub2NrYmFjayA9IHBsYXllci5rbm9ja2JhY2suY3VycmVudF9vZmZzZXQKCiAgcGxheWVyLnBvc2l0aW9uICs9IGtub2NrYmFjayArIHBsYXllcl92ZWxvY2l0eSAqIGR0CgoKICAvL3RyaWdnZXIgZGFzaAogIGlmIGNvcmVfaW5wdXQuYWJpbGl0eV90cmlnZ2VyZWQgJiYgdGltZV9ub3cgPiB0c19kYXNoX3JlYWR5ICYmIGlzX3ZhbGlkX2hhbmRsZShwbGF5ZXIudGFyZ2V0KSB7CiAgICBkYXNoaW5nID0gdHJ1ZQogICAgdGFyZ2V0UG9zIDo9IGdldF9lbnRpdHkocGxheWVyLnRhcmdldCkucG9zaXRpb24KICAgIGRpclZlYyA6PSB0YXJnZXRQb3MgLSBwbGF5ZXIucG9zaXRpb24KICAgIGRhc2hpbmdfc3RhcnQgPSBwbGF5ZXIucG9zaXRpb24KICAgIGRhc2hpbmdfZW5kID0gdGFyZ2V0UG9zIC0gbm9ybShkaXJWZWMpICogMS41CiAgICB0c19kYXNoX3N0YXJ0ID0gdGltZV9ub3cKICB9CgogIC8vIHBsYXllciByb3RhdGlvbgogIG1vdXNlUG9zIDo9IGdldF9tb3VzZV9wb3Nfd29ybGQoKQogIHBsYXllci5yb3RhdGlvbiA9IGxvb2tfcm90KHBsYXllci5wb3NpdGlvbiwgbW91c2VQb3MsIGZsb2F0M191cCkKICBwbGF5ZXIuZm9yd2FyZCA9IG5vcm0obW91c2VQb3MgLSBwbGF5ZXIucG9zaXRpb24pCiAgcGxheWVyX21vZGVsLnRyYW5zZm9ybSA9IG1hdHJpeF90cnMoZmxvYXQzX3plcm8sIGZsb2F0M19vbmUsIHBsYXllci5yb3RhdGlvbikKCgogIGlmIGFuaW1zX2xvYWRlZCB7CiAgICBhbmltIDo9IHBsYXllcl9hbmltc1thbmltSW5kZXhdCiAgICBhbmltQ3VycmVudEZyYW1lID0gKGFuaW1DdXJyZW50RnJhbWUgKyAxKSAlIGFuaW0uZnJhbWVDb3VudAogICAgcmwuVXBkYXRlTW9kZWxBbmltYXRpb24ocGxheWVyX21vZGVsLCBhbmltLCBhbmltQ3VycmVudEZyYW1lKQogIH0KfQoKCmRyYXdfcGxheWVyIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfZW50aXR5KHBsYXllcl9oYW5kbGUpCiAgZnJlc25lbCA6PSBybC5Db2xvck5vcm1hbGl6ZShwbGF5ZXJfZnJlc25lbF9jb2xvcikKICBibGFjayA6PSBybC5Db2xvck5vcm1hbGl6ZShybC5CTEFDSykKCiAgcmwuU2V0U2hhZGVyVmFsdWUoZGVmYXVsdF9zaGFkZXIsIGxvY19mcmVzbmVsLCAmZnJlc25lbCwgLlZFQzQpCiAgcmwuRHJhd01vZGVsKHBsYXllcl9tb2RlbCwgcGxheWVyLnBvc2l0aW9uLCAxLCBybC5XSElURSkKICBybC5TZXRTaGFkZXJWYWx1ZShkZWZhdWx0X3NoYWRlciwgbG9jX2ZyZXNuZWwsICZibGFjaywgLlZFQzQpCgogIGlmIGlzX3ZhbGlkX2hhbmRsZShwbGF5ZXIudGFyZ2V0KSB7CiAgICBybC5EcmF3U3BoZXJlKGdldF9lbnRpdHkocGxheWVyLnRhcmdldCkucG9zaXRpb24gKyBmbG9hdDNfdXAgKiAzLCAwLjI1LCBybC5CTFVFKQogIH0KfQoKZ2V0X21vdXNlX3Bvc193b3JsZCA6OiBwcm9jKCkgLT4gZmxvYXQzIAp7CiAgcmF5IDo9IHJsLkdldFNjcmVlblRvV29ybGRSYXkocmwuR2V0TW91c2VQb3NpdGlvbigpLCBjYW1lcmEpCiAgaGl0SW5mbzogcmwuUmF5Q29sbGlzaW9uCiAgaGl0SW5mbyA9IHJsLkdldFJheUNvbGxpc2lvblF1YWQocmF5LCBncm91bmRfcGxhbmVfcDEsIGdyb3VuZF9wbGFuZV9wMiwgZ3JvdW5kX3BsYW5lX3AzLCBncm91bmRfcGxhbmVfcDQpCiAgcmV0dXJuIGhpdEluZm8ucG9pbnQKfQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALQQAAAAAAAAtBAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAABoEAAAAAAAAGwQAAAAAAAAAAAAAGwQAAAAAAAAcBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0EAAAAAAAALQQAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"duplicate_line",
					null,
					"AQAAABgEAAAAAAAAKwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8EAAAAAAAALwQAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "createdivi"
					},
					"CgAAABoEAAAAAAAAGwQAAAAAAAAOAAAAY3JlYXRlX3Nob3RndW4bBAAAAAAAABwEAAAAAAAAAAAAABwEAAAAAAAAHQQAAAAAAAAAAAAAHQQAAAAAAAAeBAAAAAAAAAAAAAAeBAAAAAAAAB8EAAAAAAAAAAAAAB8EAAAAAAAAIAQAAAAAAAAAAAAAIAQAAAAAAAAhBAAAAAAAAAAAAAAhBAAAAAAAACIEAAAAAAAAAAAAACIEAAAAAAAAIwQAAAAAAAAAAAAAIwQAAAAAAAAkBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIEAAAAAAAAQgQAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert_completion",
					{
						"completion": "create_divine_weapons",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "create_divine_weapons"
					},
					"AgAAABoEAAAAAAAAGgQAAAAAAAAKAAAAY3JlYXRlZGl2aRoEAAAAAAAALwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4EAAAAAAAAPgQAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					3,
					"cut",
					null,
					"AwAAACoPAAAAAAAAKg8AAAAAAAAmAAAAICBpZiBpc192YWxpZF9oYW5kbGUocGxheWVyLnRhcmdldCkgewoqDwAAAAAAACoPAAAAAAAAVQAAACAgICBybC5EcmF3U3BoZXJlKGdldF9lbnRpdHkocGxheWVyLnRhcmdldCkucG9zaXRpb24gKyBmbG9hdDNfdXAgKiAzLCAwLjI1LCBybC5CTFVFKQoqDwAAAAAAACoPAAAAAAAABAAAACAgfQo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkEAAAAAAAASQQAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAACgPAAAAAAAAKA8AAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkEAAAAAAAASQQAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n\nfor"
					},
					"BgAAAEoEAAAAAAAATQQAAAAAAAAAAAAATQQAAAAAAABQBAAAAAAAAAAAAABLBAAAAAAAAEsEAAAAAAAAAgAAACAgTgQAAAAAAABPBAAAAAAAAAAAAABPBAAAAAAAAFAEAAAAAAAAAAAAAFAEAAAAAAAAUQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABKBAAAAAAAAEoEAAAAAAAA////////738"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAFEEAAAAAAAAUgQAAAAAAAAAAAAAUgQAAAAAAABTBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABRBAAAAAAAAFEEAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAFMEAAAAAAAAVAQAAAAAAAAAAAAAVAQAAAAAAABVBAAAAAAAAAAAAABVBAAAAAAAAFYEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABTBAAAAAAAAFMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " 0..<"
					},
					"BQAAAFYEAAAAAAAAVwQAAAAAAAAAAAAAVwQAAAAAAABYBAAAAAAAAAAAAABYBAAAAAAAAFkEAAAAAAAAAAAAAFkEAAAAAAAAWgQAAAAAAAAAAAAAWgQAAAAAAABbBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABWBAAAAAAAAFYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " 100"
					},
					"BAAAAFsEAAAAAAAAXAQAAAAAAAAAAAAAXAQAAAAAAABdBAAAAAAAAAAAAABdBAAAAAAAAF4EAAAAAAAAAAAAAF4EAAAAAAAAXwQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABbBAAAAAAAAFsEAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					3,
					"left_delete",
					null,
					"AwAAAF4EAAAAAAAAXgQAAAAAAAABAAAAMF0EAAAAAAAAXQQAAAAAAAABAAAAMFwEAAAAAAAAXAQAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABfBAAAAAAAAF8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFwEAAAAAAAAXgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABcBAAAAAAAAFwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "50"
					},
					"AgAAAFwEAAAAAAAAXQQAAAAAAAAAAAAAXQQAAAAAAABeBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABcBAAAAAAAAFwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BAAAAF8EAAAAAAAAYgQAAAAAAAAAAAAAYgQAAAAAAABlBAAAAAAAAAAAAABgBAAAAAAAAGAEAAAAAAAAAgAAACAgYAQAAAAAAABkBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABfBAAAAAAAAF8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\ncreateen"
					},
					"CQAAAGAEAAAAAAAAYQQAAAAAAAAAAAAAYQQAAAAAAABiBAAAAAAAAAAAAABiBAAAAAAAAGMEAAAAAAAAAAAAAGMEAAAAAAAAZAQAAAAAAAAAAAAAZAQAAAAAAABlBAAAAAAAAAAAAABlBAAAAAAAAGYEAAAAAAAAAAAAAGYEAAAAAAAAZwQAAAAAAAAAAAAAZwQAAAAAAABoBAAAAAAAAAAAAABoBAAAAAAAAGkEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABgBAAAAAAAAGAEAAAAAAAAAAAAAAAAAAA"
				],
				[
					28,
					1,
					"insert_completion",
					{
						"completion": "create_entity",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "create_entity"
					},
					"AgAAAGEEAAAAAAAAYQQAAAAAAAAIAAAAY3JlYXRlZW5hBAAAAAAAAG4EAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABpBAAAAAAAAGkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG4EAAAAAAAAcAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABuBAAAAAAAAG4EAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAGEEAAAAAAAAYwQAAAAAAAAAAAAAYwQAAAAAAABlBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABhBAAAAAAAAGEEAAAAAAAAAAAAAAAAAAA"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAAF8EAAAAAAAAXwQAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABgBAAAAAAAAGAEAAAAAAAAAAAAAAAAQ0A"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n\npla,er."
					},
					"CgAAAHsEAAAAAAAAfgQAAAAAAAAAAAAAfgQAAAAAAACBBAAAAAAAAAAAAAB8BAAAAAAAAHwEAAAAAAAAAgAAACAgfwQAAAAAAACABAAAAAAAAAAAAACABAAAAAAAAIEEAAAAAAAAAAAAAIEEAAAAAAAAggQAAAAAAAAAAAAAggQAAAAAAACDBAAAAAAAAAAAAACDBAAAAAAAAIQEAAAAAAAAAAAAAIQEAAAAAAAAhQQAAAAAAAAAAAAAhQQAAAAAAACGBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAAB7BAAAAAAAAHsEAAAAAAAAAAAAAADAZkA"
				],
				[
					37,
					4,
					"left_delete",
					null,
					"BAAAAIUEAAAAAAAAhQQAAAAAAAABAAAALoQEAAAAAAAAhAQAAAAAAAABAAAAcoMEAAAAAAAAgwQAAAAAAAABAAAAZYIEAAAAAAAAggQAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACGBAAAAAAAAIYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIIEAAAAAAAAgwQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACCBAAAAAAAAIIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAIIEAAAAAAAAggQAAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACDBAAAAAAAAIMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AgAAAIIEAAAAAAAAgwQAAAAAAAAAAAAAgwQAAAAAAACEBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACCBAAAAAAAAIIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					2,
					"left_delete",
					null,
					"AgAAAIMEAAAAAAAAgwQAAAAAAAABAAAAcoIEAAAAAAAAggQAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACEBAAAAAAAAIQEAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "yer.iop"
					},
					"BwAAAIIEAAAAAAAAgwQAAAAAAAAAAAAAgwQAAAAAAACEBAAAAAAAAAAAAACEBAAAAAAAAIUEAAAAAAAAAAAAAIUEAAAAAAAAhgQAAAAAAAAAAAAAhgQAAAAAAACHBAAAAAAAAAAAAACHBAAAAAAAAIgEAAAAAAAAAAAAAIgEAAAAAAAAiQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACCBAAAAAAAAIIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					3,
					"left_delete",
					null,
					"AwAAAIgEAAAAAAAAiAQAAAAAAAABAAAAcIcEAAAAAAAAhwQAAAAAAAABAAAAb4YEAAAAAAAAhgQAAAAAAAABAAAAaQ",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACJBAAAAAAAAIkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "po"
					},
					"AgAAAIYEAAAAAAAAhwQAAAAAAAAAAAAAhwQAAAAAAACIBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACGBAAAAAAAAIYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert_completion",
					{
						"completion": "position",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "position"
					},
					"AgAAAIYEAAAAAAAAhgQAAAAAAAACAAAAcG+GBAAAAAAAAI4EAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACIBAAAAAAAAIgEAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " +=)"
					},
					"BAAAAI4EAAAAAAAAjwQAAAAAAAAAAAAAjwQAAAAAAACQBAAAAAAAAAAAAACQBAAAAAAAAJEEAAAAAAAAAAAAAJEEAAAAAAAAkgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACOBAAAAAAAAI4EAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"left_delete",
					null,
					"AQAAAJEEAAAAAAAAkQQAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACSBAAAAAAAAJIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " float3fo"
					},
					"CQAAAJEEAAAAAAAAkgQAAAAAAAAAAAAAkgQAAAAAAACTBAAAAAAAAAAAAACTBAAAAAAAAJQEAAAAAAAAAAAAAJQEAAAAAAAAlQQAAAAAAAAAAAAAlQQAAAAAAACWBAAAAAAAAAAAAACWBAAAAAAAAJcEAAAAAAAAAAAAAJcEAAAAAAAAmAQAAAAAAAAAAAAAmAQAAAAAAACZBAAAAAAAAAAAAACZBAAAAAAAAJoEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACRBAAAAAAAAJEEAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAJoEAAAAAAAAmwQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACaBAAAAAAAAJoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					3,
					"left_delete",
					null,
					"AwAAAJoEAAAAAAAAmgQAAAAAAAABAAAAIJkEAAAAAAAAmQQAAAAAAAABAAAAb5gEAAAAAAAAmAQAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACbBAAAAAAAAJsEAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert_completion",
					{
						"completion": "float3_one",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "float3_one"
					},
					"AgAAAJIEAAAAAAAAkgQAAAAAAAAGAAAAZmxvYXQzkgQAAAAAAACcBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACYBAAAAAAAAJgEAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "float"
					},
					"BQAAAJIEAAAAAAAAkwQAAAAAAAAKAAAAZmxvYXQzX29uZZMEAAAAAAAAlAQAAAAAAAAAAAAAlAQAAAAAAACVBAAAAAAAAAAAAACVBAAAAAAAAJYEAAAAAAAAAAAAAJYEAAAAAAAAlwQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACcBAAAAAAAAJIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert_completion",
					{
						"completion": "float3_zero",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "float3_zero"
					},
					"AgAAAJIEAAAAAAAAkgQAAAAAAAAFAAAAZmxvYXSSBAAAAAAAAJ0EAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAACXBAAAAAAAAJcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					6,
					"cut",
					null,
					"BgAAAEwEAAAAAAAATAQAAAAAAAAUAAAAICBmb3IgaSBpbiAwLi48IDUwewpMBAAAAAAAAEwEAAAAAAAAGAAAACAgICBjcmVhdGVfZW50aXR5KCkgICAgCkwEAAAAAAAATAQAAAAAAAAEAAAAICB9CkwEAAAAAAAATAQAAAAAAAABAAAACkwEAAAAAAAATAQAAAAAAAAhAAAAICBwbGF5ZXIucG9zaXRpb24gKz0gZmxvYXQzX3plcm8KTAQAAAAAAABMBAAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABfBAAAAAAAAF8EAAAAAAAAAAAAAACga0A"
				],
				[
					78,
					1,
					"left_delete",
					null,
					"AQAAAEsEAAAAAAAASwQAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABMBAAAAAAAAEwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEsEAAAAAAAATAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABLBAAAAAAAAEsEAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport \"core:slice\"\r\nimport \"core:sort\"\r\nimport rl \"vendor:raylib\"\r\n\r\nplayer_handle: EntityHandle\r\n\r\n//ground plane\r\nground_plane_p1 :: float3{-1000, 0, -1000}\r\nground_plane_p2 :: float3{-1000, 0, 1000}\r\nground_plane_p3 :: float3{1000, 0, 1000}\r\nground_plane_p4 :: float3{1000, 0, -1000}\r\n\r\nanimCurrentFrame: i32\r\nanimCount: i32\r\nanimIndex: i32\r\n\r\nplayer_model: rl.Model\r\nplayer_anims: [^]rl.ModelAnimation\r\nplayer_shader: rl.Shader\r\nanims_loaded: bool\r\nplayer_accel: float\r\nsynt_atlas_1: rl.Texture\r\nplayer_fresnel_color :: rl.Color{114, 232, 195, 255}\r\nloc_fresnel: int\r\n\r\n\r\ninit_player :: proc() \r\n{\r\n  loc_fresnel = rl.GetShaderLocation(default_shader, \"fresnelColor\")\r\n  player_handle = create_entity()\r\n  player := get_entity(player_handle)\r\n  player.flags = {.player}\r\n  player.position = float3_zero\r\n  player.rotation = quaternion_identity\r\n  init_player_stats()\r\n  append(&update_procs, update_player)\r\n  append(&draw_procs, draw_player)\r\n  //create_crossbow()\r\n  create_shotgun()\r\n  create_divine_weapons()\r\n  //create_shield_dash()\r\n\r\n  //animation test\r\n  animCount = 0\r\n  animIndex = 0\r\n  animCurrentFrame = 0\r\n\r\n  //material and shader setup\r\n  idx := load_entity_model(\"player.glb\")\r\n  player_model = entity_models[idx]\r\n  for i in 0 ..< player_model.meshCount {\r\n    smooth_all_mesh_normals(&player_model.meshes[i])\r\n  }\r\n\r\n  assign_material_all_mats(&player_model, synty_mat)\r\n\r\n  //player_model.materials[0] = synty_mat\r\n  //player_model.materials[1] = synty_mat\r\n  //player_model.materials[2] = synty_mat\r\n  if animCount != 0 {\r\n    anims_loaded = true\r\n  }\r\n}\r\n\r\n\r\nupdate_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  player.stats.speed = 5\r\n  accel: float = 40\r\n  decel: float = 50\r\n\r\n  // read input, construct move vector and transform move vector by camera rotation so its camera relative\r\n  moveVec := norm(float3{core_input.moveHorizontal, 0, core_input.moveVertical})\r\n  moveVec = rl.Vector3RotateByAxisAngle(moveVec, float3_up, RAD_45)\r\n  // calculate desired velocity based on input\r\n  desiredVelocity := moveVec * player.stats.speed\r\n\r\n  // apply acceleration or deceleration\r\n  if linalg.length(moveVec) > 0 {\r\n    // Accelerate towards desired velocity\r\n    player_velocity = linalg.lerp(player_velocity, desiredVelocity, accel * dt)\r\n  } else {\r\n    // Decelerate when no input\r\n    currentSpeed := linalg.length(player_velocity)\r\n    if currentSpeed > 0 {\r\n      decelAmount := decel * dt\r\n      newSpeed := max(0, currentSpeed - decelAmount)\r\n      player_velocity = norm(player_velocity) * newSpeed\r\n    }\r\n  }\r\n\r\n  knockback := float3_zero\r\n  if player.knockback.power > 0.01 do knockback = player.knockback.current_offset\r\n\r\n  player.position += knockback + player_velocity * dt\r\n\r\n\r\n  //trigger dash\r\n  if core_input.ability_triggered && time_now > ts_dash_ready && is_valid_handle(player.target) {\r\n    dashing = true\r\n    targetPos := get_entity(player.target).position\r\n    dirVec := targetPos - player.position\r\n    dashing_start = player.position\r\n    dashing_end = targetPos - norm(dirVec) * 1.5\r\n    ts_dash_start = time_now\r\n  }\r\n\r\n  // player rotation\r\n  mousePos := get_mouse_pos_world()\r\n  player.rotation = look_rot(player.position, mousePos, float3_up)\r\n  player.forward = norm(mousePos - player.position)\r\n  player_model.transform = matrix_trs(float3_zero, float3_one, player.rotation)\r\n\r\n\r\n  if anims_loaded {\r\n    anim := player_anims[animIndex]\r\n    animCurrentFrame = (animCurrentFrame + 1) % anim.frameCount\r\n    rl.UpdateModelAnimation(player_model, anim, animCurrentFrame)\r\n  }\r\n}\r\n\r\n\r\ndraw_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  fresnel := rl.ColorNormalize(player_fresnel_color)\r\n  black := rl.ColorNormalize(rl.BLACK)\r\n\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &fresnel, .VEC4)\r\n  rl.DrawModel(player_model, player.position, 1, rl.WHITE)\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &black, .VEC4)\r\n}\r\n\r\nget_mouse_pos_world :: proc() -> float3 \r\n{\r\n  ray := rl.GetScreenToWorldRay(rl.GetMousePosition(), camera)\r\n  hitInfo: rl.RayCollision\r\n  hitInfo = rl.GetRayCollisionQuad(ray, ground_plane_p1, ground_plane_p2, ground_plane_p3, ground_plane_p4)\r\n  return hitInfo.point\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 147
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAANhAAAAAAAAA2EAAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6Zm10IgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgImNvcmU6c2xpY2UiCmltcG9ydCAiY29yZTpzb3J0IgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpwbGF5ZXJfaGFuZGxlOiBFbnRpdHlIYW5kbGUKCi8vZ3JvdW5kIHBsYW5lCmdyb3VuZF9wbGFuZV9wMSA6OiBmbG9hdDN7LTEwMDAsIDAsIC0xMDAwfQpncm91bmRfcGxhbmVfcDIgOjogZmxvYXQzey0xMDAwLCAwLCAxMDAwfQpncm91bmRfcGxhbmVfcDMgOjogZmxvYXQzezEwMDAsIDAsIDEwMDB9Cmdyb3VuZF9wbGFuZV9wNCA6OiBmbG9hdDN7MTAwMCwgMCwgLTEwMDB9CgphbmltQ3VycmVudEZyYW1lOiBpMzIKYW5pbUNvdW50OiBpMzIKYW5pbUluZGV4OiBpMzIKCnBsYXllcl9tb2RlbDogcmwuTW9kZWwKcGxheWVyX2FuaW1zOiBbXl1ybC5Nb2RlbEFuaW1hdGlvbgpwbGF5ZXJfc2hhZGVyOiBybC5TaGFkZXIKYW5pbXNfbG9hZGVkOiBib29sCnBsYXllcl9hY2NlbDogZmxvYXQKc3ludF9hdGxhc18xOiBybC5UZXh0dXJlCnBsYXllcl9mcmVzbmVsX2NvbG9yIDo6IHJsLkNvbG9yezExNCwgMjMyLCAxOTUsIDI1NX0KbG9jX2ZyZXNuZWw6IGludAoKCmluaXRfcGxheWVyIDo6IHByb2MoKSAKewogIGxvY19mcmVzbmVsID0gcmwuR2V0U2hhZGVyTG9jYXRpb24oZGVmYXVsdF9zaGFkZXIsICJmcmVzbmVsQ29sb3IiKQogIHBsYXllcl9oYW5kbGUgPSBjcmVhdGVfZW50aXR5KCkKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIHBsYXllci5mbGFncyA9IHsucGxheWVyfQogIHBsYXllci5wb3NpdGlvbiA9IGZsb2F0M196ZXJvCiAgcGxheWVyLnJvdGF0aW9uID0gcXVhdGVybmlvbl9pZGVudGl0eQogIGluaXRfcGxheWVyX3N0YXRzKCkKICBhcHBlbmQoJnVwZGF0ZV9wcm9jcywgdXBkYXRlX3BsYXllcikKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfcGxheWVyKQogIC8vY3JlYXRlX2Nyb3NzYm93KCkKICBjcmVhdGVfc2hvdGd1bigpCiAgY3JlYXRlX2RpdmluZV93ZWFwb25zKCkKICAvL2NyZWF0ZV9zaGllbGRfZGFzaCgpCgogIC8vYW5pbWF0aW9uIHRlc3QKICBhbmltQ291bnQgPSAwCiAgYW5pbUluZGV4ID0gMAogIGFuaW1DdXJyZW50RnJhbWUgPSAwCgogIC8vbWF0ZXJpYWwgYW5kIHNoYWRlciBzZXR1cAogIGlkeCA6PSBsb2FkX2VudGl0eV9tb2RlbCgicGxheWVyLmdsYiIpCiAgcGxheWVyX21vZGVsID0gZW50aXR5X21vZGVsc1tpZHhdCiAgZm9yIGkgaW4gMCAuLjwgcGxheWVyX21vZGVsLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmcGxheWVyX21vZGVsLm1lc2hlc1tpXSkKICB9CgogIGFzc2lnbl9tYXRlcmlhbF9hbGxfbWF0cygmcGxheWVyX21vZGVsLCBzeW50eV9tYXQpCgogIC8vcGxheWVyX21vZGVsLm1hdGVyaWFsc1swXSA9IHN5bnR5X21hdAogIC8vcGxheWVyX21vZGVsLm1hdGVyaWFsc1sxXSA9IHN5bnR5X21hdAogIC8vcGxheWVyX21vZGVsLm1hdGVyaWFsc1syXSA9IHN5bnR5X21hdAogIGlmIGFuaW1Db3VudCAhPSAwIHsKICAgIGFuaW1zX2xvYWRlZCA9IHRydWUKICB9Cn0KCgp1cGRhdGVfcGxheWVyIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfZW50aXR5KHBsYXllcl9oYW5kbGUpCiAgcGxheWVyLnN0YXRzLnNwZWVkID0gNQogIGFjY2VsOiBmbG9hdCA9IDQwCiAgZGVjZWw6IGZsb2F0ID0gNTAKCiAgLy8gcmVhZCBpbnB1dCwgY29uc3RydWN0IG1vdmUgdmVjdG9yIGFuZCB0cmFuc2Zvcm0gbW92ZSB2ZWN0b3IgYnkgY2FtZXJhIHJvdGF0aW9uIHNvIGl0cyBjYW1lcmEgcmVsYXRpdmUKICBtb3ZlVmVjIDo9IG5vcm0oZmxvYXQze2NvcmVfaW5wdXQubW92ZUhvcml6b250YWwsIDAsIGNvcmVfaW5wdXQubW92ZVZlcnRpY2FsfSkKICBtb3ZlVmVjID0gcmwuVmVjdG9yM1JvdGF0ZUJ5QXhpc0FuZ2xlKG1vdmVWZWMsIGZsb2F0M191cCwgUkFEXzQ1KQogIC8vIGNhbGN1bGF0ZSBkZXNpcmVkIHZlbG9jaXR5IGJhc2VkIG9uIGlucHV0CiAgZGVzaXJlZFZlbG9jaXR5IDo9IG1vdmVWZWMgKiBwbGF5ZXIuc3RhdHMuc3BlZWQKCiAgLy8gYXBwbHkgYWNjZWxlcmF0aW9uIG9yIGRlY2VsZXJhdGlvbgogIGlmIGxpbmFsZy5sZW5ndGgobW92ZVZlYykgPiAwIHsKICAgIC8vIEFjY2VsZXJhdGUgdG93YXJkcyBkZXNpcmVkIHZlbG9jaXR5CiAgICBwbGF5ZXJfdmVsb2NpdHkgPSBsaW5hbGcubGVycChwbGF5ZXJfdmVsb2NpdHksIGRlc2lyZWRWZWxvY2l0eSwgYWNjZWwgKiBkdCkKICB9IGVsc2UgewogICAgLy8gRGVjZWxlcmF0ZSB3aGVuIG5vIGlucHV0CiAgICBjdXJyZW50U3BlZWQgOj0gbGluYWxnLmxlbmd0aChwbGF5ZXJfdmVsb2NpdHkpCiAgICBpZiBjdXJyZW50U3BlZWQgPiAwIHsKICAgICAgZGVjZWxBbW91bnQgOj0gZGVjZWwgKiBkdAogICAgICBuZXdTcGVlZCA6PSBtYXgoMCwgY3VycmVudFNwZWVkIC0gZGVjZWxBbW91bnQpCiAgICAgIHBsYXllcl92ZWxvY2l0eSA9IG5vcm0ocGxheWVyX3ZlbG9jaXR5KSAqIG5ld1NwZWVkCiAgICB9CiAgfQoKICBrbm9ja2JhY2sgOj0gZmxvYXQzX3plcm8KICBpZiBwbGF5ZXIua25vY2tiYWNrLnBvd2VyID4gMC4wMSBkbyBrbm9ja2JhY2sgPSBwbGF5ZXIua25vY2tiYWNrLmN1cnJlbnRfb2Zmc2V0CgogIHBsYXllci5wb3NpdGlvbiArPSBrbm9ja2JhY2sgKyBwbGF5ZXJfdmVsb2NpdHkgKiBkdAoKCiAgLy90cmlnZ2VyIGRhc2gKICBpZiBjb3JlX2lucHV0LmFiaWxpdHlfdHJpZ2dlcmVkICYmIHRpbWVfbm93ID4gdHNfZGFzaF9yZWFkeSAmJiBpc192YWxpZF9oYW5kbGUocGxheWVyLnRhcmdldCkgewogICAgZGFzaGluZyA9IHRydWUKICAgIHRhcmdldFBvcyA6PSBnZXRfZW50aXR5KHBsYXllci50YXJnZXQpLnBvc2l0aW9uCiAgICBkaXJWZWMgOj0gdGFyZ2V0UG9zIC0gcGxheWVyLnBvc2l0aW9uCiAgICBkYXNoaW5nX3N0YXJ0ID0gcGxheWVyLnBvc2l0aW9uCiAgICBkYXNoaW5nX2VuZCA9IHRhcmdldFBvcyAtIG5vcm0oZGlyVmVjKSAqIDEuNQogICAgdHNfZGFzaF9zdGFydCA9IHRpbWVfbm93CiAgfQoKICAvLyBwbGF5ZXIgcm90YXRpb24KICBtb3VzZVBvcyA6PSBnZXRfbW91c2VfcG9zX3dvcmxkKCkKICBwbGF5ZXIucm90YXRpb24gPSBsb29rX3JvdChwbGF5ZXIucG9zaXRpb24sIG1vdXNlUG9zLCBmbG9hdDNfdXApCiAgcGxheWVyLmZvcndhcmQgPSBub3JtKG1vdXNlUG9zIC0gcGxheWVyLnBvc2l0aW9uKQogIHBsYXllcl9tb2RlbC50cmFuc2Zvcm0gPSBtYXRyaXhfdHJzKGZsb2F0M196ZXJvLCBmbG9hdDNfb25lLCBwbGF5ZXIucm90YXRpb24pCgoKICBpZiBhbmltc19sb2FkZWQgewogICAgYW5pbSA6PSBwbGF5ZXJfYW5pbXNbYW5pbUluZGV4XQogICAgYW5pbUN1cnJlbnRGcmFtZSA9IChhbmltQ3VycmVudEZyYW1lICsgMSkgJSBhbmltLmZyYW1lQ291bnQKICAgIHJsLlVwZGF0ZU1vZGVsQW5pbWF0aW9uKHBsYXllcl9tb2RlbCwgYW5pbSwgYW5pbUN1cnJlbnRGcmFtZSkKICB9Cn0KCgpkcmF3X3BsYXllciA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIGZyZXNuZWwgOj0gcmwuQ29sb3JOb3JtYWxpemUocGxheWVyX2ZyZXNuZWxfY29sb3IpCiAgYmxhY2sgOj0gcmwuQ29sb3JOb3JtYWxpemUocmwuQkxBQ0spCgogIHJsLlNldFNoYWRlclZhbHVlKGRlZmF1bHRfc2hhZGVyLCBsb2NfZnJlc25lbCwgJmZyZXNuZWwsIC5WRUM0KQogIHJsLkRyYXdNb2RlbChwbGF5ZXJfbW9kZWwsIHBsYXllci5wb3NpdGlvbiwgMSwgcmwuV0hJVEUpCiAgcmwuU2V0U2hhZGVyVmFsdWUoZGVmYXVsdF9zaGFkZXIsIGxvY19mcmVzbmVsLCAmYmxhY2ssIC5WRUM0KQp9CgpnZXRfbW91c2VfcG9zX3dvcmxkIDo6IHByb2MoKSAtPiBmbG9hdDMgCnsKICByYXkgOj0gcmwuR2V0U2NyZWVuVG9Xb3JsZFJheShybC5HZXRNb3VzZVBvc2l0aW9uKCksIGNhbWVyYSkKICBoaXRJbmZvOiBybC5SYXlDb2xsaXNpb24KICBoaXRJbmZvID0gcmwuR2V0UmF5Q29sbGlzaW9uUXVhZChyYXksIGdyb3VuZF9wbGFuZV9wMSwgZ3JvdW5kX3BsYW5lX3AyLCBncm91bmRfcGxhbmVfcDMsIGdyb3VuZF9wbGFuZV9wNCkKICByZXR1cm4gaGl0SW5mby5wb2ludAp9Cg",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABMBAAAAAAAAEwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "\n\ntest"
					},
					"BwAAAEoEAAAAAAAATQQAAAAAAAAAAAAATQQAAAAAAABQBAAAAAAAAAAAAABLBAAAAAAAAEsEAAAAAAAAAgAAACAgTgQAAAAAAABPBAAAAAAAAAAAAABPBAAAAAAAAFAEAAAAAAAAAAAAAFAEAAAAAAAAUQQAAAAAAAAAAAAAUQQAAAAAAABSBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABKBAAAAAAAAEoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFIEAAAAAAAAUwQAAAAAAAAAAAAAUwQAAAAAAABUBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABSBAAAAAAAAFIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": " 10"
					},
					"AwAAAFQEAAAAAAAAVQQAAAAAAAAAAAAAVQQAAAAAAABWBAAAAAAAAAAAAABWBAAAAAAAAFcEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABUBAAAAAAAAFQEAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport \"core:slice\"\r\nimport \"core:sort\"\r\nimport rl \"vendor:raylib\"\r\n\r\nplayer_handle: EntityHandle\r\n\r\n//ground plane\r\nground_plane_p1 :: float3{-1000, 0, -1000}\r\nground_plane_p2 :: float3{-1000, 0, 1000}\r\nground_plane_p3 :: float3{1000, 0, 1000}\r\nground_plane_p4 :: float3{1000, 0, -1000}\r\n\r\nanimCurrentFrame: i32\r\nanimCount: i32\r\nanimIndex: i32\r\n\r\nplayer_model: rl.Model\r\nplayer_anims: [^]rl.ModelAnimation\r\nplayer_shader: rl.Shader\r\nanims_loaded: bool\r\nplayer_accel: float\r\nsynt_atlas_1: rl.Texture\r\nplayer_fresnel_color :: rl.Color{114, 232, 195, 255}\r\nloc_fresnel: int\r\n\r\n\r\ninit_player :: proc() \r\n{\r\n  loc_fresnel = rl.GetShaderLocation(default_shader, \"fresnelColor\")\r\n  player_handle = create_entity()\r\n  player := get_entity(player_handle)\r\n  player.flags = {.player}\r\n  player.position = float3_zero\r\n  player.rotation = quaternion_identity\r\n  init_player_stats()\r\n  append(&update_procs, update_player)\r\n  append(&draw_procs, draw_player)\r\n  //create_crossbow()\r\n  create_shotgun()\r\n  create_divine_weapons()\r\n  //create_shield_dash()\r\n\r\n  test = 10\r\n\r\n  //animation test\r\n  animCount = 0\r\n  animIndex = 0\r\n  animCurrentFrame = 0\r\n\r\n  //material and shader setup\r\n  idx := load_entity_model(\"player.glb\")\r\n  player_model = entity_models[idx]\r\n  for i in 0 ..< player_model.meshCount {\r\n    smooth_all_mesh_normals(&player_model.meshes[i])\r\n  }\r\n\r\n  assign_material_all_mats(&player_model, synty_mat)\r\n\r\n  //player_model.materials[0] = synty_mat\r\n  //player_model.materials[1] = synty_mat\r\n  //player_model.materials[2] = synty_mat\r\n  if animCount != 0 {\r\n    anims_loaded = true\r\n  }\r\n}\r\n\r\n\r\nupdate_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  player.stats.speed = 5\r\n  accel: float = 40\r\n  decel: float = 50\r\n\r\n  // read input, construct move vector and transform move vector by camera rotation so its camera relative\r\n  moveVec := norm(float3{core_input.moveHorizontal, 0, core_input.moveVertical})\r\n  moveVec = rl.Vector3RotateByAxisAngle(moveVec, float3_up, RAD_45)\r\n  // calculate desired velocity based on input\r\n  desiredVelocity := moveVec * player.stats.speed\r\n\r\n  // apply acceleration or deceleration\r\n  if linalg.length(moveVec) > 0 {\r\n    // Accelerate towards desired velocity\r\n    player_velocity = linalg.lerp(player_velocity, desiredVelocity, accel * dt)\r\n  } else {\r\n    // Decelerate when no input\r\n    currentSpeed := linalg.length(player_velocity)\r\n    if currentSpeed > 0 {\r\n      decelAmount := decel * dt\r\n      newSpeed := max(0, currentSpeed - decelAmount)\r\n      player_velocity = norm(player_velocity) * newSpeed\r\n    }\r\n  }\r\n\r\n  knockback := float3_zero\r\n  if player.knockback.power > 0.01 do knockback = player.knockback.current_offset\r\n\r\n  player.position += knockback + player_velocity * dt\r\n\r\n\r\n  //trigger dash\r\n  if core_input.ability_triggered && time_now > ts_dash_ready && is_valid_handle(player.target) {\r\n    dashing = true\r\n    targetPos := get_entity(player.target).position\r\n    dirVec := targetPos - player.position\r\n    dashing_start = player.position\r\n    dashing_end = targetPos - norm(dirVec) * 1.5\r\n    ts_dash_start = time_now\r\n  }\r\n\r\n  // player rotation\r\n  mousePos := get_mouse_pos_world()\r\n  player.rotation = look_rot(player.position, mousePos, float3_up)\r\n  player.forward = norm(mousePos - player.position)\r\n  player_model.transform = matrix_trs(float3_zero, float3_one, player.rotation)\r\n\r\n\r\n  if anims_loaded {\r\n    anim := player_anims[animIndex]\r\n    animCurrentFrame = (animCurrentFrame + 1) % anim.frameCount\r\n    rl.UpdateModelAnimation(player_model, anim, animCurrentFrame)\r\n  }\r\n}\r\n\r\n\r\ndraw_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  fresnel := rl.ColorNormalize(player_fresnel_color)\r\n  black := rl.ColorNormalize(rl.BLACK)\r\n\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &fresnel, .VEC4)\r\n  rl.DrawModel(player_model, player.position, 1, rl.WHITE)\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &black, .VEC4)\r\n}\r\n\r\nget_mouse_pos_world :: proc() -> float3 \r\n{\r\n  ray := rl.GetScreenToWorldRay(rl.GetMousePosition(), camera)\r\n  hitInfo: rl.RayCollision\r\n  hitInfo = rl.GetRayCollisionQuad(ray, ground_plane_p1, ground_plane_p2, ground_plane_p3, ground_plane_p4)\r\n  return hitInfo.point\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 149
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAQxAAAAAAAABDEAAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6Zm10IgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgImNvcmU6c2xpY2UiCmltcG9ydCAiY29yZTpzb3J0IgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpwbGF5ZXJfaGFuZGxlOiBFbnRpdHlIYW5kbGUKCi8vZ3JvdW5kIHBsYW5lCmdyb3VuZF9wbGFuZV9wMSA6OiBmbG9hdDN7LTEwMDAsIDAsIC0xMDAwfQpncm91bmRfcGxhbmVfcDIgOjogZmxvYXQzey0xMDAwLCAwLCAxMDAwfQpncm91bmRfcGxhbmVfcDMgOjogZmxvYXQzezEwMDAsIDAsIDEwMDB9Cmdyb3VuZF9wbGFuZV9wNCA6OiBmbG9hdDN7MTAwMCwgMCwgLTEwMDB9CgphbmltQ3VycmVudEZyYW1lOiBpMzIKYW5pbUNvdW50OiBpMzIKYW5pbUluZGV4OiBpMzIKCnBsYXllcl9tb2RlbDogcmwuTW9kZWwKcGxheWVyX2FuaW1zOiBbXl1ybC5Nb2RlbEFuaW1hdGlvbgpwbGF5ZXJfc2hhZGVyOiBybC5TaGFkZXIKYW5pbXNfbG9hZGVkOiBib29sCnBsYXllcl9hY2NlbDogZmxvYXQKc3ludF9hdGxhc18xOiBybC5UZXh0dXJlCnBsYXllcl9mcmVzbmVsX2NvbG9yIDo6IHJsLkNvbG9yezExNCwgMjMyLCAxOTUsIDI1NX0KbG9jX2ZyZXNuZWw6IGludAoKCmluaXRfcGxheWVyIDo6IHByb2MoKSAKewogIGxvY19mcmVzbmVsID0gcmwuR2V0U2hhZGVyTG9jYXRpb24oZGVmYXVsdF9zaGFkZXIsICJmcmVzbmVsQ29sb3IiKQogIHBsYXllcl9oYW5kbGUgPSBjcmVhdGVfZW50aXR5KCkKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIHBsYXllci5mbGFncyA9IHsucGxheWVyfQogIHBsYXllci5wb3NpdGlvbiA9IGZsb2F0M196ZXJvCiAgcGxheWVyLnJvdGF0aW9uID0gcXVhdGVybmlvbl9pZGVudGl0eQogIGluaXRfcGxheWVyX3N0YXRzKCkKICBhcHBlbmQoJnVwZGF0ZV9wcm9jcywgdXBkYXRlX3BsYXllcikKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfcGxheWVyKQogIC8vY3JlYXRlX2Nyb3NzYm93KCkKICBjcmVhdGVfc2hvdGd1bigpCiAgY3JlYXRlX2RpdmluZV93ZWFwb25zKCkKICAvL2NyZWF0ZV9zaGllbGRfZGFzaCgpCgogIHRlc3QgPSAxMAoKICAvL2FuaW1hdGlvbiB0ZXN0CiAgYW5pbUNvdW50ID0gMAogIGFuaW1JbmRleCA9IDAKICBhbmltQ3VycmVudEZyYW1lID0gMAoKICAvL21hdGVyaWFsIGFuZCBzaGFkZXIgc2V0dXAKICBpZHggOj0gbG9hZF9lbnRpdHlfbW9kZWwoInBsYXllci5nbGIiKQogIHBsYXllcl9tb2RlbCA9IGVudGl0eV9tb2RlbHNbaWR4XQogIGZvciBpIGluIDAgLi48IHBsYXllcl9tb2RlbC5tZXNoQ291bnQgewogICAgc21vb3RoX2FsbF9tZXNoX25vcm1hbHMoJnBsYXllcl9tb2RlbC5tZXNoZXNbaV0pCiAgfQoKICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnBsYXllcl9tb2RlbCwgc3ludHlfbWF0KQoKICAvL3BsYXllcl9tb2RlbC5tYXRlcmlhbHNbMF0gPSBzeW50eV9tYXQKICAvL3BsYXllcl9tb2RlbC5tYXRlcmlhbHNbMV0gPSBzeW50eV9tYXQKICAvL3BsYXllcl9tb2RlbC5tYXRlcmlhbHNbMl0gPSBzeW50eV9tYXQKICBpZiBhbmltQ291bnQgIT0gMCB7CiAgICBhbmltc19sb2FkZWQgPSB0cnVlCiAgfQp9CgoKdXBkYXRlX3BsYXllciA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIHBsYXllci5zdGF0cy5zcGVlZCA9IDUKICBhY2NlbDogZmxvYXQgPSA0MAogIGRlY2VsOiBmbG9hdCA9IDUwCgogIC8vIHJlYWQgaW5wdXQsIGNvbnN0cnVjdCBtb3ZlIHZlY3RvciBhbmQgdHJhbnNmb3JtIG1vdmUgdmVjdG9yIGJ5IGNhbWVyYSByb3RhdGlvbiBzbyBpdHMgY2FtZXJhIHJlbGF0aXZlCiAgbW92ZVZlYyA6PSBub3JtKGZsb2F0M3tjb3JlX2lucHV0Lm1vdmVIb3Jpem9udGFsLCAwLCBjb3JlX2lucHV0Lm1vdmVWZXJ0aWNhbH0pCiAgbW92ZVZlYyA9IHJsLlZlY3RvcjNSb3RhdGVCeUF4aXNBbmdsZShtb3ZlVmVjLCBmbG9hdDNfdXAsIFJBRF80NSkKICAvLyBjYWxjdWxhdGUgZGVzaXJlZCB2ZWxvY2l0eSBiYXNlZCBvbiBpbnB1dAogIGRlc2lyZWRWZWxvY2l0eSA6PSBtb3ZlVmVjICogcGxheWVyLnN0YXRzLnNwZWVkCgogIC8vIGFwcGx5IGFjY2VsZXJhdGlvbiBvciBkZWNlbGVyYXRpb24KICBpZiBsaW5hbGcubGVuZ3RoKG1vdmVWZWMpID4gMCB7CiAgICAvLyBBY2NlbGVyYXRlIHRvd2FyZHMgZGVzaXJlZCB2ZWxvY2l0eQogICAgcGxheWVyX3ZlbG9jaXR5ID0gbGluYWxnLmxlcnAocGxheWVyX3ZlbG9jaXR5LCBkZXNpcmVkVmVsb2NpdHksIGFjY2VsICogZHQpCiAgfSBlbHNlIHsKICAgIC8vIERlY2VsZXJhdGUgd2hlbiBubyBpbnB1dAogICAgY3VycmVudFNwZWVkIDo9IGxpbmFsZy5sZW5ndGgocGxheWVyX3ZlbG9jaXR5KQogICAgaWYgY3VycmVudFNwZWVkID4gMCB7CiAgICAgIGRlY2VsQW1vdW50IDo9IGRlY2VsICogZHQKICAgICAgbmV3U3BlZWQgOj0gbWF4KDAsIGN1cnJlbnRTcGVlZCAtIGRlY2VsQW1vdW50KQogICAgICBwbGF5ZXJfdmVsb2NpdHkgPSBub3JtKHBsYXllcl92ZWxvY2l0eSkgKiBuZXdTcGVlZAogICAgfQogIH0KCiAga25vY2tiYWNrIDo9IGZsb2F0M196ZXJvCiAgaWYgcGxheWVyLmtub2NrYmFjay5wb3dlciA+IDAuMDEgZG8ga25vY2tiYWNrID0gcGxheWVyLmtub2NrYmFjay5jdXJyZW50X29mZnNldAoKICBwbGF5ZXIucG9zaXRpb24gKz0ga25vY2tiYWNrICsgcGxheWVyX3ZlbG9jaXR5ICogZHQKCgogIC8vdHJpZ2dlciBkYXNoCiAgaWYgY29yZV9pbnB1dC5hYmlsaXR5X3RyaWdnZXJlZCAmJiB0aW1lX25vdyA+IHRzX2Rhc2hfcmVhZHkgJiYgaXNfdmFsaWRfaGFuZGxlKHBsYXllci50YXJnZXQpIHsKICAgIGRhc2hpbmcgPSB0cnVlCiAgICB0YXJnZXRQb3MgOj0gZ2V0X2VudGl0eShwbGF5ZXIudGFyZ2V0KS5wb3NpdGlvbgogICAgZGlyVmVjIDo9IHRhcmdldFBvcyAtIHBsYXllci5wb3NpdGlvbgogICAgZGFzaGluZ19zdGFydCA9IHBsYXllci5wb3NpdGlvbgogICAgZGFzaGluZ19lbmQgPSB0YXJnZXRQb3MgLSBub3JtKGRpclZlYykgKiAxLjUKICAgIHRzX2Rhc2hfc3RhcnQgPSB0aW1lX25vdwogIH0KCiAgLy8gcGxheWVyIHJvdGF0aW9uCiAgbW91c2VQb3MgOj0gZ2V0X21vdXNlX3Bvc193b3JsZCgpCiAgcGxheWVyLnJvdGF0aW9uID0gbG9va19yb3QocGxheWVyLnBvc2l0aW9uLCBtb3VzZVBvcywgZmxvYXQzX3VwKQogIHBsYXllci5mb3J3YXJkID0gbm9ybShtb3VzZVBvcyAtIHBsYXllci5wb3NpdGlvbikKICBwbGF5ZXJfbW9kZWwudHJhbnNmb3JtID0gbWF0cml4X3RycyhmbG9hdDNfemVybywgZmxvYXQzX29uZSwgcGxheWVyLnJvdGF0aW9uKQoKCiAgaWYgYW5pbXNfbG9hZGVkIHsKICAgIGFuaW0gOj0gcGxheWVyX2FuaW1zW2FuaW1JbmRleF0KICAgIGFuaW1DdXJyZW50RnJhbWUgPSAoYW5pbUN1cnJlbnRGcmFtZSArIDEpICUgYW5pbS5mcmFtZUNvdW50CiAgICBybC5VcGRhdGVNb2RlbEFuaW1hdGlvbihwbGF5ZXJfbW9kZWwsIGFuaW0sIGFuaW1DdXJyZW50RnJhbWUpCiAgfQp9CgoKZHJhd19wbGF5ZXIgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9lbnRpdHkocGxheWVyX2hhbmRsZSkKICBmcmVzbmVsIDo9IHJsLkNvbG9yTm9ybWFsaXplKHBsYXllcl9mcmVzbmVsX2NvbG9yKQogIGJsYWNrIDo9IHJsLkNvbG9yTm9ybWFsaXplKHJsLkJMQUNLKQoKICBybC5TZXRTaGFkZXJWYWx1ZShkZWZhdWx0X3NoYWRlciwgbG9jX2ZyZXNuZWwsICZmcmVzbmVsLCAuVkVDNCkKICBybC5EcmF3TW9kZWwocGxheWVyX21vZGVsLCBwbGF5ZXIucG9zaXRpb24sIDEsIHJsLldISVRFKQogIHJsLlNldFNoYWRlclZhbHVlKGRlZmF1bHRfc2hhZGVyLCBsb2NfZnJlc25lbCwgJmJsYWNrLCAuVkVDNCkKfQoKZ2V0X21vdXNlX3Bvc193b3JsZCA6OiBwcm9jKCkgLT4gZmxvYXQzIAp7CiAgcmF5IDo9IHJsLkdldFNjcmVlblRvV29ybGRSYXkocmwuR2V0TW91c2VQb3NpdGlvbigpLCBjYW1lcmEpCiAgaGl0SW5mbzogcmwuUmF5Q29sbGlzaW9uCiAgaGl0SW5mbyA9IHJsLkdldFJheUNvbGxpc2lvblF1YWQocmF5LCBncm91bmRfcGxhbmVfcDEsIGdyb3VuZF9wbGFuZV9wMiwgZ3JvdW5kX3BsYW5lX3AzLCBncm91bmRfcGxhbmVfcDQpCiAgcmV0dXJuIGhpdEluZm8ucG9pbnQKfQo",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABXBAAAAAAAAFcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFgGAAAAAAAAWwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABYBgAAAAAAAFgGAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "lol"
					},
					"AwAAAFsGAAAAAAAAXAYAAAAAAAAAAAAAXAYAAAAAAABdBgAAAAAAAAAAAABdBgAAAAAAAF4GAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABbBgAAAAAAAFsGAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAF4GAAAAAAAAXwYAAAAAAAAAAAAAXwYAAAAAAABgBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABeBgAAAAAAAF4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": " 5"
					},
					"AgAAAGAGAAAAAAAAYQYAAAAAAAAAAAAAYQYAAAAAAABiBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABgBgAAAAAAAGAGAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:fmt\"\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport \"core:slice\"\r\nimport \"core:sort\"\r\nimport rl \"vendor:raylib\"\r\n\r\nplayer_handle: EntityHandle\r\n\r\n//ground plane\r\nground_plane_p1 :: float3{-1000, 0, -1000}\r\nground_plane_p2 :: float3{-1000, 0, 1000}\r\nground_plane_p3 :: float3{1000, 0, 1000}\r\nground_plane_p4 :: float3{1000, 0, -1000}\r\n\r\nanimCurrentFrame: i32\r\nanimCount: i32\r\nanimIndex: i32\r\n\r\nplayer_model: rl.Model\r\nplayer_anims: [^]rl.ModelAnimation\r\nplayer_shader: rl.Shader\r\nanims_loaded: bool\r\nplayer_accel: float\r\nsynt_atlas_1: rl.Texture\r\nplayer_fresnel_color :: rl.Color{114, 232, 195, 255}\r\nloc_fresnel: int\r\n\r\n\r\ninit_player :: proc() \r\n{\r\n  loc_fresnel = rl.GetShaderLocation(default_shader, \"fresnelColor\")\r\n  player_handle = create_entity()\r\n  player := get_entity(player_handle)\r\n  player.flags = {.player}\r\n  player.position = float3_zero\r\n  player.rotation = quaternion_identity\r\n  init_player_stats()\r\n  append(&update_procs, update_player)\r\n  append(&draw_procs, draw_player)\r\n  //create_crossbow()\r\n  create_shotgun()\r\n  create_divine_weapons()\r\n  //create_shield_dash()\r\n\r\n  test = 10\r\n\r\n  //animation test\r\n  animCount = 0\r\n  animIndex = 0\r\n  animCurrentFrame = 0\r\n\r\n  //material and shader setup\r\n  idx := load_entity_model(\"player.glb\")\r\n  player_model = entity_models[idx]\r\n  for i in 0 ..< player_model.meshCount {\r\n    smooth_all_mesh_normals(&player_model.meshes[i])\r\n  }\r\n\r\n  assign_material_all_mats(&player_model, synty_mat)\r\n\r\n  //player_model.materials[0] = synty_mat\r\n  //player_model.materials[1] = synty_mat\r\n  //player_model.materials[2] = synty_mat\r\n  if animCount != 0 {\r\n    anims_loaded = true\r\n  }\r\n  lol = 5\r\n}\r\n\r\n\r\nupdate_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  player.stats.speed = 5\r\n  accel: float = 40\r\n  decel: float = 50\r\n\r\n  // read input, construct move vector and transform move vector by camera rotation so its camera relative\r\n  moveVec := norm(float3{core_input.moveHorizontal, 0, core_input.moveVertical})\r\n  moveVec = rl.Vector3RotateByAxisAngle(moveVec, float3_up, RAD_45)\r\n  // calculate desired velocity based on input\r\n  desiredVelocity := moveVec * player.stats.speed\r\n\r\n  // apply acceleration or deceleration\r\n  if linalg.length(moveVec) > 0 {\r\n    // Accelerate towards desired velocity\r\n    player_velocity = linalg.lerp(player_velocity, desiredVelocity, accel * dt)\r\n  } else {\r\n    // Decelerate when no input\r\n    currentSpeed := linalg.length(player_velocity)\r\n    if currentSpeed > 0 {\r\n      decelAmount := decel * dt\r\n      newSpeed := max(0, currentSpeed - decelAmount)\r\n      player_velocity = norm(player_velocity) * newSpeed\r\n    }\r\n  }\r\n\r\n  knockback := float3_zero\r\n  if player.knockback.power > 0.01 do knockback = player.knockback.current_offset\r\n\r\n  player.position += knockback + player_velocity * dt\r\n\r\n\r\n  //trigger dash\r\n  if core_input.ability_triggered && time_now > ts_dash_ready && is_valid_handle(player.target) {\r\n    dashing = true\r\n    targetPos := get_entity(player.target).position\r\n    dirVec := targetPos - player.position\r\n    dashing_start = player.position\r\n    dashing_end = targetPos - norm(dirVec) * 1.5\r\n    ts_dash_start = time_now\r\n  }\r\n\r\n  // player rotation\r\n  mousePos := get_mouse_pos_world()\r\n  player.rotation = look_rot(player.position, mousePos, float3_up)\r\n  player.forward = norm(mousePos - player.position)\r\n  player_model.transform = matrix_trs(float3_zero, float3_one, player.rotation)\r\n\r\n\r\n  if anims_loaded {\r\n    anim := player_anims[animIndex]\r\n    animCurrentFrame = (animCurrentFrame + 1) % anim.frameCount\r\n    rl.UpdateModelAnimation(player_model, anim, animCurrentFrame)\r\n  }\r\n}\r\n\r\n\r\ndraw_player :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  fresnel := rl.ColorNormalize(player_fresnel_color)\r\n  black := rl.ColorNormalize(rl.BLACK)\r\n\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &fresnel, .VEC4)\r\n  rl.DrawModel(player_model, player.position, 1, rl.WHITE)\r\n  rl.SetShaderValue(default_shader, loc_fresnel, &black, .VEC4)\r\n}\r\n\r\nget_mouse_pos_world :: proc() -> float3 \r\n{\r\n  ray := rl.GetScreenToWorldRay(rl.GetMousePosition(), camera)\r\n  hitInfo: rl.RayCollision\r\n  hitInfo = rl.GetRayCollisionQuad(ray, ground_plane_p1, ground_plane_p2, ground_plane_p3, ground_plane_p4)\r\n  return hitInfo.point\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 150
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAATRAAAAAAAABNEAAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6Zm10IgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgImNvcmU6c2xpY2UiCmltcG9ydCAiY29yZTpzb3J0IgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpwbGF5ZXJfaGFuZGxlOiBFbnRpdHlIYW5kbGUKCi8vZ3JvdW5kIHBsYW5lCmdyb3VuZF9wbGFuZV9wMSA6OiBmbG9hdDN7LTEwMDAsIDAsIC0xMDAwfQpncm91bmRfcGxhbmVfcDIgOjogZmxvYXQzey0xMDAwLCAwLCAxMDAwfQpncm91bmRfcGxhbmVfcDMgOjogZmxvYXQzezEwMDAsIDAsIDEwMDB9Cmdyb3VuZF9wbGFuZV9wNCA6OiBmbG9hdDN7MTAwMCwgMCwgLTEwMDB9CgphbmltQ3VycmVudEZyYW1lOiBpMzIKYW5pbUNvdW50OiBpMzIKYW5pbUluZGV4OiBpMzIKCnBsYXllcl9tb2RlbDogcmwuTW9kZWwKcGxheWVyX2FuaW1zOiBbXl1ybC5Nb2RlbEFuaW1hdGlvbgpwbGF5ZXJfc2hhZGVyOiBybC5TaGFkZXIKYW5pbXNfbG9hZGVkOiBib29sCnBsYXllcl9hY2NlbDogZmxvYXQKc3ludF9hdGxhc18xOiBybC5UZXh0dXJlCnBsYXllcl9mcmVzbmVsX2NvbG9yIDo6IHJsLkNvbG9yezExNCwgMjMyLCAxOTUsIDI1NX0KbG9jX2ZyZXNuZWw6IGludAoKCmluaXRfcGxheWVyIDo6IHByb2MoKSAKewogIGxvY19mcmVzbmVsID0gcmwuR2V0U2hhZGVyTG9jYXRpb24oZGVmYXVsdF9zaGFkZXIsICJmcmVzbmVsQ29sb3IiKQogIHBsYXllcl9oYW5kbGUgPSBjcmVhdGVfZW50aXR5KCkKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIHBsYXllci5mbGFncyA9IHsucGxheWVyfQogIHBsYXllci5wb3NpdGlvbiA9IGZsb2F0M196ZXJvCiAgcGxheWVyLnJvdGF0aW9uID0gcXVhdGVybmlvbl9pZGVudGl0eQogIGluaXRfcGxheWVyX3N0YXRzKCkKICBhcHBlbmQoJnVwZGF0ZV9wcm9jcywgdXBkYXRlX3BsYXllcikKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfcGxheWVyKQogIC8vY3JlYXRlX2Nyb3NzYm93KCkKICBjcmVhdGVfc2hvdGd1bigpCiAgY3JlYXRlX2RpdmluZV93ZWFwb25zKCkKICAvL2NyZWF0ZV9zaGllbGRfZGFzaCgpCgogIHRlc3QgPSAxMAoKICAvL2FuaW1hdGlvbiB0ZXN0CiAgYW5pbUNvdW50ID0gMAogIGFuaW1JbmRleCA9IDAKICBhbmltQ3VycmVudEZyYW1lID0gMAoKICAvL21hdGVyaWFsIGFuZCBzaGFkZXIgc2V0dXAKICBpZHggOj0gbG9hZF9lbnRpdHlfbW9kZWwoInBsYXllci5nbGIiKQogIHBsYXllcl9tb2RlbCA9IGVudGl0eV9tb2RlbHNbaWR4XQogIGZvciBpIGluIDAgLi48IHBsYXllcl9tb2RlbC5tZXNoQ291bnQgewogICAgc21vb3RoX2FsbF9tZXNoX25vcm1hbHMoJnBsYXllcl9tb2RlbC5tZXNoZXNbaV0pCiAgfQoKICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnBsYXllcl9tb2RlbCwgc3ludHlfbWF0KQoKICAvL3BsYXllcl9tb2RlbC5tYXRlcmlhbHNbMF0gPSBzeW50eV9tYXQKICAvL3BsYXllcl9tb2RlbC5tYXRlcmlhbHNbMV0gPSBzeW50eV9tYXQKICAvL3BsYXllcl9tb2RlbC5tYXRlcmlhbHNbMl0gPSBzeW50eV9tYXQKICBpZiBhbmltQ291bnQgIT0gMCB7CiAgICBhbmltc19sb2FkZWQgPSB0cnVlCiAgfQogIGxvbCA9IDUKfQoKCnVwZGF0ZV9wbGF5ZXIgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9lbnRpdHkocGxheWVyX2hhbmRsZSkKICBwbGF5ZXIuc3RhdHMuc3BlZWQgPSA1CiAgYWNjZWw6IGZsb2F0ID0gNDAKICBkZWNlbDogZmxvYXQgPSA1MAoKICAvLyByZWFkIGlucHV0LCBjb25zdHJ1Y3QgbW92ZSB2ZWN0b3IgYW5kIHRyYW5zZm9ybSBtb3ZlIHZlY3RvciBieSBjYW1lcmEgcm90YXRpb24gc28gaXRzIGNhbWVyYSByZWxhdGl2ZQogIG1vdmVWZWMgOj0gbm9ybShmbG9hdDN7Y29yZV9pbnB1dC5tb3ZlSG9yaXpvbnRhbCwgMCwgY29yZV9pbnB1dC5tb3ZlVmVydGljYWx9KQogIG1vdmVWZWMgPSBybC5WZWN0b3IzUm90YXRlQnlBeGlzQW5nbGUobW92ZVZlYywgZmxvYXQzX3VwLCBSQURfNDUpCiAgLy8gY2FsY3VsYXRlIGRlc2lyZWQgdmVsb2NpdHkgYmFzZWQgb24gaW5wdXQKICBkZXNpcmVkVmVsb2NpdHkgOj0gbW92ZVZlYyAqIHBsYXllci5zdGF0cy5zcGVlZAoKICAvLyBhcHBseSBhY2NlbGVyYXRpb24gb3IgZGVjZWxlcmF0aW9uCiAgaWYgbGluYWxnLmxlbmd0aChtb3ZlVmVjKSA+IDAgewogICAgLy8gQWNjZWxlcmF0ZSB0b3dhcmRzIGRlc2lyZWQgdmVsb2NpdHkKICAgIHBsYXllcl92ZWxvY2l0eSA9IGxpbmFsZy5sZXJwKHBsYXllcl92ZWxvY2l0eSwgZGVzaXJlZFZlbG9jaXR5LCBhY2NlbCAqIGR0KQogIH0gZWxzZSB7CiAgICAvLyBEZWNlbGVyYXRlIHdoZW4gbm8gaW5wdXQKICAgIGN1cnJlbnRTcGVlZCA6PSBsaW5hbGcubGVuZ3RoKHBsYXllcl92ZWxvY2l0eSkKICAgIGlmIGN1cnJlbnRTcGVlZCA+IDAgewogICAgICBkZWNlbEFtb3VudCA6PSBkZWNlbCAqIGR0CiAgICAgIG5ld1NwZWVkIDo9IG1heCgwLCBjdXJyZW50U3BlZWQgLSBkZWNlbEFtb3VudCkKICAgICAgcGxheWVyX3ZlbG9jaXR5ID0gbm9ybShwbGF5ZXJfdmVsb2NpdHkpICogbmV3U3BlZWQKICAgIH0KICB9CgogIGtub2NrYmFjayA6PSBmbG9hdDNfemVybwogIGlmIHBsYXllci5rbm9ja2JhY2sucG93ZXIgPiAwLjAxIGRvIGtub2NrYmFjayA9IHBsYXllci5rbm9ja2JhY2suY3VycmVudF9vZmZzZXQKCiAgcGxheWVyLnBvc2l0aW9uICs9IGtub2NrYmFjayArIHBsYXllcl92ZWxvY2l0eSAqIGR0CgoKICAvL3RyaWdnZXIgZGFzaAogIGlmIGNvcmVfaW5wdXQuYWJpbGl0eV90cmlnZ2VyZWQgJiYgdGltZV9ub3cgPiB0c19kYXNoX3JlYWR5ICYmIGlzX3ZhbGlkX2hhbmRsZShwbGF5ZXIudGFyZ2V0KSB7CiAgICBkYXNoaW5nID0gdHJ1ZQogICAgdGFyZ2V0UG9zIDo9IGdldF9lbnRpdHkocGxheWVyLnRhcmdldCkucG9zaXRpb24KICAgIGRpclZlYyA6PSB0YXJnZXRQb3MgLSBwbGF5ZXIucG9zaXRpb24KICAgIGRhc2hpbmdfc3RhcnQgPSBwbGF5ZXIucG9zaXRpb24KICAgIGRhc2hpbmdfZW5kID0gdGFyZ2V0UG9zIC0gbm9ybShkaXJWZWMpICogMS41CiAgICB0c19kYXNoX3N0YXJ0ID0gdGltZV9ub3cKICB9CgogIC8vIHBsYXllciByb3RhdGlvbgogIG1vdXNlUG9zIDo9IGdldF9tb3VzZV9wb3Nfd29ybGQoKQogIHBsYXllci5yb3RhdGlvbiA9IGxvb2tfcm90KHBsYXllci5wb3NpdGlvbiwgbW91c2VQb3MsIGZsb2F0M191cCkKICBwbGF5ZXIuZm9yd2FyZCA9IG5vcm0obW91c2VQb3MgLSBwbGF5ZXIucG9zaXRpb24pCiAgcGxheWVyX21vZGVsLnRyYW5zZm9ybSA9IG1hdHJpeF90cnMoZmxvYXQzX3plcm8sIGZsb2F0M19vbmUsIHBsYXllci5yb3RhdGlvbikKCgogIGlmIGFuaW1zX2xvYWRlZCB7CiAgICBhbmltIDo9IHBsYXllcl9hbmltc1thbmltSW5kZXhdCiAgICBhbmltQ3VycmVudEZyYW1lID0gKGFuaW1DdXJyZW50RnJhbWUgKyAxKSAlIGFuaW0uZnJhbWVDb3VudAogICAgcmwuVXBkYXRlTW9kZWxBbmltYXRpb24ocGxheWVyX21vZGVsLCBhbmltLCBhbmltQ3VycmVudEZyYW1lKQogIH0KfQoKCmRyYXdfcGxheWVyIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfZW50aXR5KHBsYXllcl9oYW5kbGUpCiAgZnJlc25lbCA6PSBybC5Db2xvck5vcm1hbGl6ZShwbGF5ZXJfZnJlc25lbF9jb2xvcikKICBibGFjayA6PSBybC5Db2xvck5vcm1hbGl6ZShybC5CTEFDSykKCiAgcmwuU2V0U2hhZGVyVmFsdWUoZGVmYXVsdF9zaGFkZXIsIGxvY19mcmVzbmVsLCAmZnJlc25lbCwgLlZFQzQpCiAgcmwuRHJhd01vZGVsKHBsYXllcl9tb2RlbCwgcGxheWVyLnBvc2l0aW9uLCAxLCBybC5XSElURSkKICBybC5TZXRTaGFkZXJWYWx1ZShkZWZhdWx0X3NoYWRlciwgbG9jX2ZyZXNuZWwsICZibGFjaywgLlZFQzQpCn0KCmdldF9tb3VzZV9wb3Nfd29ybGQgOjogcHJvYygpIC0+IGZsb2F0MyAKewogIHJheSA6PSBybC5HZXRTY3JlZW5Ub1dvcmxkUmF5KHJsLkdldE1vdXNlUG9zaXRpb24oKSwgY2FtZXJhKQogIGhpdEluZm86IHJsLlJheUNvbGxpc2lvbgogIGhpdEluZm8gPSBybC5HZXRSYXlDb2xsaXNpb25RdWFkKHJheSwgZ3JvdW5kX3BsYW5lX3AxLCBncm91bmRfcGxhbmVfcDIsIGdyb3VuZF9wbGFuZV9wMywgZ3JvdW5kX3BsYW5lX3A0KQogIHJldHVybiBoaXRJbmZvLnBvaW50Cn0K",
					"AgAAAAAAAAABAAAASQQAAAAAAABJBAAAAAAAAAAAAAAAAPC/AQAAAAEAAABiBgAAAAAAAGIGAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "actionmap.odin",
			"settings":
			{
				"buffer_size": 1470,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "ability_triggered",
								"range":
								{
									"end":
									{
										"character": 23,
										"line": 9
									},
									"start":
									{
										"character": 2,
										"line": 9
									}
								}
							},
							{
								"newText": "ability_triggered",
								"range":
								{
									"end":
									{
										"character": 36,
										"line": 43
									},
									"start":
									{
										"character": 15,
										"line": 43
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AgAAAA0DAAAAAAAAHgMAAAAAAAAVAAAAc2hpZWxkX2Rhc2hfdHJpZ2dlcmVksAAAAAAAAADBAAAAAAAAABUAAABzaGllbGRfZGFzaF90cmlnZ2VyZWQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxAAAAAAAAADEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "ability_held",
								"range":
								{
									"end":
									{
										"character": 13,
										"line": 10
									},
									"start":
									{
										"character": 2,
										"line": 10
									}
								}
							},
							{
								"newText": "ability_held",
								"range":
								{
									"end":
									{
										"character": 26,
										"line": 42
									},
									"start":
									{
										"character": 15,
										"line": 42
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AgAAAM8CAAAAAAAA2wIAAAAAAAALAAAAc2hpZWxkX2hlbGTLAAAAAAAAANcAAAAAAAAACwAAAHNoaWVsZF9oZWxk",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport rl \"vendor:raylib\"\r\n\r\nActionMap :: struct {\r\n  active:            bool,\r\n  shootTriggered:    bool,\r\n  shootHeld:         bool,\r\n  ability_triggered: bool,\r\n  ability_held:      bool,\r\n  type:              ActionMapType,\r\n  moveVertical:      float,\r\n  moveHorizontal:    float,\r\n}\r\n\r\nActionMapType :: enum byte {\r\n  Core,\r\n  Core_UI,\r\n  Menu_UI,\r\n}\r\n\r\ncore_input: ActionMap\r\ncore_ui_input: ActionMap\r\n\r\ninit_input_handling :: proc() \r\n{\r\n  core_input = ActionMap {\r\n    type = .Core,\r\n  }\r\n  core_ui_input = ActionMap {\r\n    type = .Core_UI,\r\n  }\r\n\r\n  set_action_map(.Core)\r\n  append(&update_procs, update_input)\r\n}\r\n\r\nupdate_input :: proc() \r\n{\r\n  if core_input.active {\r\n\r\n    core_input.ability_held = rl.IsMouseButtonDown(.RIGHT)\r\n    core_input.ability_triggered = rl.IsMouseButtonDown(.RIGHT) && rl.IsMouseButtonPressed(.LEFT)\r\n    core_input.shootHeld = !rl.IsMouseButtonDown(.RIGHT) && rl.IsMouseButtonDown(.LEFT)\r\n    core_input.shootTriggered = !rl.IsMouseButtonDown(.RIGHT) && rl.IsMouseButtonPressed(.LEFT)\r\n    core_input.moveHorizontal = 0\r\n    core_input.moveVertical = 0\r\n\r\n    if rl.IsKeyDown(.W) {\r\n      core_input.moveVertical = 1\r\n    }\r\n    if (rl.IsKeyDown(.S)) {\r\n      core_input.moveVertical = -1\r\n    }\r\n    if (rl.IsKeyDown(.A)) {\r\n      core_input.moveHorizontal = 1\r\n    }\r\n    if (rl.IsKeyDown(.D)) {\r\n      core_input.moveHorizontal = -1\r\n    }\r\n  } else {\r\n    core_input = {}\r\n  }\r\n}\r\n\r\nset_action_map :: proc(type: ActionMapType) \r\n{\r\n  core_input.active = type == .Core\r\n  core_ui_input.active = type == .Core_UI\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 71
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA9QUAAAAAAAASBgAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpBY3Rpb25NYXAgOjogc3RydWN0IHsKICBhY3RpdmU6ICAgICAgICAgICAgICAgIGJvb2wsCiAgc2hvb3RUcmlnZ2VyZWQ6ICAgICAgICBib29sLAogIHNob290SGVsZDogICAgICAgICAgICAgYm9vbCwKICBhYmlsaXR5X3RyaWdnZXJlZDogYm9vbCwKICBhYmlsaXR5X2hlbGQ6ICAgICAgICAgICBib29sLAogIHR5cGU6ICAgICAgICAgICAgICAgICAgQWN0aW9uTWFwVHlwZSwKICBtb3ZlVmVydGljYWw6ICAgICAgICAgIGZsb2F0LAogIG1vdmVIb3Jpem9udGFsOiAgICAgICAgZmxvYXQsCn0KCkFjdGlvbk1hcFR5cGUgOjogZW51bSBieXRlIHsKICBDb3JlLAogIENvcmVfVUksCiAgTWVudV9VSSwKfQoKY29yZV9pbnB1dDogQWN0aW9uTWFwCmNvcmVfdWlfaW5wdXQ6IEFjdGlvbk1hcAoKaW5pdF9pbnB1dF9oYW5kbGluZyA6OiBwcm9jKCkgCnsKICBjb3JlX2lucHV0ID0gQWN0aW9uTWFwIHsKICAgIHR5cGUgPSAuQ29yZSwKICB9CiAgY29yZV91aV9pbnB1dCA9IEFjdGlvbk1hcCB7CiAgICB0eXBlID0gLkNvcmVfVUksCiAgfQoKICBzZXRfYWN0aW9uX21hcCguQ29yZSkKICBhcHBlbmQoJnVwZGF0ZV9wcm9jcywgdXBkYXRlX2lucHV0KQp9Cgp1cGRhdGVfaW5wdXQgOjogcHJvYygpIAp7CiAgaWYgY29yZV9pbnB1dC5hY3RpdmUgewoKICAgIGNvcmVfaW5wdXQuYWJpbGl0eV9oZWxkID0gcmwuSXNNb3VzZUJ1dHRvbkRvd24oLlJJR0hUKQogICAgY29yZV9pbnB1dC5hYmlsaXR5X3RyaWdnZXJlZCA9IHJsLklzTW91c2VCdXR0b25Eb3duKC5SSUdIVCkgJiYgcmwuSXNNb3VzZUJ1dHRvblByZXNzZWQoLkxFRlQpCiAgICBjb3JlX2lucHV0LnNob290SGVsZCA9ICFybC5Jc01vdXNlQnV0dG9uRG93biguUklHSFQpICYmIHJsLklzTW91c2VCdXR0b25Eb3duKC5MRUZUKQogICAgY29yZV9pbnB1dC5zaG9vdFRyaWdnZXJlZCA9ICFybC5Jc01vdXNlQnV0dG9uRG93biguUklHSFQpICYmIHJsLklzTW91c2VCdXR0b25QcmVzc2VkKC5MRUZUKQogICAgY29yZV9pbnB1dC5tb3ZlSG9yaXpvbnRhbCA9IDAKICAgIGNvcmVfaW5wdXQubW92ZVZlcnRpY2FsID0gMAoKICAgIGlmIHJsLklzS2V5RG93biguVykgewogICAgICBjb3JlX2lucHV0Lm1vdmVWZXJ0aWNhbCA9IDEKICAgIH0KICAgIGlmIChybC5Jc0tleURvd24oLlMpKSB7CiAgICAgIGNvcmVfaW5wdXQubW92ZVZlcnRpY2FsID0gLTEKICAgIH0KICAgIGlmIChybC5Jc0tleURvd24oLkEpKSB7CiAgICAgIGNvcmVfaW5wdXQubW92ZUhvcml6b250YWwgPSAxCiAgICB9CiAgICBpZiAocmwuSXNLZXlEb3duKC5EKSkgewogICAgICBjb3JlX2lucHV0Lm1vdmVIb3Jpem9udGFsID0gLTEKICAgIH0KICB9IGVsc2UgewogICAgY29yZV9pbnB1dCA9IHt9CiAgfQp9CgpzZXRfYWN0aW9uX21hcCA6OiBwcm9jKHR5cGU6IEFjdGlvbk1hcFR5cGUpIAp7CiAgY29yZV9pbnB1dC5hY3RpdmUgPSB0eXBlID09IC5Db3JlCiAgY29yZV91aV9pbnB1dC5hY3RpdmUgPSB0eXBlID09IC5Db3JlX1VJCn0K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1wAAAAAAAADXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport rl \"vendor:raylib\"\r\n\r\nActionMap :: struct {\r\n  active:            bool,\r\n  shootTriggered:    bool,\r\n  shootHeld:         bool,\r\n  ability_triggered: bool,\r\n  ability_held:      bool,\r\n  type:              ActionMapType,\r\n  moveVertical:      float,\r\n  moveHorizontal:    float,\r\n}\r\n\r\nActionMapType :: enum byte {\r\n  Core,\r\n  Core_UI,\r\n  Menu_UI,\r\n}\r\n\r\ncore_input: ActionMap\r\ncore_ui_input: ActionMap\r\n\r\ninit_input_handling :: proc() \r\n{\r\n  core_input = ActionMap {\r\n    type = .Core,\r\n  }\r\n  core_ui_input = ActionMap {\r\n    type = .Core_UI,\r\n  }\r\n\r\n  set_action_map(.Core)\r\n  append(&update_procs, update_input)\r\n}\r\n\r\nupdate_input :: proc() \r\n{\r\n  if core_input.active {\r\n\r\n    core_input.ability_held = rl.IsMouseButtonDown(.RIGHT)\r\n    core_input.ability_triggered = rl.IsMouseButtonDown(.RIGHT) && rl.IsMouseButtonPressed(.LEFT)\r\n    core_input.shootHeld = !rl.IsMouseButtonDown(.RIGHT) && rl.IsMouseButtonDown(.LEFT)\r\n    core_input.shootTriggered = !rl.IsMouseButtonDown(.RIGHT) && rl.IsMouseButtonPressed(.LEFT)\r\n    core_input.moveHorizontal = 0\r\n    core_input.moveVertical = 0\r\n\r\n    if rl.IsKeyDown(.W) {\r\n      core_input.moveVertical = 1\r\n    }\r\n    if (rl.IsKeyDown(.S)) {\r\n      core_input.moveVertical = -1\r\n    }\r\n    if (rl.IsKeyDown(.A)) {\r\n      core_input.moveHorizontal = 1\r\n    }\r\n    if (rl.IsKeyDown(.D)) {\r\n      core_input.moveHorizontal = -1\r\n    }\r\n  } else {\r\n    core_input = {}\r\n  }\r\n}\r\n\r\nset_action_map :: proc(type: ActionMapType) \r\n{\r\n  core_input.active = type == .Core\r\n  core_ui_input.active = type == .Core_UI\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 71
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA9QUAAAAAAAD1BQAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpBY3Rpb25NYXAgOjogc3RydWN0IHsKICBhY3RpdmU6ICAgICAgICAgICAgYm9vbCwKICBzaG9vdFRyaWdnZXJlZDogICAgYm9vbCwKICBzaG9vdEhlbGQ6ICAgICAgICAgYm9vbCwKICBhYmlsaXR5X3RyaWdnZXJlZDogYm9vbCwKICBhYmlsaXR5X2hlbGQ6ICAgICAgYm9vbCwKICB0eXBlOiAgICAgICAgICAgICAgQWN0aW9uTWFwVHlwZSwKICBtb3ZlVmVydGljYWw6ICAgICAgZmxvYXQsCiAgbW92ZUhvcml6b250YWw6ICAgIGZsb2F0LAp9CgpBY3Rpb25NYXBUeXBlIDo6IGVudW0gYnl0ZSB7CiAgQ29yZSwKICBDb3JlX1VJLAogIE1lbnVfVUksCn0KCmNvcmVfaW5wdXQ6IEFjdGlvbk1hcApjb3JlX3VpX2lucHV0OiBBY3Rpb25NYXAKCmluaXRfaW5wdXRfaGFuZGxpbmcgOjogcHJvYygpIAp7CiAgY29yZV9pbnB1dCA9IEFjdGlvbk1hcCB7CiAgICB0eXBlID0gLkNvcmUsCiAgfQogIGNvcmVfdWlfaW5wdXQgPSBBY3Rpb25NYXAgewogICAgdHlwZSA9IC5Db3JlX1VJLAogIH0KCiAgc2V0X2FjdGlvbl9tYXAoLkNvcmUpCiAgYXBwZW5kKCZ1cGRhdGVfcHJvY3MsIHVwZGF0ZV9pbnB1dCkKfQoKdXBkYXRlX2lucHV0IDo6IHByb2MoKSAKewogIGlmIGNvcmVfaW5wdXQuYWN0aXZlIHsKCiAgICBjb3JlX2lucHV0LmFiaWxpdHlfaGVsZCA9IHJsLklzTW91c2VCdXR0b25Eb3duKC5SSUdIVCkKICAgIGNvcmVfaW5wdXQuYWJpbGl0eV90cmlnZ2VyZWQgPSBybC5Jc01vdXNlQnV0dG9uRG93biguUklHSFQpICYmIHJsLklzTW91c2VCdXR0b25QcmVzc2VkKC5MRUZUKQogICAgY29yZV9pbnB1dC5zaG9vdEhlbGQgPSAhcmwuSXNNb3VzZUJ1dHRvbkRvd24oLlJJR0hUKSAmJiBybC5Jc01vdXNlQnV0dG9uRG93biguTEVGVCkKICAgIGNvcmVfaW5wdXQuc2hvb3RUcmlnZ2VyZWQgPSAhcmwuSXNNb3VzZUJ1dHRvbkRvd24oLlJJR0hUKSAmJiBybC5Jc01vdXNlQnV0dG9uUHJlc3NlZCguTEVGVCkKICAgIGNvcmVfaW5wdXQubW92ZUhvcml6b250YWwgPSAwCiAgICBjb3JlX2lucHV0Lm1vdmVWZXJ0aWNhbCA9IDAKCiAgICBpZiBybC5Jc0tleURvd24oLlcpIHsKICAgICAgY29yZV9pbnB1dC5tb3ZlVmVydGljYWwgPSAxCiAgICB9CiAgICBpZiAocmwuSXNLZXlEb3duKC5TKSkgewogICAgICBjb3JlX2lucHV0Lm1vdmVWZXJ0aWNhbCA9IC0xCiAgICB9CiAgICBpZiAocmwuSXNLZXlEb3duKC5BKSkgewogICAgICBjb3JlX2lucHV0Lm1vdmVIb3Jpem9udGFsID0gMQogICAgfQogICAgaWYgKHJsLklzS2V5RG93biguRCkpIHsKICAgICAgY29yZV9pbnB1dC5tb3ZlSG9yaXpvbnRhbCA9IC0xCiAgICB9CiAgfSBlbHNlIHsKICAgIGNvcmVfaW5wdXQgPSB7fQogIH0KfQoKc2V0X2FjdGlvbl9tYXAgOjogcHJvYyh0eXBlOiBBY3Rpb25NYXBUeXBlKSAKewogIGNvcmVfaW5wdXQuYWN0aXZlID0gdHlwZSA9PSAuQ29yZQogIGNvcmVfdWlfaW5wdXQuYWN0aXZlID0gdHlwZSA9PSAuQ29yZV9VSQp9Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QAAAAAAAADVAAAAAAAAAAAAAAAAoG5A"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAAIDAAAAAAAAAgMAAAAAAAA+AAAAcmwuSXNNb3VzZUJ1dHRvbkRvd24oLlJJR0hUKSAmJiBybC5Jc01vdXNlQnV0dG9uUHJlc3NlZCguTEVGVCk",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "rl."
					},
					"AwAAAAIDAAAAAAAAAwMAAAAAAAAAAAAAAwMAAAAAAAAEAwAAAAAAAAAAAAAEAwAAAAAAAAUDAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "isk"
					},
					"AwAAAAUDAAAAAAAABgMAAAAAAAAAAAAABgMAAAAAAAAHAwAAAAAAAAAAAAAHAwAAAAAAAAgDAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "isk"
					},
					"AwAAAAUDAAAAAAAABgMAAAAAAAADAAAAaXNrBgMAAAAAAAAHAwAAAAAAAAAAAAAHAwAAAAAAAAgDAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert_completion",
					{
						"completion": "IsKeyPressed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "IsKeyPressed"
					},
					"AgAAAAUDAAAAAAAABQMAAAAAAAADAAAAaXNrBQMAAAAAAAARAwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABEDAAAAAAAAEwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": ".R"
					},
					"AgAAABIDAAAAAAAAEwMAAAAAAAAAAAAAEwMAAAAAAAAUAwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert_completion",
					{
						"completion": "RIGHT",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "RIGHT"
					},
					"AgAAABMDAAAAAAAAEwMAAAAAAAABAAAAUhMDAAAAAAAAGAMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					4,
					"left_delete",
					null,
					"BAAAABcDAAAAAAAAFwMAAAAAAAABAAAAVBYDAAAAAAAAFgMAAAAAAAABAAAASBUDAAAAAAAAFQMAAAAAAAABAAAARxQDAAAAAAAAFAMAAAAAAAABAAAASQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": ".isk"
					},
					"BAAAAMQCAAAAAAAAxQIAAAAAAAAaAAAALklzTW91c2VCdXR0b25Eb3duKC5SSUdIVCnFAgAAAAAAAMYCAAAAAAAAAAAAAMYCAAAAAAAAxwIAAAAAAAAAAAAAxwIAAAAAAADIAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert_completion",
					{
						"completion": "IsKeyDown",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "IsKeyDown"
					},
					"AgAAAMUCAAAAAAAAxQIAAAAAAAADAAAAaXNrxQIAAAAAAADOAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAM4CAAAAAAAA0AIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": ".R"
					},
					"AgAAAM8CAAAAAAAA0AIAAAAAAAAAAAAA0AIAAAAAAADRAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert_completion",
					{
						"completion": "RIGHT",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "RIGHT"
					},
					"AgAAANACAAAAAAAA0AIAAAAAAAABAAAAUtACAAAAAAAA1QIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					4,
					"left_delete",
					null,
					"BAAAANQCAAAAAAAA1AIAAAAAAAABAAAAVNMCAAAAAAAA0wIAAAAAAAABAAAASNICAAAAAAAA0gIAAAAAAAABAAAAR9ECAAAAAAAA0QIAAAAAAAABAAAASQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "enemy.odin",
			"settings":
			{
				"buffer_size": 2475,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "E"
					},
					"AQAAAKwAAAAAAAAArQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAAKwAAAAAAAAArAAAAAAAAAABAAAARQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "dev"
					},
					"AwAAAKwAAAAAAAAArQAAAAAAAAAAAAAArQAAAAAAAACuAAAAAAAAAAAAAACuAAAAAAAAAK8AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAK4AAAAAAAAArgAAAAAAAAABAAAAdg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "fa"
					},
					"AgAAAK4AAAAAAAAArwAAAAAAAAAAAAAArwAAAAAAAACwAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "enemy_defau"
					},
					"CwAAAKwAAAAAAAAArQAAAAAAAAAEAAAAZGVmYa0AAAAAAAAArgAAAAAAAAAAAAAArgAAAAAAAACvAAAAAAAAAAAAAACvAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAsQAAAAAAAAAAAAAAsQAAAAAAAACyAAAAAAAAAAAAAACyAAAAAAAAALMAAAAAAAAAAAAAALMAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC1AAAAAAAAAAAAAAC1AAAAAAAAALYAAAAAAAAAAAAAALYAAAAAAAAAtwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "lt"
					},
					"AgAAALcAAAAAAAAAuAAAAAAAAAAAAAAAuAAAAAAAAAC5AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAALkAAAAAAAAAugAAAAAAAAAAAAAAugAAAAAAAAC7AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALsAAAAAAAAAvAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "entit"
					},
					"BQAAALwAAAAAAAAAvQAAAAAAAAAAAAAAvQAAAAAAAAC+AAAAAAAAAAAAAAC+AAAAAAAAAL8AAAAAAAAAAAAAAL8AAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADBAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Entity"
					},
					"AgAAALwAAAAAAAAAvAAAAAAAAAAFAAAAZW50aXS8AAAAAAAAAMIAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\nimport \"core:log\"\r\nimport \"core:math/linalg\"\r\nimport \"core:math/rand\"\r\nimport rl \"vendor:raylib\"\r\n\r\nenemies: [dynamic]EntityHandle\r\nentity_models: [dynamic]rl.Model\r\nenemy_default: Entity\r\n\r\ninit_enemies :: proc() \r\n{\r\n  idx_skeleton := load_entity_model(\"skeleton.glb\")\r\n  idx_ranger := load_entity_model(\"skeleton_ranger.glb\")\r\n\r\n\r\n  skeleton := entity_models[idx_skeleton]\r\n  ranger := entity_models[idx_ranger]\r\n  for i in 0 ..< skeleton.meshCount {\r\n    smooth_all_mesh_normals(&skeleton.meshes[i])\r\n  }\r\n  for i in 0 ..< ranger.meshCount {\r\n    smooth_all_mesh_normals(&ranger.meshes[i])\r\n  }\r\n  assign_material_all_mats(&skeleton, synty_mat)\r\n  assign_material_all_mats(&ranger, synty_mat)\r\n\r\n\r\n  enemyCount := 10\r\n  for i in 0 ..< enemyCount {\r\n    handle := create_entity()\r\n    e := get_entity(handle)\r\n    health: float\r\n    if rand.int_max(3) == 1 {\r\n      e.flags += {.enemy_ranged}\r\n      e.idx_model = idx_ranger\r\n      health = 50\r\n    } else {\r\n      e.flags += {.enemy_fodder}\r\n      e.idx_model = idx_skeleton\r\n      health = 10\r\n    }\r\n    e.stats = EntityStats {\r\n      health = health,\r\n    }\r\n    spread: float = float(enemyCount) / 2\r\n    e.position = float3{10, 0, 10} + float3{rand_range(-spread, spread), 0, rand_range(-spread, spread)}\r\n    e.collisionRadiusSqr = 1\r\n    append(&enemies, handle)\r\n  }\r\n\r\n  append(&update_procs, update_enemies)\r\n  append(&late_update_procs, late_update_enemies)\r\n  append(&draw_procs, draw_enemies)\r\n}\r\n\r\nupdate_enemies :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    dir_to_player := norm(player.position - e.position)\r\n    e.forward = dir_to_player\r\n    e.rotation = look_rot(e.position, player.position, float3_up)\r\n  }\r\n}\r\n\r\nlate_update_enemies :: proc() \r\n{\r\n  for &handle, i in enemies {\r\n    enemy := get_entity(handle)\r\n    if .dead in enemy.flags {\r\n      destroy_entity(enemy.handle)\r\n      unordered_remove(&enemies, i)\r\n    }\r\n  }\r\n}\r\n\r\ndraw_enemies :: proc() \r\n{\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    model := entity_models[e.idx_model]\r\n    for i in 0 ..< model.meshCount {\r\n      rl.DrawMesh(model.meshes[i], model.materials[i + 1], matrix_trs(e.position, float3_one, e.rotation))\r\n    }\r\n  }\r\n}\r\n\r\nget_enemies_in_range :: proc(range: float, pos: float3) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    if linalg.distance(e.position, pos) < range {\r\n      append(&list, e.handle)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 100
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAwgkAAAAAAADDCQAAcGFja2FnZSBtYWluCmltcG9ydCAiY29yZTpsb2ciCmltcG9ydCAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOm1hdGgvcmFuZCIKaW1wb3J0IHJsICJ2ZW5kb3I6cmF5bGliIgoKZW5lbWllczogW2R5bmFtaWNdRW50aXR5SGFuZGxlCmVudGl0eV9tb2RlbHM6IFtkeW5hbWljXXJsLk1vZGVsCmVuZW15X2RlZmF1bHQgOiBFbnRpdHkKCmluaXRfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBpZHhfc2tlbGV0b24gOj0gbG9hZF9lbnRpdHlfbW9kZWwoInNrZWxldG9uLmdsYiIpCiAgaWR4X3JhbmdlciA6PSBsb2FkX2VudGl0eV9tb2RlbCgic2tlbGV0b25fcmFuZ2VyLmdsYiIpCgoKICBza2VsZXRvbiA6PSBlbnRpdHlfbW9kZWxzW2lkeF9za2VsZXRvbl0KICByYW5nZXIgOj0gZW50aXR5X21vZGVsc1tpZHhfcmFuZ2VyXQogIGZvciBpIGluIDAgLi48IHNrZWxldG9uLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmc2tlbGV0b24ubWVzaGVzW2ldKQogIH0KICBmb3IgaSBpbiAwIC4uPCByYW5nZXIubWVzaENvdW50IHsKICAgIHNtb290aF9hbGxfbWVzaF9ub3JtYWxzKCZyYW5nZXIubWVzaGVzW2ldKQogIH0KICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnNrZWxldG9uLCBzeW50eV9tYXQpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZyYW5nZXIsIHN5bnR5X21hdCkKCgogIGVuZW15Q291bnQgOj0gMTAKICBmb3IgaSBpbiAwIC4uPCBlbmVteUNvdW50IHsKICAgIGhhbmRsZSA6PSBjcmVhdGVfZW50aXR5KCkKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBoZWFsdGg6IGZsb2F0CiAgICBpZiByYW5kLmludF9tYXgoMykgPT0gMSB7CiAgICAgIGUuZmxhZ3MgKz0gey5lbmVteV9yYW5nZWR9CiAgICAgIGUuaWR4X21vZGVsID0gaWR4X3JhbmdlcgogICAgICBoZWFsdGggPSA1MAogICAgfSBlbHNlIHsKICAgICAgZS5mbGFncyArPSB7LmVuZW15X2ZvZGRlcn0KICAgICAgZS5pZHhfbW9kZWwgPSBpZHhfc2tlbGV0b24KICAgICAgaGVhbHRoID0gMTAKICAgIH0KICAgIGUuc3RhdHMgPSBFbnRpdHlTdGF0cyB7CiAgICAgIGhlYWx0aCA9IGhlYWx0aCwKICAgIH0KICAgIHNwcmVhZDogZmxvYXQgPSBmbG9hdChlbmVteUNvdW50KSAvIDIKICAgIGUucG9zaXRpb24gPSBmbG9hdDN7MTAsIDAsIDEwfSArIGZsb2F0M3tyYW5kX3JhbmdlKC1zcHJlYWQsIHNwcmVhZCksIDAsIHJhbmRfcmFuZ2UoLXNwcmVhZCwgc3ByZWFkKX0KICAgIGUuY29sbGlzaW9uUmFkaXVzU3FyID0gMQogICAgYXBwZW5kKCZlbmVtaWVzLCBoYW5kbGUpCiAgfQoKICBhcHBlbmQoJnVwZGF0ZV9wcm9jcywgdXBkYXRlX2VuZW1pZXMpCiAgYXBwZW5kKCZsYXRlX3VwZGF0ZV9wcm9jcywgbGF0ZV91cGRhdGVfZW5lbWllcykKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfZW5lbWllcykKfQoKdXBkYXRlX2VuZW1pZXMgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9lbnRpdHkocGxheWVyX2hhbmRsZSkKICBmb3IgJmhhbmRsZSBpbiBlbmVtaWVzIHsKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBkaXJfdG9fcGxheWVyIDo9IG5vcm0ocGxheWVyLnBvc2l0aW9uIC0gZS5wb3NpdGlvbikKICAgIGUuZm9yd2FyZCA9IGRpcl90b19wbGF5ZXIKICAgIGUucm90YXRpb24gPSBsb29rX3JvdChlLnBvc2l0aW9uLCBwbGF5ZXIucG9zaXRpb24sIGZsb2F0M191cCkKICB9Cn0KCmxhdGVfdXBkYXRlX2VuZW1pZXMgOjogcHJvYygpIAp7CiAgZm9yICZoYW5kbGUsIGkgaW4gZW5lbWllcyB7CiAgICBlbmVteSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGlmIC5kZWFkIGluIGVuZW15LmZsYWdzIHsKICAgICAgZGVzdHJveV9lbnRpdHkoZW5lbXkuaGFuZGxlKQogICAgICB1bm9yZGVyZWRfcmVtb3ZlKCZlbmVtaWVzLCBpKQogICAgfQogIH0KfQoKZHJhd19lbmVtaWVzIDo6IHByb2MoKSAKewogIGZvciAmaGFuZGxlIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIG1vZGVsIDo9IGVudGl0eV9tb2RlbHNbZS5pZHhfbW9kZWxdCiAgICBmb3IgaSBpbiAwIC4uPCBtb2RlbC5tZXNoQ291bnQgewogICAgICBybC5EcmF3TWVzaChtb2RlbC5tZXNoZXNbaV0sIG1vZGVsLm1hdGVyaWFsc1tpICsgMV0sIG1hdHJpeF90cnMoZS5wb3NpdGlvbiwgZmxvYXQzX29uZSwgZS5yb3RhdGlvbikpCiAgICB9CiAgfQp9CgpnZXRfZW5lbWllc19pbl9yYW5nZSA6OiBwcm9jKHJhbmdlOiBmbG9hdCwgcG9zOiBmbG9hdDMpIC0+IFtkeW5hbWljXUVudGl0eUhhbmRsZSAKewogIGxpc3QgOj0gbWFrZShbZHluYW1pY11FbnRpdHlIYW5kbGUsIGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgZm9yICZoYW5kbGUgaW4gZW5lbWllcyB7CiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgaWYgbGluYWxnLmRpc3RhbmNlKGUucG9zaXRpb24sIHBvcykgPCByYW5nZSB7CiAgICAgIGFwcGVuZCgmbGlzdCwgZS5oYW5kbGUpCiAgICB9CiAgfQogIHJldHVybiBsaXN0Cn0K",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAAEkBAAAAAAAASQEAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\nenemyd"
					},
					"BwAAAEkBAAAAAAAATAEAAAAAAAAAAAAATAEAAAAAAABNAQAAAAAAAAAAAABNAQAAAAAAAE4BAAAAAAAAAAAAAE4BAAAAAAAATwEAAAAAAAAAAAAATwEAAAAAAABQAQAAAAAAAAAAAABQAQAAAAAAAFEBAAAAAAAAAAAAAFEBAAAAAAAAUgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAFIBAAAAAAAAUwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "enemy_default"
					},
					"AgAAAEwBAAAAAAAATAEAAAAAAAAHAAAAZW5lbXlkZUwBAAAAAAAAWQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFkBAAAAAAAAWgEAAAAAAAAAAAAAWgEAAAAAAABbAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " Ent"
					},
					"BAAAAFsBAAAAAAAAXAEAAAAAAAAAAAAAXAEAAAAAAABdAQAAAAAAAAAAAABdAQAAAAAAAF4BAAAAAAAAAAAAAF4BAAAAAAAAXwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Entity"
					},
					"AgAAAFwBAAAAAAAAXAEAAAAAAAADAAAARW50XAEAAAAAAABiAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGIBAAAAAAAAZAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BAAAAGMBAAAAAAAAZgEAAAAAAAAAAAAAZgEAAAAAAABpAQAAAAAAAAAAAABkAQAAAAAAAGQBAAAAAAAAAgAAACAgZAEAAAAAAABoAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "active"
					},
					"AQAAAGgBAAAAAAAAbgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAG4BAAAAAAAAbwEAAAAAAAAAAAAAbwEAAAAAAABwAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAHABAAAAAAAAcQEAAAAAAAAAAAAAcQEAAAAAAAByAQAAAAAAAAAAAAByAQAAAAAAAHMBAAAAAAAAAAAAAHMBAAAAAAAAdAEAAAAAAAAAAAAAdAEAAAAAAAB1AQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAGgBAAAAAAAAaAEAAAAAAAANAAAAYWN0aXZlID0gdHJ1ZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "collisionRadiusSqr"
					},
					"AQAAAGgBAAAAAAAAegEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHoBAAAAAAAAewEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAHsBAAAAAAAAfAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"left_delete",
					null,
					"AQAAAHsBAAAAAAAAewEAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAHsBAAAAAAAAfAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " 1,"
					},
					"AwAAAHwBAAAAAAAAfQEAAAAAAAAAAAAAfQEAAAAAAAB+AQAAAAAAAAAAAAB+AQAAAAAAAH8BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAH8BAAAAAAAAhAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "flags"
					},
					"AQAAAIQBAAAAAAAAiQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAIkBAAAAAAAAigEAAAAAAAAAAAAAigEAAAAAAACLAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " 6"
					},
					"AgAAAIsBAAAAAAAAjAEAAAAAAAAAAAAAjAEAAAAAAACNAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					2,
					"left_delete",
					null,
					"AgAAAIwBAAAAAAAAjAEAAAAAAAABAAAANosBAAAAAAAAiwEAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIsBAAAAAAAAjQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIwBAAAAAAAAjQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"left_delete",
					null,
					"AQAAAIQBAAAAAAAAhAEAAAAAAAAKAAAAZmxhZ3MgPXsufQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"cut",
					null,
					"AQAAAA4FAAAAAAAADgUAAAAAAAAdAAAAICAgIGUuY29sbGlzaW9uUmFkaXVzU3FyID0gMQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "\ne"
					},
					"AwAAAFgDAAAAAAAAXQMAAAAAAAAAAAAAgAEAAAAAAACAAQAAAAAAAAQAAAAgICAgWQMAAAAAAABaAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFoDAAAAAAAAWwMAAAAAAAAAAAAAWwMAAAAAAABcAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " copyfr"
					},
					"BwAAAFwDAAAAAAAAXQMAAAAAAAAAAAAAXQMAAAAAAABeAwAAAAAAAAAAAABeAwAAAAAAAF8DAAAAAAAAAAAAAF8DAAAAAAAAYAMAAAAAAAAAAAAAYAMAAAAAAABhAwAAAAAAAAAAAABhAwAAAAAAAGIDAAAAAAAAAAAAAGIDAAAAAAAAYwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					2,
					"left_delete",
					null,
					"AgAAAGIDAAAAAAAAYgMAAAAAAAABAAAAcmEDAAAAAAAAYQMAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "_f"
					},
					"AgAAAGEDAAAAAAAAYgMAAAAAAAAAAAAAYgMAAAAAAABjAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "rom"
					},
					"AwAAAGMDAAAAAAAAZAMAAAAAAAAAAAAAZAMAAAAAAABlAwAAAAAAAAAAAABlAwAAAAAAAGYDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "new_from"
					},
					"CAAAAF0DAAAAAAAAXgMAAAAAAAAJAAAAY29weV9mcm9tXgMAAAAAAABfAwAAAAAAAAAAAABfAwAAAAAAAGADAAAAAAAAAAAAAGADAAAAAAAAYQMAAAAAAAAAAAAAYQMAAAAAAABiAwAAAAAAAAAAAABiAwAAAAAAAGMDAAAAAAAAAAAAAGMDAAAAAAAAZAMAAAAAAAAAAAAAZAMAAAAAAABlAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "clone_"
					},
					"BgAAAF0DAAAAAAAAXgMAAAAAAAAIAAAAbmV3X2Zyb21eAwAAAAAAAF8DAAAAAAAAAAAAAF8DAAAAAAAAYAMAAAAAAAAAAAAAYAMAAAAAAABhAwAAAAAAAAAAAABhAwAAAAAAAGIDAAAAAAAAAAAAAGIDAAAAAAAAYwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					83,
					6,
					"left_delete",
					null,
					"BgAAAGIDAAAAAAAAYgMAAAAAAAABAAAAX2EDAAAAAAAAYQMAAAAAAAABAAAAZWADAAAAAAAAYAMAAAAAAAABAAAAbl8DAAAAAAAAXwMAAAAAAAABAAAAb14DAAAAAAAAXgMAAAAAAAABAAAAbF0DAAAAAAAAXQMAAAAAAAABAAAAYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "new_clo"
					},
					"BwAAAF0DAAAAAAAAXgMAAAAAAAAAAAAAXgMAAAAAAABfAwAAAAAAAAAAAABfAwAAAAAAAGADAAAAAAAAAAAAAGADAAAAAAAAYQMAAAAAAAAAAAAAYQMAAAAAAABiAwAAAAAAAAAAAABiAwAAAAAAAGMDAAAAAAAAAAAAAGMDAAAAAAAAZAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "new_clone(data: $T, allocator := context.allocator, loc := #caller_location) "
					},
					"AgAAAF0DAAAAAAAAXQMAAAAAAAAHAAAAbmV3X2Nsb10DAAAAAAAAZgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGYDAAAAAAAAaAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "enemy"
					},
					"BQAAAGcDAAAAAAAAaAMAAAAAAAAAAAAAaAMAAAAAAABpAwAAAAAAAAAAAABpAwAAAAAAAGoDAAAAAAAAAAAAAGoDAAAAAAAAawMAAAAAAAAAAAAAawMAAAAAAABsAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "de"
					},
					"AgAAAGwDAAAAAAAAbQMAAAAAAAAAAAAAbQMAAAAAAABuAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "enemy_default"
					},
					"AgAAAGcDAAAAAAAAZwMAAAAAAAAHAAAAZW5lbXlkZWcDAAAAAAAAdAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\nimport \"core:log\"\r\nimport \"core:math/linalg\"\r\nimport \"core:math/rand\"\r\nimport rl \"vendor:raylib\"\r\n\r\nenemies: [dynamic]EntityHandle\r\nentity_models: [dynamic]rl.Model\r\nenemy_default: Entity\r\n\r\ninit_enemies :: proc() \r\n{\r\n  idx_skeleton := load_entity_model(\"skeleton.glb\")\r\n  idx_ranger := load_entity_model(\"skeleton_ranger.glb\")\r\n  enemy_default = Entity {\r\n    collisionRadiusSqr = 1,\r\n  }\r\n\r\n  skeleton := entity_models[idx_skeleton]\r\n  ranger := entity_models[idx_ranger]\r\n  for i in 0 ..< skeleton.meshCount {\r\n    smooth_all_mesh_normals(&skeleton.meshes[i])\r\n  }\r\n  for i in 0 ..< ranger.meshCount {\r\n    smooth_all_mesh_normals(&ranger.meshes[i])\r\n  }\r\n  assign_material_all_mats(&skeleton, synty_mat)\r\n  assign_material_all_mats(&ranger, synty_mat)\r\n\r\n\r\n  enemyCount := 10\r\n  for i in 0 ..< enemyCount {\r\n    handle := create_entity()\r\n    e := get_entity(handle)\r\n    e = new_clone(enemy_default)\r\n    health: float\r\n    if rand.int_max(3) == 1 {\r\n      e.flags += {.enemy_ranged}\r\n      e.idx_model = idx_ranger\r\n      health = 50\r\n    } else {\r\n      e.flags += {.enemy_fodder}\r\n      e.idx_model = idx_skeleton\r\n      health = 10\r\n    }\r\n    e.stats = EntityStats {\r\n      health = health,\r\n    }\r\n    spread: float = float(enemyCount) / 2\r\n    e.position = float3{10, 0, 10} + float3{rand_range(-spread, spread), 0, rand_range(-spread, spread)}\r\n    append(&enemies, handle)\r\n  }\r\n\r\n  append(&update_procs, update_enemies)\r\n  append(&late_update_procs, late_update_enemies)\r\n  append(&draw_procs, draw_enemies)\r\n}\r\n\r\nupdate_enemies :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    dir_to_player := norm(player.position - e.position)\r\n    e.forward = dir_to_player\r\n    e.rotation = look_rot(e.position, player.position, float3_up)\r\n  }\r\n}\r\n\r\nlate_update_enemies :: proc() \r\n{\r\n  for &handle, i in enemies {\r\n    enemy := get_entity(handle)\r\n    if .dead in enemy.flags {\r\n      destroy_entity(enemy.handle)\r\n      unordered_remove(&enemies, i)\r\n    }\r\n  }\r\n}\r\n\r\ndraw_enemies :: proc() \r\n{\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    model := entity_models[e.idx_model]\r\n    for i in 0 ..< model.meshCount {\r\n      rl.DrawMesh(model.meshes[i], model.materials[i + 1], matrix_trs(e.position, float3_one, e.rotation))\r\n    }\r\n  }\r\n}\r\n\r\nget_enemies_in_range :: proc(range: float, pos: float3) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    if linalg.distance(e.position, pos) < range {\r\n      append(&list, e.handle)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 103
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAAAoAAAAAAAAACgAAcGFja2FnZSBtYWluCmltcG9ydCAiY29yZTpsb2ciCmltcG9ydCAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOm1hdGgvcmFuZCIKaW1wb3J0IHJsICJ2ZW5kb3I6cmF5bGliIgoKZW5lbWllczogW2R5bmFtaWNdRW50aXR5SGFuZGxlCmVudGl0eV9tb2RlbHM6IFtkeW5hbWljXXJsLk1vZGVsCmVuZW15X2RlZmF1bHQ6IEVudGl0eQoKaW5pdF9lbmVtaWVzIDo6IHByb2MoKSAKewogIGlkeF9za2VsZXRvbiA6PSBsb2FkX2VudGl0eV9tb2RlbCgic2tlbGV0b24uZ2xiIikKICBpZHhfcmFuZ2VyIDo9IGxvYWRfZW50aXR5X21vZGVsKCJza2VsZXRvbl9yYW5nZXIuZ2xiIikKICBlbmVteV9kZWZhdWx0ID0gRW50aXR5ewogICAgY29sbGlzaW9uUmFkaXVzU3FyID0gMSwKCiAgfQoKICBza2VsZXRvbiA6PSBlbnRpdHlfbW9kZWxzW2lkeF9za2VsZXRvbl0KICByYW5nZXIgOj0gZW50aXR5X21vZGVsc1tpZHhfcmFuZ2VyXQogIGZvciBpIGluIDAgLi48IHNrZWxldG9uLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmc2tlbGV0b24ubWVzaGVzW2ldKQogIH0KICBmb3IgaSBpbiAwIC4uPCByYW5nZXIubWVzaENvdW50IHsKICAgIHNtb290aF9hbGxfbWVzaF9ub3JtYWxzKCZyYW5nZXIubWVzaGVzW2ldKQogIH0KICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnNrZWxldG9uLCBzeW50eV9tYXQpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZyYW5nZXIsIHN5bnR5X21hdCkKCgogIGVuZW15Q291bnQgOj0gMTAKICBmb3IgaSBpbiAwIC4uPCBlbmVteUNvdW50IHsKICAgIGhhbmRsZSA6PSBjcmVhdGVfZW50aXR5KCkKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBlID0gbmV3X2Nsb25lKGVuZW15X2RlZmF1bHQpCiAgICBoZWFsdGg6IGZsb2F0CiAgICBpZiByYW5kLmludF9tYXgoMykgPT0gMSB7CiAgICAgIGUuZmxhZ3MgKz0gey5lbmVteV9yYW5nZWR9CiAgICAgIGUuaWR4X21vZGVsID0gaWR4X3JhbmdlcgogICAgICBoZWFsdGggPSA1MAogICAgfSBlbHNlIHsKICAgICAgZS5mbGFncyArPSB7LmVuZW15X2ZvZGRlcn0KICAgICAgZS5pZHhfbW9kZWwgPSBpZHhfc2tlbGV0b24KICAgICAgaGVhbHRoID0gMTAKICAgIH0KICAgIGUuc3RhdHMgPSBFbnRpdHlTdGF0cyB7CiAgICAgIGhlYWx0aCA9IGhlYWx0aCwKICAgIH0KICAgIHNwcmVhZDogZmxvYXQgPSBmbG9hdChlbmVteUNvdW50KSAvIDIKICAgIGUucG9zaXRpb24gPSBmbG9hdDN7MTAsIDAsIDEwfSArIGZsb2F0M3tyYW5kX3JhbmdlKC1zcHJlYWQsIHNwcmVhZCksIDAsIHJhbmRfcmFuZ2UoLXNwcmVhZCwgc3ByZWFkKX0KICAgIGFwcGVuZCgmZW5lbWllcywgaGFuZGxlKQogIH0KCiAgYXBwZW5kKCZ1cGRhdGVfcHJvY3MsIHVwZGF0ZV9lbmVtaWVzKQogIGFwcGVuZCgmbGF0ZV91cGRhdGVfcHJvY3MsIGxhdGVfdXBkYXRlX2VuZW1pZXMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2VuZW1pZXMpCn0KCnVwZGF0ZV9lbmVtaWVzIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfZW50aXR5KHBsYXllcl9oYW5kbGUpCiAgZm9yICZoYW5kbGUgaW4gZW5lbWllcyB7CiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgZGlyX3RvX3BsYXllciA6PSBub3JtKHBsYXllci5wb3NpdGlvbiAtIGUucG9zaXRpb24pCiAgICBlLmZvcndhcmQgPSBkaXJfdG9fcGxheWVyCiAgICBlLnJvdGF0aW9uID0gbG9va19yb3QoZS5wb3NpdGlvbiwgcGxheWVyLnBvc2l0aW9uLCBmbG9hdDNfdXApCiAgfQp9CgpsYXRlX3VwZGF0ZV9lbmVtaWVzIDo6IHByb2MoKSAKewogIGZvciAmaGFuZGxlLCBpIGluIGVuZW1pZXMgewogICAgZW5lbXkgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBpZiAuZGVhZCBpbiBlbmVteS5mbGFncyB7CiAgICAgIGRlc3Ryb3lfZW50aXR5KGVuZW15LmhhbmRsZSkKICAgICAgdW5vcmRlcmVkX3JlbW92ZSgmZW5lbWllcywgaSkKICAgIH0KICB9Cn0KCmRyYXdfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBmb3IgJmhhbmRsZSBpbiBlbmVtaWVzIHsKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBtb2RlbCA6PSBlbnRpdHlfbW9kZWxzW2UuaWR4X21vZGVsXQogICAgZm9yIGkgaW4gMCAuLjwgbW9kZWwubWVzaENvdW50IHsKICAgICAgcmwuRHJhd01lc2gobW9kZWwubWVzaGVzW2ldLCBtb2RlbC5tYXRlcmlhbHNbaSArIDFdLCBtYXRyaXhfdHJzKGUucG9zaXRpb24sIGZsb2F0M19vbmUsIGUucm90YXRpb24pKQogICAgfQogIH0KfQoKZ2V0X2VuZW1pZXNfaW5fcmFuZ2UgOjogcHJvYyhyYW5nZTogZmxvYXQsIHBvczogZmxvYXQzKSAtPiBbZHluYW1pY11FbnRpdHlIYW5kbGUgCnsKICBsaXN0IDo9IG1ha2UoW2R5bmFtaWNdRW50aXR5SGFuZGxlLCBjb250ZXh0LnRlbXBfYWxsb2NhdG9yKQogIGZvciAmaGFuZGxlIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGlmIGxpbmFsZy5kaXN0YW5jZShlLnBvc2l0aW9uLCBwb3MpIDwgcmFuZ2UgewogICAgICBhcHBlbmQoJmxpc3QsIGUuaGFuZGxlKQogICAgfQogIH0KICByZXR1cm4gbGlzdAp9Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\nimport \"core:log\"\r\nimport \"core:math/linalg\"\r\nimport \"core:math/rand\"\r\nimport rl \"vendor:raylib\"\r\n\r\nenemies: [dynamic]EntityHandle\r\nentity_models: [dynamic]rl.Model\r\nenemy_default: Entity\r\n\r\ninit_enemies :: proc() \r\n{\r\n  idx_skeleton := load_entity_model(\"skeleton.glb\")\r\n  idx_ranger := load_entity_model(\"skeleton_ranger.glb\")\r\n  enemy_default = Entity {\r\n    collisionRadiusSqr = 1,\r\n  }\r\n\r\n  skeleton := entity_models[idx_skeleton]\r\n  ranger := entity_models[idx_ranger]\r\n  for i in 0 ..< skeleton.meshCount {\r\n    smooth_all_mesh_normals(&skeleton.meshes[i])\r\n  }\r\n  for i in 0 ..< ranger.meshCount {\r\n    smooth_all_mesh_normals(&ranger.meshes[i])\r\n  }\r\n  assign_material_all_mats(&skeleton, synty_mat)\r\n  assign_material_all_mats(&ranger, synty_mat)\r\n\r\n\r\n  enemyCount := 10\r\n  for i in 0 ..< enemyCount {\r\n    handle := create_entity()\r\n    e := get_entity(handle)\r\n    e = new_clone(enemy_default)\r\n    health: float\r\n    if rand.int_max(3) == 1 {\r\n      e.flags += {.enemy_ranged}\r\n      e.idx_model = idx_ranger\r\n      health = 50\r\n    } else {\r\n      e.flags += {.enemy_fodder}\r\n      e.idx_model = idx_skeleton\r\n      health = 10\r\n    }\r\n    e.stats = EntityStats {\r\n      health = health,\r\n    }\r\n    spread: float = float(enemyCount) / 2\r\n    e.position = float3{10, 0, 10} + float3{rand_range(-spread, spread), 0, rand_range(-spread, spread)}\r\n    append(&enemies, handle)\r\n  }\r\n\r\n  append(&update_procs, update_enemies)\r\n  append(&late_update_procs, late_update_enemies)\r\n  append(&draw_procs, draw_enemies)\r\n}\r\n\r\nupdate_enemies :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    dir_to_player := norm(player.position - e.position)\r\n    e.forward = dir_to_player\r\n    e.rotation = look_rot(e.position, player.position, float3_up)\r\n  }\r\n}\r\n\r\nlate_update_enemies :: proc() \r\n{\r\n  for &handle, i in enemies {\r\n    enemy := get_entity(handle)\r\n    if .dead in enemy.flags {\r\n      destroy_entity(enemy.handle)\r\n      unordered_remove(&enemies, i)\r\n    }\r\n  }\r\n}\r\n\r\ndraw_enemies :: proc() \r\n{\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    model := entity_models[e.idx_model]\r\n    for i in 0 ..< model.meshCount {\r\n      rl.DrawMesh(model.meshes[i], model.materials[i + 1], matrix_trs(e.position, float3_one, e.rotation))\r\n    }\r\n  }\r\n}\r\n\r\nget_enemies_in_range :: proc(range: float, pos: float3) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    if linalg.distance(e.position, pos) < range {\r\n      append(&list, e.handle)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 102
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAAAoAAAAAAAAACgAAcGFja2FnZSBtYWluCmltcG9ydCAiY29yZTpsb2ciCmltcG9ydCAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOm1hdGgvcmFuZCIKaW1wb3J0IHJsICJ2ZW5kb3I6cmF5bGliIgoKZW5lbWllczogW2R5bmFtaWNdRW50aXR5SGFuZGxlCmVudGl0eV9tb2RlbHM6IFtkeW5hbWljXXJsLk1vZGVsCmVuZW15X2RlZmF1bHQ6IEVudGl0eQoKaW5pdF9lbmVtaWVzIDo6IHByb2MoKSAKewogIGlkeF9za2VsZXRvbiA6PSBsb2FkX2VudGl0eV9tb2RlbCgic2tlbGV0b24uZ2xiIikKICBpZHhfcmFuZ2VyIDo9IGxvYWRfZW50aXR5X21vZGVsKCJza2VsZXRvbl9yYW5nZXIuZ2xiIikKICBlbmVteV9kZWZhdWx0ID0gRW50aXR5IHsKICAgIGNvbGxpc2lvblJhZGl1c1NxciA9IDEsCiAgfQoKICBza2VsZXRvbiA6PSBlbnRpdHlfbW9kZWxzW2lkeF9za2VsZXRvbl0KICByYW5nZXIgOj0gZW50aXR5X21vZGVsc1tpZHhfcmFuZ2VyXQogIGZvciBpIGluIDAgLi48IHNrZWxldG9uLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmc2tlbGV0b24ubWVzaGVzW2ldKQogIH0KICBmb3IgaSBpbiAwIC4uPCByYW5nZXIubWVzaENvdW50IHsKICAgIHNtb290aF9hbGxfbWVzaF9ub3JtYWxzKCZyYW5nZXIubWVzaGVzW2ldKQogIH0KICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnNrZWxldG9uLCBzeW50eV9tYXQpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZyYW5nZXIsIHN5bnR5X21hdCkKCgogIGVuZW15Q291bnQgOj0gMTAKICBmb3IgaSBpbiAwIC4uPCBlbmVteUNvdW50IHsKICAgIGhhbmRsZSA6PSBjcmVhdGVfZW50aXR5KCkKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBlID0gbmV3X2Nsb25lKGVuZW15X2RlZmF1bHQpCiAgICBoZWFsdGg6IGZsb2F0CiAgICBpZiByYW5kLmludF9tYXgoMykgPT0gMSB7CiAgICAgIGUuZmxhZ3MgKz0gey5lbmVteV9yYW5nZWR9CiAgICAgIGUuaWR4X21vZGVsID0gaWR4X3JhbmdlcgogICAgICBoZWFsdGggPSA1MAogICAgfSBlbHNlIHsKICAgICAgZS5mbGFncyArPSB7LmVuZW15X2ZvZGRlcn0KICAgICAgZS5pZHhfbW9kZWwgPSBpZHhfc2tlbGV0b24KICAgICAgaGVhbHRoID0gMTAKICAgIH0KICAgIGUuc3RhdHMgPSBFbnRpdHlTdGF0cyB7CiAgICAgIGhlYWx0aCA9IGhlYWx0aCwKICAgIH0KICAgIHNwcmVhZDogZmxvYXQgPSBmbG9hdChlbmVteUNvdW50KSAvIDIKICAgIGUucG9zaXRpb24gPSBmbG9hdDN7MTAsIDAsIDEwfSArIGZsb2F0M3tyYW5kX3JhbmdlKC1zcHJlYWQsIHNwcmVhZCksIDAsIHJhbmRfcmFuZ2UoLXNwcmVhZCwgc3ByZWFkKX0KICAgIGFwcGVuZCgmZW5lbWllcywgaGFuZGxlKQogIH0KCiAgYXBwZW5kKCZ1cGRhdGVfcHJvY3MsIHVwZGF0ZV9lbmVtaWVzKQogIGFwcGVuZCgmbGF0ZV91cGRhdGVfcHJvY3MsIGxhdGVfdXBkYXRlX2VuZW1pZXMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2VuZW1pZXMpCn0KCnVwZGF0ZV9lbmVtaWVzIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfZW50aXR5KHBsYXllcl9oYW5kbGUpCiAgZm9yICZoYW5kbGUgaW4gZW5lbWllcyB7CiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgZGlyX3RvX3BsYXllciA6PSBub3JtKHBsYXllci5wb3NpdGlvbiAtIGUucG9zaXRpb24pCiAgICBlLmZvcndhcmQgPSBkaXJfdG9fcGxheWVyCiAgICBlLnJvdGF0aW9uID0gbG9va19yb3QoZS5wb3NpdGlvbiwgcGxheWVyLnBvc2l0aW9uLCBmbG9hdDNfdXApCiAgfQp9CgpsYXRlX3VwZGF0ZV9lbmVtaWVzIDo6IHByb2MoKSAKewogIGZvciAmaGFuZGxlLCBpIGluIGVuZW1pZXMgewogICAgZW5lbXkgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBpZiAuZGVhZCBpbiBlbmVteS5mbGFncyB7CiAgICAgIGRlc3Ryb3lfZW50aXR5KGVuZW15LmhhbmRsZSkKICAgICAgdW5vcmRlcmVkX3JlbW92ZSgmZW5lbWllcywgaSkKICAgIH0KICB9Cn0KCmRyYXdfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBmb3IgJmhhbmRsZSBpbiBlbmVtaWVzIHsKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBtb2RlbCA6PSBlbnRpdHlfbW9kZWxzW2UuaWR4X21vZGVsXQogICAgZm9yIGkgaW4gMCAuLjwgbW9kZWwubWVzaENvdW50IHsKICAgICAgcmwuRHJhd01lc2gobW9kZWwubWVzaGVzW2ldLCBtb2RlbC5tYXRlcmlhbHNbaSArIDFdLCBtYXRyaXhfdHJzKGUucG9zaXRpb24sIGZsb2F0M19vbmUsIGUucm90YXRpb24pKQogICAgfQogIH0KfQoKZ2V0X2VuZW1pZXNfaW5fcmFuZ2UgOjogcHJvYyhyYW5nZTogZmxvYXQsIHBvczogZmxvYXQzKSAtPiBbZHluYW1pY11FbnRpdHlIYW5kbGUgCnsKICBsaXN0IDo9IG1ha2UoW2R5bmFtaWNdRW50aXR5SGFuZGxlLCBjb250ZXh0LnRlbXBfYWxsb2NhdG9yKQogIGZvciAmaGFuZGxlIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGlmIGxpbmFsZy5kaXN0YW5jZShlLnBvc2l0aW9uLCBwb3MpIDwgcmFuZ2UgewogICAgICBhcHBlbmQoJmxpc3QsIGUuaGFuZGxlKQogICAgfQogIH0KICByZXR1cm4gbGlzdAp9Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHUDAAAAAAAAegMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\nimport \"core:log\"\r\nimport \"core:math/linalg\"\r\nimport \"core:math/rand\"\r\nimport rl \"vendor:raylib\"\r\n\r\nenemies: [dynamic]EntityHandle\r\nentity_models: [dynamic]rl.Model\r\nenemy_default: Entity\r\n\r\ninit_enemies :: proc() \r\n{\r\n  idx_skeleton := load_entity_model(\"skeleton.glb\")\r\n  idx_ranger := load_entity_model(\"skeleton_ranger.glb\")\r\n  enemy_default = Entity {\r\n    collisionRadiusSqr = 1,\r\n  }\r\n\r\n  skeleton := entity_models[idx_skeleton]\r\n  ranger := entity_models[idx_ranger]\r\n  for i in 0 ..< skeleton.meshCount {\r\n    smooth_all_mesh_normals(&skeleton.meshes[i])\r\n  }\r\n  for i in 0 ..< ranger.meshCount {\r\n    smooth_all_mesh_normals(&ranger.meshes[i])\r\n  }\r\n  assign_material_all_mats(&skeleton, synty_mat)\r\n  assign_material_all_mats(&ranger, synty_mat)\r\n\r\n\r\n  enemyCount := 10\r\n  for i in 0 ..< enemyCount {\r\n    handle := create_entity()\r\n    e := get_entity(handle)\r\n    e = new_clone(enemy_default)\r\n\r\n    health: float\r\n    if rand.int_max(3) == 1 {\r\n      e.flags += {.enemy_ranged}\r\n      e.idx_model = idx_ranger\r\n      health = 50\r\n    } else {\r\n      e.flags += {.enemy_fodder}\r\n      e.idx_model = idx_skeleton\r\n      health = 10\r\n    }\r\n    e.stats = EntityStats {\r\n      health = health,\r\n    }\r\n    spread: float = float(enemyCount) / 2\r\n    e.position = float3{10, 0, 10} + float3{rand_range(-spread, spread), 0, rand_range(-spread, spread)}\r\n    append(&enemies, handle)\r\n  }\r\n\r\n  append(&update_procs, update_enemies)\r\n  append(&late_update_procs, late_update_enemies)\r\n  append(&draw_procs, draw_enemies)\r\n}\r\n\r\nupdate_enemies :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    dir_to_player := norm(player.position - e.position)\r\n    e.forward = dir_to_player\r\n    e.rotation = look_rot(e.position, player.position, float3_up)\r\n  }\r\n}\r\n\r\nlate_update_enemies :: proc() \r\n{\r\n  for &handle, i in enemies {\r\n    enemy := get_entity(handle)\r\n    if .dead in enemy.flags {\r\n      destroy_entity(enemy.handle)\r\n      unordered_remove(&enemies, i)\r\n    }\r\n  }\r\n}\r\n\r\ndraw_enemies :: proc() \r\n{\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    model := entity_models[e.idx_model]\r\n    for i in 0 ..< model.meshCount {\r\n      rl.DrawMesh(model.meshes[i], model.materials[i + 1], matrix_trs(e.position, float3_one, e.rotation))\r\n    }\r\n  }\r\n}\r\n\r\nget_enemies_in_range :: proc(range: float, pos: float3) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    if linalg.distance(e.position, pos) < range {\r\n      append(&list, e.handle)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 103
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAAQoAAAAAAAAFCgAAcGFja2FnZSBtYWluCmltcG9ydCAiY29yZTpsb2ciCmltcG9ydCAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOm1hdGgvcmFuZCIKaW1wb3J0IHJsICJ2ZW5kb3I6cmF5bGliIgoKZW5lbWllczogW2R5bmFtaWNdRW50aXR5SGFuZGxlCmVudGl0eV9tb2RlbHM6IFtkeW5hbWljXXJsLk1vZGVsCmVuZW15X2RlZmF1bHQ6IEVudGl0eQoKaW5pdF9lbmVtaWVzIDo6IHByb2MoKSAKewogIGlkeF9za2VsZXRvbiA6PSBsb2FkX2VudGl0eV9tb2RlbCgic2tlbGV0b24uZ2xiIikKICBpZHhfcmFuZ2VyIDo9IGxvYWRfZW50aXR5X21vZGVsKCJza2VsZXRvbl9yYW5nZXIuZ2xiIikKICBlbmVteV9kZWZhdWx0ID0gRW50aXR5IHsKICAgIGNvbGxpc2lvblJhZGl1c1NxciA9IDEsCiAgfQoKICBza2VsZXRvbiA6PSBlbnRpdHlfbW9kZWxzW2lkeF9za2VsZXRvbl0KICByYW5nZXIgOj0gZW50aXR5X21vZGVsc1tpZHhfcmFuZ2VyXQogIGZvciBpIGluIDAgLi48IHNrZWxldG9uLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmc2tlbGV0b24ubWVzaGVzW2ldKQogIH0KICBmb3IgaSBpbiAwIC4uPCByYW5nZXIubWVzaENvdW50IHsKICAgIHNtb290aF9hbGxfbWVzaF9ub3JtYWxzKCZyYW5nZXIubWVzaGVzW2ldKQogIH0KICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnNrZWxldG9uLCBzeW50eV9tYXQpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZyYW5nZXIsIHN5bnR5X21hdCkKCgogIGVuZW15Q291bnQgOj0gMTAKICBmb3IgaSBpbiAwIC4uPCBlbmVteUNvdW50IHsKICAgIGhhbmRsZSA6PSBjcmVhdGVfZW50aXR5KCkKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBlID0gbmV3X2Nsb25lKGVuZW15X2RlZmF1bHQpCiAgICAKICAgIGhlYWx0aDogZmxvYXQKICAgIGlmIHJhbmQuaW50X21heCgzKSA9PSAxIHsKICAgICAgZS5mbGFncyArPSB7LmVuZW15X3JhbmdlZH0KICAgICAgZS5pZHhfbW9kZWwgPSBpZHhfcmFuZ2VyCiAgICAgIGhlYWx0aCA9IDUwCiAgICB9IGVsc2UgewogICAgICBlLmZsYWdzICs9IHsuZW5lbXlfZm9kZGVyfQogICAgICBlLmlkeF9tb2RlbCA9IGlkeF9za2VsZXRvbgogICAgICBoZWFsdGggPSAxMAogICAgfQogICAgZS5zdGF0cyA9IEVudGl0eVN0YXRzIHsKICAgICAgaGVhbHRoID0gaGVhbHRoLAogICAgfQogICAgc3ByZWFkOiBmbG9hdCA9IGZsb2F0KGVuZW15Q291bnQpIC8gMgogICAgZS5wb3NpdGlvbiA9IGZsb2F0M3sxMCwgMCwgMTB9ICsgZmxvYXQze3JhbmRfcmFuZ2UoLXNwcmVhZCwgc3ByZWFkKSwgMCwgcmFuZF9yYW5nZSgtc3ByZWFkLCBzcHJlYWQpfQogICAgYXBwZW5kKCZlbmVtaWVzLCBoYW5kbGUpCiAgfQoKICBhcHBlbmQoJnVwZGF0ZV9wcm9jcywgdXBkYXRlX2VuZW1pZXMpCiAgYXBwZW5kKCZsYXRlX3VwZGF0ZV9wcm9jcywgbGF0ZV91cGRhdGVfZW5lbWllcykKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfZW5lbWllcykKfQoKdXBkYXRlX2VuZW1pZXMgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9lbnRpdHkocGxheWVyX2hhbmRsZSkKICBmb3IgJmhhbmRsZSBpbiBlbmVtaWVzIHsKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBkaXJfdG9fcGxheWVyIDo9IG5vcm0ocGxheWVyLnBvc2l0aW9uIC0gZS5wb3NpdGlvbikKICAgIGUuZm9yd2FyZCA9IGRpcl90b19wbGF5ZXIKICAgIGUucm90YXRpb24gPSBsb29rX3JvdChlLnBvc2l0aW9uLCBwbGF5ZXIucG9zaXRpb24sIGZsb2F0M191cCkKICB9Cn0KCmxhdGVfdXBkYXRlX2VuZW1pZXMgOjogcHJvYygpIAp7CiAgZm9yICZoYW5kbGUsIGkgaW4gZW5lbWllcyB7CiAgICBlbmVteSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGlmIC5kZWFkIGluIGVuZW15LmZsYWdzIHsKICAgICAgZGVzdHJveV9lbnRpdHkoZW5lbXkuaGFuZGxlKQogICAgICB1bm9yZGVyZWRfcmVtb3ZlKCZlbmVtaWVzLCBpKQogICAgfQogIH0KfQoKZHJhd19lbmVtaWVzIDo6IHByb2MoKSAKewogIGZvciAmaGFuZGxlIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIG1vZGVsIDo9IGVudGl0eV9tb2RlbHNbZS5pZHhfbW9kZWxdCiAgICBmb3IgaSBpbiAwIC4uPCBtb2RlbC5tZXNoQ291bnQgewogICAgICBybC5EcmF3TWVzaChtb2RlbC5tZXNoZXNbaV0sIG1vZGVsLm1hdGVyaWFsc1tpICsgMV0sIG1hdHJpeF90cnMoZS5wb3NpdGlvbiwgZmxvYXQzX29uZSwgZS5yb3RhdGlvbikpCiAgICB9CiAgfQp9CgpnZXRfZW5lbWllc19pbl9yYW5nZSA6OiBwcm9jKHJhbmdlOiBmbG9hdCwgcG9zOiBmbG9hdDMpIC0+IFtkeW5hbWljXUVudGl0eUhhbmRsZSAKewogIGxpc3QgOj0gbWFrZShbZHluYW1pY11FbnRpdHlIYW5kbGUsIGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgZm9yICZoYW5kbGUgaW4gZW5lbWllcyB7CiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgaWYgbGluYWxnLmRpc3RhbmNlKGUucG9zaXRpb24sIHBvcykgPCByYW5nZSB7CiAgICAgIGFwcGVuZCgmbGlzdCwgZS5oYW5kbGUpCiAgICB9CiAgfQogIHJldHVybiBsaXN0Cn0K",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"left_delete",
					null,
					"AQAAAHUDAAAAAAAAdQMAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"cut",
					null,
					"AQAAAFUDAAAAAAAAVQMAAAAAAAAhAAAAICAgIGUgPSBuZXdfY2xvbmUoZW5lbXlfZGVmYXVsdCkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					3,
					"cut",
					null,
					"AwAAAEoBAAAAAAAASgEAAAAAAAAbAAAAICBlbmVteV9kZWZhdWx0ID0gRW50aXR5IHsKSgEAAAAAAABKAQAAAAAAABwAAAAgICAgY29sbGlzaW9uUmFkaXVzU3FyID0gMSwKSgEAAAAAAABKAQAAAAAAAAQAAAAgIH0K",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					113,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\nimport \"core:log\"\r\nimport \"core:math/linalg\"\r\nimport \"core:math/rand\"\r\nimport rl \"vendor:raylib\"\r\n\r\nenemies: [dynamic]EntityHandle\r\nentity_models: [dynamic]rl.Model\r\nenemy_default: Entity\r\n\r\ninit_enemies :: proc() \r\n{\r\n  idx_skeleton := load_entity_model(\"skeleton.glb\")\r\n  idx_ranger := load_entity_model(\"skeleton_ranger.glb\")\r\n\r\n  skeleton := entity_models[idx_skeleton]\r\n  ranger := entity_models[idx_ranger]\r\n  for i in 0 ..< skeleton.meshCount {\r\n    smooth_all_mesh_normals(&skeleton.meshes[i])\r\n  }\r\n  for i in 0 ..< ranger.meshCount {\r\n    smooth_all_mesh_normals(&ranger.meshes[i])\r\n  }\r\n  assign_material_all_mats(&skeleton, synty_mat)\r\n  assign_material_all_mats(&ranger, synty_mat)\r\n\r\n\r\n  enemyCount := 10\r\n  for i in 0 ..< enemyCount {\r\n    handle := create_entity()\r\n    e := get_entity(handle)\r\n    health: float\r\n    if rand.int_max(3) == 1 {\r\n      e.flags += {.enemy_ranged}\r\n      e.idx_model = idx_ranger\r\n      health = 50\r\n    } else {\r\n      e.flags += {.enemy_fodder}\r\n      e.idx_model = idx_skeleton\r\n      health = 10\r\n    }\r\n    e.stats = EntityStats {\r\n      health = health,\r\n    }\r\n    spread: float = float(enemyCount) / 2\r\n    e.position = float3{10, 0, 10} + float3{rand_range(-spread, spread), 0, rand_range(-spread, spread)}\r\n    append(&enemies, handle)\r\n  }\r\n\r\n  append(&update_procs, update_enemies)\r\n  append(&late_update_procs, late_update_enemies)\r\n  append(&draw_procs, draw_enemies)\r\n}\r\n\r\nupdate_enemies :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    dir_to_player := norm(player.position - e.position)\r\n    e.forward = dir_to_player\r\n    e.rotation = look_rot(e.position, player.position, float3_up)\r\n  }\r\n}\r\n\r\nlate_update_enemies :: proc() \r\n{\r\n  for &handle, i in enemies {\r\n    enemy := get_entity(handle)\r\n    if .dead in enemy.flags {\r\n      destroy_entity(enemy.handle)\r\n      unordered_remove(&enemies, i)\r\n    }\r\n  }\r\n}\r\n\r\ndraw_enemies :: proc() \r\n{\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    model := entity_models[e.idx_model]\r\n    for i in 0 ..< model.meshCount {\r\n      rl.DrawMesh(model.meshes[i], model.materials[i + 1], matrix_trs(e.position, float3_one, e.rotation))\r\n    }\r\n  }\r\n}\r\n\r\nget_enemies_in_range :: proc(range: float, pos: float3) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    if linalg.distance(e.position, pos) < range {\r\n      append(&list, e.handle)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 98
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAApAkAAAAAAACkCQAAcGFja2FnZSBtYWluCmltcG9ydCAiY29yZTpsb2ciCmltcG9ydCAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOm1hdGgvcmFuZCIKaW1wb3J0IHJsICJ2ZW5kb3I6cmF5bGliIgoKZW5lbWllczogW2R5bmFtaWNdRW50aXR5SGFuZGxlCmVudGl0eV9tb2RlbHM6IFtkeW5hbWljXXJsLk1vZGVsCmVuZW15X2RlZmF1bHQ6IEVudGl0eQoKaW5pdF9lbmVtaWVzIDo6IHByb2MoKSAKewogIGlkeF9za2VsZXRvbiA6PSBsb2FkX2VudGl0eV9tb2RlbCgic2tlbGV0b24uZ2xiIikKICBpZHhfcmFuZ2VyIDo9IGxvYWRfZW50aXR5X21vZGVsKCJza2VsZXRvbl9yYW5nZXIuZ2xiIikKCiAgc2tlbGV0b24gOj0gZW50aXR5X21vZGVsc1tpZHhfc2tlbGV0b25dCiAgcmFuZ2VyIDo9IGVudGl0eV9tb2RlbHNbaWR4X3Jhbmdlcl0KICBmb3IgaSBpbiAwIC4uPCBza2VsZXRvbi5tZXNoQ291bnQgewogICAgc21vb3RoX2FsbF9tZXNoX25vcm1hbHMoJnNrZWxldG9uLm1lc2hlc1tpXSkKICB9CiAgZm9yIGkgaW4gMCAuLjwgcmFuZ2VyLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmcmFuZ2VyLm1lc2hlc1tpXSkKICB9CiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZza2VsZXRvbiwgc3ludHlfbWF0KQogIGFzc2lnbl9tYXRlcmlhbF9hbGxfbWF0cygmcmFuZ2VyLCBzeW50eV9tYXQpCgoKICBlbmVteUNvdW50IDo9IDEwCiAgZm9yIGkgaW4gMCAuLjwgZW5lbXlDb3VudCB7CiAgICBoYW5kbGUgOj0gY3JlYXRlX2VudGl0eSgpCiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgaGVhbHRoOiBmbG9hdAogICAgaWYgcmFuZC5pbnRfbWF4KDMpID09IDEgewogICAgICBlLmZsYWdzICs9IHsuZW5lbXlfcmFuZ2VkfQogICAgICBlLmlkeF9tb2RlbCA9IGlkeF9yYW5nZXIKICAgICAgaGVhbHRoID0gNTAKICAgIH0gZWxzZSB7CiAgICAgIGUuZmxhZ3MgKz0gey5lbmVteV9mb2RkZXJ9CiAgICAgIGUuaWR4X21vZGVsID0gaWR4X3NrZWxldG9uCiAgICAgIGhlYWx0aCA9IDEwCiAgICB9CiAgICBlLnN0YXRzID0gRW50aXR5U3RhdHMgewogICAgICBoZWFsdGggPSBoZWFsdGgsCiAgICB9CiAgICBzcHJlYWQ6IGZsb2F0ID0gZmxvYXQoZW5lbXlDb3VudCkgLyAyCiAgICBlLnBvc2l0aW9uID0gZmxvYXQzezEwLCAwLCAxMH0gKyBmbG9hdDN7cmFuZF9yYW5nZSgtc3ByZWFkLCBzcHJlYWQpLCAwLCByYW5kX3JhbmdlKC1zcHJlYWQsIHNwcmVhZCl9CiAgICBhcHBlbmQoJmVuZW1pZXMsIGhhbmRsZSkKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZW5lbWllcykKICBhcHBlbmQoJmxhdGVfdXBkYXRlX3Byb2NzLCBsYXRlX3VwZGF0ZV9lbmVtaWVzKQogIGFwcGVuZCgmZHJhd19wcm9jcywgZHJhd19lbmVtaWVzKQp9Cgp1cGRhdGVfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIGZvciAmaGFuZGxlIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGRpcl90b19wbGF5ZXIgOj0gbm9ybShwbGF5ZXIucG9zaXRpb24gLSBlLnBvc2l0aW9uKQogICAgZS5mb3J3YXJkID0gZGlyX3RvX3BsYXllcgogICAgZS5yb3RhdGlvbiA9IGxvb2tfcm90KGUucG9zaXRpb24sIHBsYXllci5wb3NpdGlvbiwgZmxvYXQzX3VwKQogIH0KfQoKbGF0ZV91cGRhdGVfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBmb3IgJmhhbmRsZSwgaSBpbiBlbmVtaWVzIHsKICAgIGVuZW15IDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgaWYgLmRlYWQgaW4gZW5lbXkuZmxhZ3MgewogICAgICBkZXN0cm95X2VudGl0eShlbmVteS5oYW5kbGUpCiAgICAgIHVub3JkZXJlZF9yZW1vdmUoJmVuZW1pZXMsIGkpCiAgICB9CiAgfQp9CgpkcmF3X2VuZW1pZXMgOjogcHJvYygpIAp7CiAgZm9yICZoYW5kbGUgaW4gZW5lbWllcyB7CiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgbW9kZWwgOj0gZW50aXR5X21vZGVsc1tlLmlkeF9tb2RlbF0KICAgIGZvciBpIGluIDAgLi48IG1vZGVsLm1lc2hDb3VudCB7CiAgICAgIHJsLkRyYXdNZXNoKG1vZGVsLm1lc2hlc1tpXSwgbW9kZWwubWF0ZXJpYWxzW2kgKyAxXSwgbWF0cml4X3RycyhlLnBvc2l0aW9uLCBmbG9hdDNfb25lLCBlLnJvdGF0aW9uKSkKICAgIH0KICB9Cn0KCmdldF9lbmVtaWVzX2luX3JhbmdlIDo6IHByb2MocmFuZ2U6IGZsb2F0LCBwb3M6IGZsb2F0MykgLT4gW2R5bmFtaWNdRW50aXR5SGFuZGxlIAp7CiAgbGlzdCA6PSBtYWtlKFtkeW5hbWljXUVudGl0eUhhbmRsZSwgY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICBmb3IgJmhhbmRsZSBpbiBlbmVtaWVzIHsKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBpZiBsaW5hbGcuZGlzdGFuY2UoZS5wb3NpdGlvbiwgcG9zKSA8IHJhbmdlIHsKICAgICAgYXBwZW5kKCZsaXN0LCBlLmhhbmRsZSkKICAgIH0KICB9CiAgcmV0dXJuIGxpc3QKfQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"cut",
					null,
					"AQAAAKwAAAAAAAAArAAAAAAAAAAWAAAAZW5lbXlfZGVmYXVsdDogRW50aXR5Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\nimport \"core:log\"\r\nimport \"core:math/linalg\"\r\nimport \"core:math/rand\"\r\nimport rl \"vendor:raylib\"\r\n\r\nenemies: [dynamic]EntityHandle\r\nentity_models: [dynamic]rl.Model\r\n\r\ninit_enemies :: proc() \r\n{\r\n  idx_skeleton := load_entity_model(\"skeleton.glb\")\r\n  idx_ranger := load_entity_model(\"skeleton_ranger.glb\")\r\n\r\n  skeleton := entity_models[idx_skeleton]\r\n  ranger := entity_models[idx_ranger]\r\n  for i in 0 ..< skeleton.meshCount {\r\n    smooth_all_mesh_normals(&skeleton.meshes[i])\r\n  }\r\n  for i in 0 ..< ranger.meshCount {\r\n    smooth_all_mesh_normals(&ranger.meshes[i])\r\n  }\r\n  assign_material_all_mats(&skeleton, synty_mat)\r\n  assign_material_all_mats(&ranger, synty_mat)\r\n\r\n\r\n  enemyCount := 10\r\n  for i in 0 ..< enemyCount {\r\n    handle := create_entity()\r\n    e := get_entity(handle)\r\n    health: float\r\n    if rand.int_max(3) == 1 {\r\n      e.flags += {.enemy_ranged}\r\n      e.idx_model = idx_ranger\r\n      health = 50\r\n    } else {\r\n      e.flags += {.enemy_fodder}\r\n      e.idx_model = idx_skeleton\r\n      health = 10\r\n    }\r\n    e.stats = EntityStats {\r\n      health = health,\r\n    }\r\n    spread: float = float(enemyCount) / 2\r\n    e.position = float3{10, 0, 10} + float3{rand_range(-spread, spread), 0, rand_range(-spread, spread)}\r\n    append(&enemies, handle)\r\n  }\r\n\r\n  append(&update_procs, update_enemies)\r\n  append(&late_update_procs, late_update_enemies)\r\n  append(&draw_procs, draw_enemies)\r\n}\r\n\r\nupdate_enemies :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    dir_to_player := norm(player.position - e.position)\r\n    e.forward = dir_to_player\r\n    e.rotation = look_rot(e.position, player.position, float3_up)\r\n  }\r\n}\r\n\r\nlate_update_enemies :: proc() \r\n{\r\n  for &handle, i in enemies {\r\n    enemy := get_entity(handle)\r\n    if .dead in enemy.flags {\r\n      destroy_entity(enemy.handle)\r\n      unordered_remove(&enemies, i)\r\n    }\r\n  }\r\n}\r\n\r\ndraw_enemies :: proc() \r\n{\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    model := entity_models[e.idx_model]\r\n    for i in 0 ..< model.meshCount {\r\n      rl.DrawMesh(model.meshes[i], model.materials[i + 1], matrix_trs(e.position, float3_one, e.rotation))\r\n    }\r\n  }\r\n}\r\n\r\nget_enemies_in_range :: proc(range: float, pos: float3) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    if linalg.distance(e.position, pos) < range {\r\n      append(&list, e.handle)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 97
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAjgkAAAAAAACOCQAAcGFja2FnZSBtYWluCmltcG9ydCAiY29yZTpsb2ciCmltcG9ydCAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOm1hdGgvcmFuZCIKaW1wb3J0IHJsICJ2ZW5kb3I6cmF5bGliIgoKZW5lbWllczogW2R5bmFtaWNdRW50aXR5SGFuZGxlCmVudGl0eV9tb2RlbHM6IFtkeW5hbWljXXJsLk1vZGVsCgppbml0X2VuZW1pZXMgOjogcHJvYygpIAp7CiAgaWR4X3NrZWxldG9uIDo9IGxvYWRfZW50aXR5X21vZGVsKCJza2VsZXRvbi5nbGIiKQogIGlkeF9yYW5nZXIgOj0gbG9hZF9lbnRpdHlfbW9kZWwoInNrZWxldG9uX3Jhbmdlci5nbGIiKQoKICBza2VsZXRvbiA6PSBlbnRpdHlfbW9kZWxzW2lkeF9za2VsZXRvbl0KICByYW5nZXIgOj0gZW50aXR5X21vZGVsc1tpZHhfcmFuZ2VyXQogIGZvciBpIGluIDAgLi48IHNrZWxldG9uLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmc2tlbGV0b24ubWVzaGVzW2ldKQogIH0KICBmb3IgaSBpbiAwIC4uPCByYW5nZXIubWVzaENvdW50IHsKICAgIHNtb290aF9hbGxfbWVzaF9ub3JtYWxzKCZyYW5nZXIubWVzaGVzW2ldKQogIH0KICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnNrZWxldG9uLCBzeW50eV9tYXQpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZyYW5nZXIsIHN5bnR5X21hdCkKCgogIGVuZW15Q291bnQgOj0gMTAKICBmb3IgaSBpbiAwIC4uPCBlbmVteUNvdW50IHsKICAgIGhhbmRsZSA6PSBjcmVhdGVfZW50aXR5KCkKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBoZWFsdGg6IGZsb2F0CiAgICBpZiByYW5kLmludF9tYXgoMykgPT0gMSB7CiAgICAgIGUuZmxhZ3MgKz0gey5lbmVteV9yYW5nZWR9CiAgICAgIGUuaWR4X21vZGVsID0gaWR4X3JhbmdlcgogICAgICBoZWFsdGggPSA1MAogICAgfSBlbHNlIHsKICAgICAgZS5mbGFncyArPSB7LmVuZW15X2ZvZGRlcn0KICAgICAgZS5pZHhfbW9kZWwgPSBpZHhfc2tlbGV0b24KICAgICAgaGVhbHRoID0gMTAKICAgIH0KICAgIGUuc3RhdHMgPSBFbnRpdHlTdGF0cyB7CiAgICAgIGhlYWx0aCA9IGhlYWx0aCwKICAgIH0KICAgIHNwcmVhZDogZmxvYXQgPSBmbG9hdChlbmVteUNvdW50KSAvIDIKICAgIGUucG9zaXRpb24gPSBmbG9hdDN7MTAsIDAsIDEwfSArIGZsb2F0M3tyYW5kX3JhbmdlKC1zcHJlYWQsIHNwcmVhZCksIDAsIHJhbmRfcmFuZ2UoLXNwcmVhZCwgc3ByZWFkKX0KICAgIGFwcGVuZCgmZW5lbWllcywgaGFuZGxlKQogIH0KCiAgYXBwZW5kKCZ1cGRhdGVfcHJvY3MsIHVwZGF0ZV9lbmVtaWVzKQogIGFwcGVuZCgmbGF0ZV91cGRhdGVfcHJvY3MsIGxhdGVfdXBkYXRlX2VuZW1pZXMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2VuZW1pZXMpCn0KCnVwZGF0ZV9lbmVtaWVzIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfZW50aXR5KHBsYXllcl9oYW5kbGUpCiAgZm9yICZoYW5kbGUgaW4gZW5lbWllcyB7CiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgZGlyX3RvX3BsYXllciA6PSBub3JtKHBsYXllci5wb3NpdGlvbiAtIGUucG9zaXRpb24pCiAgICBlLmZvcndhcmQgPSBkaXJfdG9fcGxheWVyCiAgICBlLnJvdGF0aW9uID0gbG9va19yb3QoZS5wb3NpdGlvbiwgcGxheWVyLnBvc2l0aW9uLCBmbG9hdDNfdXApCiAgfQp9CgpsYXRlX3VwZGF0ZV9lbmVtaWVzIDo6IHByb2MoKSAKewogIGZvciAmaGFuZGxlLCBpIGluIGVuZW1pZXMgewogICAgZW5lbXkgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBpZiAuZGVhZCBpbiBlbmVteS5mbGFncyB7CiAgICAgIGRlc3Ryb3lfZW50aXR5KGVuZW15LmhhbmRsZSkKICAgICAgdW5vcmRlcmVkX3JlbW92ZSgmZW5lbWllcywgaSkKICAgIH0KICB9Cn0KCmRyYXdfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBmb3IgJmhhbmRsZSBpbiBlbmVtaWVzIHsKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBtb2RlbCA6PSBlbnRpdHlfbW9kZWxzW2UuaWR4X21vZGVsXQogICAgZm9yIGkgaW4gMCAuLjwgbW9kZWwubWVzaENvdW50IHsKICAgICAgcmwuRHJhd01lc2gobW9kZWwubWVzaGVzW2ldLCBtb2RlbC5tYXRlcmlhbHNbaSArIDFdLCBtYXRyaXhfdHJzKGUucG9zaXRpb24sIGZsb2F0M19vbmUsIGUucm90YXRpb24pKQogICAgfQogIH0KfQoKZ2V0X2VuZW1pZXNfaW5fcmFuZ2UgOjogcHJvYyhyYW5nZTogZmxvYXQsIHBvczogZmxvYXQzKSAtPiBbZHluYW1pY11FbnRpdHlIYW5kbGUgCnsKICBsaXN0IDo9IG1ha2UoW2R5bmFtaWNdRW50aXR5SGFuZGxlLCBjb250ZXh0LnRlbXBfYWxsb2NhdG9yKQogIGZvciAmaGFuZGxlIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGlmIGxpbmFsZy5kaXN0YW5jZShlLnBvc2l0aW9uLCBwb3MpIDwgcmFuZ2UgewogICAgICBhcHBlbmQoJmxpc3QsIGUuaGFuZGxlKQogICAgfQogIH0KICByZXR1cm4gbGlzdAp9Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"left_delete",
					null,
					"AQAAAJYCAAAAAAAAlgIAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"left_delete",
					null,
					"AQAAAJYCAAAAAAAAlgIAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					124,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\nimport \"core:log\"\r\nimport \"core:math/linalg\"\r\nimport \"core:math/rand\"\r\nimport rl \"vendor:raylib\"\r\n\r\nenemies: [dynamic]EntityHandle\r\nentity_models: [dynamic]rl.Model\r\n\r\ninit_enemies :: proc() \r\n{\r\n  idx_skeleton := load_entity_model(\"skeleton.glb\")\r\n  idx_ranger := load_entity_model(\"skeleton_ranger.glb\")\r\n\r\n  skeleton := entity_models[idx_skeleton]\r\n  ranger := entity_models[idx_ranger]\r\n  for i in 0 ..< skeleton.meshCount {\r\n    smooth_all_mesh_normals(&skeleton.meshes[i])\r\n  }\r\n  for i in 0 ..< ranger.meshCount {\r\n    smooth_all_mesh_normals(&ranger.meshes[i])\r\n  }\r\n  assign_material_all_mats(&skeleton, synty_mat)\r\n  assign_material_all_mats(&ranger, synty_mat)\r\n  enemyCount := 10\r\n  for i in 0 ..< enemyCount {\r\n    handle := create_entity()\r\n    e := get_entity(handle)\r\n    health: float\r\n    if rand.int_max(3) == 1 {\r\n      e.flags += {.enemy_ranged}\r\n      e.idx_model = idx_ranger\r\n      health = 50\r\n    } else {\r\n      e.flags += {.enemy_fodder}\r\n      e.idx_model = idx_skeleton\r\n      health = 10\r\n    }\r\n    e.stats = EntityStats {\r\n      health = health,\r\n    }\r\n    spread: float = float(enemyCount) / 2\r\n    e.position = float3{10, 0, 10} + float3{rand_range(-spread, spread), 0, rand_range(-spread, spread)}\r\n    append(&enemies, handle)\r\n  }\r\n\r\n  append(&update_procs, update_enemies)\r\n  append(&late_update_procs, late_update_enemies)\r\n  append(&draw_procs, draw_enemies)\r\n}\r\n\r\nupdate_enemies :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    dir_to_player := norm(player.position - e.position)\r\n    e.forward = dir_to_player\r\n    e.rotation = look_rot(e.position, player.position, float3_up)\r\n  }\r\n}\r\n\r\nlate_update_enemies :: proc() \r\n{\r\n  for &handle, i in enemies {\r\n    enemy := get_entity(handle)\r\n    if .dead in enemy.flags {\r\n      destroy_entity(enemy.handle)\r\n      unordered_remove(&enemies, i)\r\n    }\r\n  }\r\n}\r\n\r\ndraw_enemies :: proc() \r\n{\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    model := entity_models[e.idx_model]\r\n    for i in 0 ..< model.meshCount {\r\n      rl.DrawMesh(model.meshes[i], model.materials[i + 1], matrix_trs(e.position, float3_one, e.rotation))\r\n    }\r\n  }\r\n}\r\n\r\nget_enemies_in_range :: proc(range: float, pos: float3) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    if linalg.distance(e.position, pos) < range {\r\n      append(&list, e.handle)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 95
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAjAkAAAAAAACMCQAAcGFja2FnZSBtYWluCmltcG9ydCAiY29yZTpsb2ciCmltcG9ydCAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOm1hdGgvcmFuZCIKaW1wb3J0IHJsICJ2ZW5kb3I6cmF5bGliIgoKZW5lbWllczogW2R5bmFtaWNdRW50aXR5SGFuZGxlCmVudGl0eV9tb2RlbHM6IFtkeW5hbWljXXJsLk1vZGVsCgppbml0X2VuZW1pZXMgOjogcHJvYygpIAp7CiAgaWR4X3NrZWxldG9uIDo9IGxvYWRfZW50aXR5X21vZGVsKCJza2VsZXRvbi5nbGIiKQogIGlkeF9yYW5nZXIgOj0gbG9hZF9lbnRpdHlfbW9kZWwoInNrZWxldG9uX3Jhbmdlci5nbGIiKQoKICBza2VsZXRvbiA6PSBlbnRpdHlfbW9kZWxzW2lkeF9za2VsZXRvbl0KICByYW5nZXIgOj0gZW50aXR5X21vZGVsc1tpZHhfcmFuZ2VyXQogIGZvciBpIGluIDAgLi48IHNrZWxldG9uLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmc2tlbGV0b24ubWVzaGVzW2ldKQogIH0KICBmb3IgaSBpbiAwIC4uPCByYW5nZXIubWVzaENvdW50IHsKICAgIHNtb290aF9hbGxfbWVzaF9ub3JtYWxzKCZyYW5nZXIubWVzaGVzW2ldKQogIH0KICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnNrZWxldG9uLCBzeW50eV9tYXQpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZyYW5nZXIsIHN5bnR5X21hdCkKICBlbmVteUNvdW50IDo9IDEwCiAgZm9yIGkgaW4gMCAuLjwgZW5lbXlDb3VudCB7CiAgICBoYW5kbGUgOj0gY3JlYXRlX2VudGl0eSgpCiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgaGVhbHRoOiBmbG9hdAogICAgaWYgcmFuZC5pbnRfbWF4KDMpID09IDEgewogICAgICBlLmZsYWdzICs9IHsuZW5lbXlfcmFuZ2VkfQogICAgICBlLmlkeF9tb2RlbCA9IGlkeF9yYW5nZXIKICAgICAgaGVhbHRoID0gNTAKICAgIH0gZWxzZSB7CiAgICAgIGUuZmxhZ3MgKz0gey5lbmVteV9mb2RkZXJ9CiAgICAgIGUuaWR4X21vZGVsID0gaWR4X3NrZWxldG9uCiAgICAgIGhlYWx0aCA9IDEwCiAgICB9CiAgICBlLnN0YXRzID0gRW50aXR5U3RhdHMgewogICAgICBoZWFsdGggPSBoZWFsdGgsCiAgICB9CiAgICBzcHJlYWQ6IGZsb2F0ID0gZmxvYXQoZW5lbXlDb3VudCkgLyAyCiAgICBlLnBvc2l0aW9uID0gZmxvYXQzezEwLCAwLCAxMH0gKyBmbG9hdDN7cmFuZF9yYW5nZSgtc3ByZWFkLCBzcHJlYWQpLCAwLCByYW5kX3JhbmdlKC1zcHJlYWQsIHNwcmVhZCl9CiAgICBhcHBlbmQoJmVuZW1pZXMsIGhhbmRsZSkKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZW5lbWllcykKICBhcHBlbmQoJmxhdGVfdXBkYXRlX3Byb2NzLCBsYXRlX3VwZGF0ZV9lbmVtaWVzKQogIGFwcGVuZCgmZHJhd19wcm9jcywgZHJhd19lbmVtaWVzKQp9Cgp1cGRhdGVfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIGZvciAmaGFuZGxlIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGRpcl90b19wbGF5ZXIgOj0gbm9ybShwbGF5ZXIucG9zaXRpb24gLSBlLnBvc2l0aW9uKQogICAgZS5mb3J3YXJkID0gZGlyX3RvX3BsYXllcgogICAgZS5yb3RhdGlvbiA9IGxvb2tfcm90KGUucG9zaXRpb24sIHBsYXllci5wb3NpdGlvbiwgZmxvYXQzX3VwKQogIH0KfQoKbGF0ZV91cGRhdGVfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBmb3IgJmhhbmRsZSwgaSBpbiBlbmVtaWVzIHsKICAgIGVuZW15IDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgaWYgLmRlYWQgaW4gZW5lbXkuZmxhZ3MgewogICAgICBkZXN0cm95X2VudGl0eShlbmVteS5oYW5kbGUpCiAgICAgIHVub3JkZXJlZF9yZW1vdmUoJmVuZW1pZXMsIGkpCiAgICB9CiAgfQp9CgpkcmF3X2VuZW1pZXMgOjogcHJvYygpIAp7CiAgZm9yICZoYW5kbGUgaW4gZW5lbWllcyB7CiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgbW9kZWwgOj0gZW50aXR5X21vZGVsc1tlLmlkeF9tb2RlbF0KICAgIGZvciBpIGluIDAgLi48IG1vZGVsLm1lc2hDb3VudCB7CiAgICAgIHJsLkRyYXdNZXNoKG1vZGVsLm1lc2hlc1tpXSwgbW9kZWwubWF0ZXJpYWxzW2kgKyAxXSwgbWF0cml4X3RycyhlLnBvc2l0aW9uLCBmbG9hdDNfb25lLCBlLnJvdGF0aW9uKSkKICAgIH0KICB9Cn0KCmdldF9lbmVtaWVzX2luX3JhbmdlIDo6IHByb2MocmFuZ2U6IGZsb2F0LCBwb3M6IGZsb2F0MykgLT4gW2R5bmFtaWNdRW50aXR5SGFuZGxlIAp7CiAgbGlzdCA6PSBtYWtlKFtkeW5hbWljXUVudGl0eUhhbmRsZSwgY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICBmb3IgJmhhbmRsZSBpbiBlbmVtaWVzIHsKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBpZiBsaW5hbGcuZGlzdGFuY2UoZS5wb3NpdGlvbiwgcG9zKSA8IHJhbmdlIHsKICAgICAgYXBwZW5kKCZsaXN0LCBlLmhhbmRsZSkKICAgIH0KICB9CiAgcmV0dXJuIGxpc3QKfQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJYCAAAAAAAAmQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					127,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\nimport \"core:log\"\r\nimport \"core:math/linalg\"\r\nimport \"core:math/rand\"\r\nimport rl \"vendor:raylib\"\r\n\r\nenemies: [dynamic]EntityHandle\r\nentity_models: [dynamic]rl.Model\r\n\r\ninit_enemies :: proc() \r\n{\r\n  idx_skeleton := load_entity_model(\"skeleton.glb\")\r\n  idx_ranger := load_entity_model(\"skeleton_ranger.glb\")\r\n\r\n  skeleton := entity_models[idx_skeleton]\r\n  ranger := entity_models[idx_ranger]\r\n  for i in 0 ..< skeleton.meshCount {\r\n    smooth_all_mesh_normals(&skeleton.meshes[i])\r\n  }\r\n  for i in 0 ..< ranger.meshCount {\r\n    smooth_all_mesh_normals(&ranger.meshes[i])\r\n  }\r\n  assign_material_all_mats(&skeleton, synty_mat)\r\n  assign_material_all_mats(&ranger, synty_mat)\r\n\r\n  enemyCount := 10\r\n  for i in 0 ..< enemyCount {\r\n    handle := create_entity()\r\n    e := get_entity(handle)\r\n    health: float\r\n    if rand.int_max(3) == 1 {\r\n      e.flags += {.enemy_ranged}\r\n      e.idx_model = idx_ranger\r\n      health = 50\r\n    } else {\r\n      e.flags += {.enemy_fodder}\r\n      e.idx_model = idx_skeleton\r\n      health = 10\r\n    }\r\n    e.stats = EntityStats {\r\n      health = health,\r\n    }\r\n    spread: float = float(enemyCount) / 2\r\n    e.position = float3{10, 0, 10} + float3{rand_range(-spread, spread), 0, rand_range(-spread, spread)}\r\n    append(&enemies, handle)\r\n  }\r\n\r\n  append(&update_procs, update_enemies)\r\n  append(&late_update_procs, late_update_enemies)\r\n  append(&draw_procs, draw_enemies)\r\n}\r\n\r\nupdate_enemies :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    dir_to_player := norm(player.position - e.position)\r\n    e.forward = dir_to_player\r\n    e.rotation = look_rot(e.position, player.position, float3_up)\r\n  }\r\n}\r\n\r\nlate_update_enemies :: proc() \r\n{\r\n  for &handle, i in enemies {\r\n    enemy := get_entity(handle)\r\n    if .dead in enemy.flags {\r\n      destroy_entity(enemy.handle)\r\n      unordered_remove(&enemies, i)\r\n    }\r\n  }\r\n}\r\n\r\ndraw_enemies :: proc() \r\n{\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    model := entity_models[e.idx_model]\r\n    for i in 0 ..< model.meshCount {\r\n      rl.DrawMesh(model.meshes[i], model.materials[i + 1], matrix_trs(e.position, float3_one, e.rotation))\r\n    }\r\n  }\r\n}\r\n\r\nget_enemies_in_range :: proc(range: float, pos: float3) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    if linalg.distance(e.position, pos) < range {\r\n      append(&list, e.handle)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 96
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAjQkAAAAAAACPCQAAcGFja2FnZSBtYWluCmltcG9ydCAiY29yZTpsb2ciCmltcG9ydCAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOm1hdGgvcmFuZCIKaW1wb3J0IHJsICJ2ZW5kb3I6cmF5bGliIgoKZW5lbWllczogW2R5bmFtaWNdRW50aXR5SGFuZGxlCmVudGl0eV9tb2RlbHM6IFtkeW5hbWljXXJsLk1vZGVsCgppbml0X2VuZW1pZXMgOjogcHJvYygpIAp7CiAgaWR4X3NrZWxldG9uIDo9IGxvYWRfZW50aXR5X21vZGVsKCJza2VsZXRvbi5nbGIiKQogIGlkeF9yYW5nZXIgOj0gbG9hZF9lbnRpdHlfbW9kZWwoInNrZWxldG9uX3Jhbmdlci5nbGIiKQoKICBza2VsZXRvbiA6PSBlbnRpdHlfbW9kZWxzW2lkeF9za2VsZXRvbl0KICByYW5nZXIgOj0gZW50aXR5X21vZGVsc1tpZHhfcmFuZ2VyXQogIGZvciBpIGluIDAgLi48IHNrZWxldG9uLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmc2tlbGV0b24ubWVzaGVzW2ldKQogIH0KICBmb3IgaSBpbiAwIC4uPCByYW5nZXIubWVzaENvdW50IHsKICAgIHNtb290aF9hbGxfbWVzaF9ub3JtYWxzKCZyYW5nZXIubWVzaGVzW2ldKQogIH0KICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnNrZWxldG9uLCBzeW50eV9tYXQpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZyYW5nZXIsIHN5bnR5X21hdCkKICAKICBlbmVteUNvdW50IDo9IDEwCiAgZm9yIGkgaW4gMCAuLjwgZW5lbXlDb3VudCB7CiAgICBoYW5kbGUgOj0gY3JlYXRlX2VudGl0eSgpCiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgaGVhbHRoOiBmbG9hdAogICAgaWYgcmFuZC5pbnRfbWF4KDMpID09IDEgewogICAgICBlLmZsYWdzICs9IHsuZW5lbXlfcmFuZ2VkfQogICAgICBlLmlkeF9tb2RlbCA9IGlkeF9yYW5nZXIKICAgICAgaGVhbHRoID0gNTAKICAgIH0gZWxzZSB7CiAgICAgIGUuZmxhZ3MgKz0gey5lbmVteV9mb2RkZXJ9CiAgICAgIGUuaWR4X21vZGVsID0gaWR4X3NrZWxldG9uCiAgICAgIGhlYWx0aCA9IDEwCiAgICB9CiAgICBlLnN0YXRzID0gRW50aXR5U3RhdHMgewogICAgICBoZWFsdGggPSBoZWFsdGgsCiAgICB9CiAgICBzcHJlYWQ6IGZsb2F0ID0gZmxvYXQoZW5lbXlDb3VudCkgLyAyCiAgICBlLnBvc2l0aW9uID0gZmxvYXQzezEwLCAwLCAxMH0gKyBmbG9hdDN7cmFuZF9yYW5nZSgtc3ByZWFkLCBzcHJlYWQpLCAwLCByYW5kX3JhbmdlKC1zcHJlYWQsIHNwcmVhZCl9CiAgICBhcHBlbmQoJmVuZW1pZXMsIGhhbmRsZSkKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZW5lbWllcykKICBhcHBlbmQoJmxhdGVfdXBkYXRlX3Byb2NzLCBsYXRlX3VwZGF0ZV9lbmVtaWVzKQogIGFwcGVuZCgmZHJhd19wcm9jcywgZHJhd19lbmVtaWVzKQp9Cgp1cGRhdGVfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIGZvciAmaGFuZGxlIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGRpcl90b19wbGF5ZXIgOj0gbm9ybShwbGF5ZXIucG9zaXRpb24gLSBlLnBvc2l0aW9uKQogICAgZS5mb3J3YXJkID0gZGlyX3RvX3BsYXllcgogICAgZS5yb3RhdGlvbiA9IGxvb2tfcm90KGUucG9zaXRpb24sIHBsYXllci5wb3NpdGlvbiwgZmxvYXQzX3VwKQogIH0KfQoKbGF0ZV91cGRhdGVfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBmb3IgJmhhbmRsZSwgaSBpbiBlbmVtaWVzIHsKICAgIGVuZW15IDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgaWYgLmRlYWQgaW4gZW5lbXkuZmxhZ3MgewogICAgICBkZXN0cm95X2VudGl0eShlbmVteS5oYW5kbGUpCiAgICAgIHVub3JkZXJlZF9yZW1vdmUoJmVuZW1pZXMsIGkpCiAgICB9CiAgfQp9CgpkcmF3X2VuZW1pZXMgOjogcHJvYygpIAp7CiAgZm9yICZoYW5kbGUgaW4gZW5lbWllcyB7CiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgbW9kZWwgOj0gZW50aXR5X21vZGVsc1tlLmlkeF9tb2RlbF0KICAgIGZvciBpIGluIDAgLi48IG1vZGVsLm1lc2hDb3VudCB7CiAgICAgIHJsLkRyYXdNZXNoKG1vZGVsLm1lc2hlc1tpXSwgbW9kZWwubWF0ZXJpYWxzW2kgKyAxXSwgbWF0cml4X3RycyhlLnBvc2l0aW9uLCBmbG9hdDNfb25lLCBlLnJvdGF0aW9uKSkKICAgIH0KICB9Cn0KCmdldF9lbmVtaWVzX2luX3JhbmdlIDo6IHByb2MocmFuZ2U6IGZsb2F0LCBwb3M6IGZsb2F0MykgLT4gW2R5bmFtaWNdRW50aXR5SGFuZGxlIAp7CiAgbGlzdCA6PSBtYWtlKFtkeW5hbWljXUVudGl0eUhhbmRsZSwgY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICBmb3IgJmhhbmRsZSBpbiBlbmVtaWVzIHsKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBpZiBsaW5hbGcuZGlzdGFuY2UoZS5wb3NpdGlvbiwgcG9zKSA8IHJhbmdlIHsKICAgICAgYXBwZW5kKCZsaXN0LCBlLmhhbmRsZSkKICAgIH0KICB9CiAgcmV0dXJuIGxpc3QKfQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\nimport \"core:log\"\r\nimport \"core:math/linalg\"\r\nimport \"core:math/rand\"\r\nimport rl \"vendor:raylib\"\r\n\r\nenemies: [dynamic]EntityHandle\r\nentity_models: [dynamic]rl.Model\r\n\r\ninit_enemies :: proc() \r\n{\r\n  idx_skeleton := load_entity_model(\"skeleton.glb\")\r\n  idx_ranger := load_entity_model(\"skeleton_ranger.glb\")\r\n\r\n  skeleton := entity_models[idx_skeleton]\r\n  ranger := entity_models[idx_ranger]\r\n  for i in 0 ..< skeleton.meshCount {\r\n    smooth_all_mesh_normals(&skeleton.meshes[i])\r\n  }\r\n  for i in 0 ..< ranger.meshCount {\r\n    smooth_all_mesh_normals(&ranger.meshes[i])\r\n  }\r\n  assign_material_all_mats(&skeleton, synty_mat)\r\n  assign_material_all_mats(&ranger, synty_mat)\r\n\r\n  enemyCount := 10\r\n  for i in 0 ..< enemyCount {\r\n    handle := create_entity()\r\n    e := get_entity(handle)\r\n    health: float\r\n    if rand.int_max(3) == 1 {\r\n      e.flags += {.enemy_ranged}\r\n      e.idx_model = idx_ranger\r\n      health = 50\r\n    } else {\r\n      e.flags += {.enemy_fodder}\r\n      e.idx_model = idx_skeleton\r\n      health = 10\r\n    }\r\n    e.stats = EntityStats {\r\n      health = health,\r\n    }\r\n    spread: float = float(enemyCount) / 2\r\n    e.position = float3{10, 0, 10} + float3{rand_range(-spread, spread), 0, rand_range(-spread, spread)}\r\n    append(&enemies, handle)\r\n  }\r\n\r\n  append(&update_procs, update_enemies)\r\n  append(&late_update_procs, late_update_enemies)\r\n  append(&draw_procs, draw_enemies)\r\n}\r\n\r\nupdate_enemies :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    dir_to_player := norm(player.position - e.position)\r\n    e.forward = dir_to_player\r\n    e.rotation = look_rot(e.position, player.position, float3_up)\r\n  }\r\n}\r\n\r\nlate_update_enemies :: proc() \r\n{\r\n  for &handle, i in enemies {\r\n    enemy := get_entity(handle)\r\n    if .dead in enemy.flags {\r\n      destroy_entity(enemy.handle)\r\n      unordered_remove(&enemies, i)\r\n    }\r\n  }\r\n}\r\n\r\ndraw_enemies :: proc() \r\n{\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    model := entity_models[e.idx_model]\r\n    for i in 0 ..< model.meshCount {\r\n      rl.DrawMesh(model.meshes[i], model.materials[i + 1], matrix_trs(e.position, float3_one, e.rotation))\r\n    }\r\n  }\r\n}\r\n\r\nget_enemies_in_range :: proc(range: float, pos: float3) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    if linalg.distance(e.position, pos) < range {\r\n      append(&list, e.handle)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 96
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAjQkAAAAAAACNCQAAcGFja2FnZSBtYWluCmltcG9ydCAiY29yZTpsb2ciCmltcG9ydCAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOm1hdGgvcmFuZCIKaW1wb3J0IHJsICJ2ZW5kb3I6cmF5bGliIgoKZW5lbWllczogW2R5bmFtaWNdRW50aXR5SGFuZGxlCmVudGl0eV9tb2RlbHM6IFtkeW5hbWljXXJsLk1vZGVsCgppbml0X2VuZW1pZXMgOjogcHJvYygpIAp7CiAgaWR4X3NrZWxldG9uIDo9IGxvYWRfZW50aXR5X21vZGVsKCJza2VsZXRvbi5nbGIiKQogIGlkeF9yYW5nZXIgOj0gbG9hZF9lbnRpdHlfbW9kZWwoInNrZWxldG9uX3Jhbmdlci5nbGIiKQoKICBza2VsZXRvbiA6PSBlbnRpdHlfbW9kZWxzW2lkeF9za2VsZXRvbl0KICByYW5nZXIgOj0gZW50aXR5X21vZGVsc1tpZHhfcmFuZ2VyXQogIGZvciBpIGluIDAgLi48IHNrZWxldG9uLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmc2tlbGV0b24ubWVzaGVzW2ldKQogIH0KICBmb3IgaSBpbiAwIC4uPCByYW5nZXIubWVzaENvdW50IHsKICAgIHNtb290aF9hbGxfbWVzaF9ub3JtYWxzKCZyYW5nZXIubWVzaGVzW2ldKQogIH0KICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnNrZWxldG9uLCBzeW50eV9tYXQpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZyYW5nZXIsIHN5bnR5X21hdCkKCiAgZW5lbXlDb3VudCA6PSAxMAogIGZvciBpIGluIDAgLi48IGVuZW15Q291bnQgewogICAgaGFuZGxlIDo9IGNyZWF0ZV9lbnRpdHkoKQogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGhlYWx0aDogZmxvYXQKICAgIGlmIHJhbmQuaW50X21heCgzKSA9PSAxIHsKICAgICAgZS5mbGFncyArPSB7LmVuZW15X3JhbmdlZH0KICAgICAgZS5pZHhfbW9kZWwgPSBpZHhfcmFuZ2VyCiAgICAgIGhlYWx0aCA9IDUwCiAgICB9IGVsc2UgewogICAgICBlLmZsYWdzICs9IHsuZW5lbXlfZm9kZGVyfQogICAgICBlLmlkeF9tb2RlbCA9IGlkeF9za2VsZXRvbgogICAgICBoZWFsdGggPSAxMAogICAgfQogICAgZS5zdGF0cyA9IEVudGl0eVN0YXRzIHsKICAgICAgaGVhbHRoID0gaGVhbHRoLAogICAgfQogICAgc3ByZWFkOiBmbG9hdCA9IGZsb2F0KGVuZW15Q291bnQpIC8gMgogICAgZS5wb3NpdGlvbiA9IGZsb2F0M3sxMCwgMCwgMTB9ICsgZmxvYXQze3JhbmRfcmFuZ2UoLXNwcmVhZCwgc3ByZWFkKSwgMCwgcmFuZF9yYW5nZSgtc3ByZWFkLCBzcHJlYWQpfQogICAgYXBwZW5kKCZlbmVtaWVzLCBoYW5kbGUpCiAgfQoKICBhcHBlbmQoJnVwZGF0ZV9wcm9jcywgdXBkYXRlX2VuZW1pZXMpCiAgYXBwZW5kKCZsYXRlX3VwZGF0ZV9wcm9jcywgbGF0ZV91cGRhdGVfZW5lbWllcykKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfZW5lbWllcykKfQoKdXBkYXRlX2VuZW1pZXMgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9lbnRpdHkocGxheWVyX2hhbmRsZSkKICBmb3IgJmhhbmRsZSBpbiBlbmVtaWVzIHsKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBkaXJfdG9fcGxheWVyIDo9IG5vcm0ocGxheWVyLnBvc2l0aW9uIC0gZS5wb3NpdGlvbikKICAgIGUuZm9yd2FyZCA9IGRpcl90b19wbGF5ZXIKICAgIGUucm90YXRpb24gPSBsb29rX3JvdChlLnBvc2l0aW9uLCBwbGF5ZXIucG9zaXRpb24sIGZsb2F0M191cCkKICB9Cn0KCmxhdGVfdXBkYXRlX2VuZW1pZXMgOjogcHJvYygpIAp7CiAgZm9yICZoYW5kbGUsIGkgaW4gZW5lbWllcyB7CiAgICBlbmVteSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGlmIC5kZWFkIGluIGVuZW15LmZsYWdzIHsKICAgICAgZGVzdHJveV9lbnRpdHkoZW5lbXkuaGFuZGxlKQogICAgICB1bm9yZGVyZWRfcmVtb3ZlKCZlbmVtaWVzLCBpKQogICAgfQogIH0KfQoKZHJhd19lbmVtaWVzIDo6IHByb2MoKSAKewogIGZvciAmaGFuZGxlIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIG1vZGVsIDo9IGVudGl0eV9tb2RlbHNbZS5pZHhfbW9kZWxdCiAgICBmb3IgaSBpbiAwIC4uPCBtb2RlbC5tZXNoQ291bnQgewogICAgICBybC5EcmF3TWVzaChtb2RlbC5tZXNoZXNbaV0sIG1vZGVsLm1hdGVyaWFsc1tpICsgMV0sIG1hdHJpeF90cnMoZS5wb3NpdGlvbiwgZmxvYXQzX29uZSwgZS5yb3RhdGlvbikpCiAgICB9CiAgfQp9CgpnZXRfZW5lbWllc19pbl9yYW5nZSA6OiBwcm9jKHJhbmdlOiBmbG9hdCwgcG9zOiBmbG9hdDMpIC0+IFtkeW5hbWljXUVudGl0eUhhbmRsZSAKewogIGxpc3QgOj0gbWFrZShbZHluYW1pY11FbnRpdHlIYW5kbGUsIGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgZm9yICZoYW5kbGUgaW4gZW5lbWllcyB7CiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgaWYgbGluYWxnLmRpc3RhbmNlKGUucG9zaXRpb24sIHBvcykgPCByYW5nZSB7CiAgICAgIGFwcGVuZCgmbGlzdCwgZS5oYW5kbGUpCiAgICB9CiAgfQogIHJldHVybiBsaXN0Cn0K",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "\ne.coo"
					},
					"BgAAALcEAAAAAAAAvAQAAAAAAAAAAAAAvAQAAAAAAAC9BAAAAAAAAAAAAAC9BAAAAAAAAL4EAAAAAAAAAAAAAL4EAAAAAAAAvwQAAAAAAAAAAAAAvwQAAAAAAADABAAAAAAAAAAAAADABAAAAAAAAMEEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					135,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "collisionRadiusSqr"
					},
					"AgAAAL4EAAAAAAAAvgQAAAAAAAADAAAAY29vvgQAAAAAAADQBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAANAEAAAAAAAA0QQAAAAAAAAAAAAA0QQAAAAAAADSBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": " 1,"
					},
					"AwAAANIEAAAAAAAA0wQAAAAAAAAAAAAA0wQAAAAAAADUBAAAAAAAAAAAAADUBAAAAAAAANUEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"left_delete",
					null,
					"AQAAANQEAAAAAAAA1AQAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					142,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\nimport \"core:log\"\r\nimport \"core:math/linalg\"\r\nimport \"core:math/rand\"\r\nimport rl \"vendor:raylib\"\r\n\r\nenemies: [dynamic]EntityHandle\r\nentity_models: [dynamic]rl.Model\r\n\r\ninit_enemies :: proc() \r\n{\r\n  idx_skeleton := load_entity_model(\"skeleton.glb\")\r\n  idx_ranger := load_entity_model(\"skeleton_ranger.glb\")\r\n\r\n  skeleton := entity_models[idx_skeleton]\r\n  ranger := entity_models[idx_ranger]\r\n  for i in 0 ..< skeleton.meshCount {\r\n    smooth_all_mesh_normals(&skeleton.meshes[i])\r\n  }\r\n  for i in 0 ..< ranger.meshCount {\r\n    smooth_all_mesh_normals(&ranger.meshes[i])\r\n  }\r\n  assign_material_all_mats(&skeleton, synty_mat)\r\n  assign_material_all_mats(&ranger, synty_mat)\r\n\r\n  enemyCount := 10\r\n  for i in 0 ..< enemyCount {\r\n    handle := create_entity()\r\n    e := get_entity(handle)\r\n    health: float\r\n    if rand.int_max(3) == 1 {\r\n      e.flags += {.enemy_ranged}\r\n      e.idx_model = idx_ranger\r\n      health = 50\r\n    } else {\r\n      e.flags += {.enemy_fodder}\r\n      e.idx_model = idx_skeleton\r\n      health = 10\r\n    }\r\n    e.stats = EntityStats {\r\n      health = health,\r\n    }\r\n    spread: float = float(enemyCount) / 2\r\n    e.position = float3{10, 0, 10} + float3{rand_range(-spread, spread), 0, rand_range(-spread, spread)}\r\n    e.collisionRadiusSqr = 1\r\n    append(&enemies, handle)\r\n  }\r\n\r\n  append(&update_procs, update_enemies)\r\n  append(&late_update_procs, late_update_enemies)\r\n  append(&draw_procs, draw_enemies)\r\n}\r\n\r\nupdate_enemies :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    dir_to_player := norm(player.position - e.position)\r\n    e.forward = dir_to_player\r\n    e.rotation = look_rot(e.position, player.position, float3_up)\r\n  }\r\n}\r\n\r\nlate_update_enemies :: proc() \r\n{\r\n  for &handle, i in enemies {\r\n    enemy := get_entity(handle)\r\n    if .dead in enemy.flags {\r\n      destroy_entity(enemy.handle)\r\n      unordered_remove(&enemies, i)\r\n    }\r\n  }\r\n}\r\n\r\ndraw_enemies :: proc() \r\n{\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    model := entity_models[e.idx_model]\r\n    for i in 0 ..< model.meshCount {\r\n      rl.DrawMesh(model.meshes[i], model.materials[i + 1], matrix_trs(e.position, float3_one, e.rotation))\r\n    }\r\n  }\r\n}\r\n\r\nget_enemies_in_range :: proc(range: float, pos: float3) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    if linalg.distance(e.position, pos) < range {\r\n      append(&list, e.handle)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 97
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAqgkAAAAAAACqCQAAcGFja2FnZSBtYWluCmltcG9ydCAiY29yZTpsb2ciCmltcG9ydCAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOm1hdGgvcmFuZCIKaW1wb3J0IHJsICJ2ZW5kb3I6cmF5bGliIgoKZW5lbWllczogW2R5bmFtaWNdRW50aXR5SGFuZGxlCmVudGl0eV9tb2RlbHM6IFtkeW5hbWljXXJsLk1vZGVsCgppbml0X2VuZW1pZXMgOjogcHJvYygpIAp7CiAgaWR4X3NrZWxldG9uIDo9IGxvYWRfZW50aXR5X21vZGVsKCJza2VsZXRvbi5nbGIiKQogIGlkeF9yYW5nZXIgOj0gbG9hZF9lbnRpdHlfbW9kZWwoInNrZWxldG9uX3Jhbmdlci5nbGIiKQoKICBza2VsZXRvbiA6PSBlbnRpdHlfbW9kZWxzW2lkeF9za2VsZXRvbl0KICByYW5nZXIgOj0gZW50aXR5X21vZGVsc1tpZHhfcmFuZ2VyXQogIGZvciBpIGluIDAgLi48IHNrZWxldG9uLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmc2tlbGV0b24ubWVzaGVzW2ldKQogIH0KICBmb3IgaSBpbiAwIC4uPCByYW5nZXIubWVzaENvdW50IHsKICAgIHNtb290aF9hbGxfbWVzaF9ub3JtYWxzKCZyYW5nZXIubWVzaGVzW2ldKQogIH0KICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnNrZWxldG9uLCBzeW50eV9tYXQpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZyYW5nZXIsIHN5bnR5X21hdCkKCiAgZW5lbXlDb3VudCA6PSAxMAogIGZvciBpIGluIDAgLi48IGVuZW15Q291bnQgewogICAgaGFuZGxlIDo9IGNyZWF0ZV9lbnRpdHkoKQogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGhlYWx0aDogZmxvYXQKICAgIGlmIHJhbmQuaW50X21heCgzKSA9PSAxIHsKICAgICAgZS5mbGFncyArPSB7LmVuZW15X3JhbmdlZH0KICAgICAgZS5pZHhfbW9kZWwgPSBpZHhfcmFuZ2VyCiAgICAgIGhlYWx0aCA9IDUwCiAgICB9IGVsc2UgewogICAgICBlLmZsYWdzICs9IHsuZW5lbXlfZm9kZGVyfQogICAgICBlLmlkeF9tb2RlbCA9IGlkeF9za2VsZXRvbgogICAgICBoZWFsdGggPSAxMAogICAgfQogICAgZS5zdGF0cyA9IEVudGl0eVN0YXRzIHsKICAgICAgaGVhbHRoID0gaGVhbHRoLAogICAgfQogICAgc3ByZWFkOiBmbG9hdCA9IGZsb2F0KGVuZW15Q291bnQpIC8gMgogICAgZS5wb3NpdGlvbiA9IGZsb2F0M3sxMCwgMCwgMTB9ICsgZmxvYXQze3JhbmRfcmFuZ2UoLXNwcmVhZCwgc3ByZWFkKSwgMCwgcmFuZF9yYW5nZSgtc3ByZWFkLCBzcHJlYWQpfQogICAgZS5jb2xsaXNpb25SYWRpdXNTcXIgPSAxCiAgICBhcHBlbmQoJmVuZW1pZXMsIGhhbmRsZSkKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZW5lbWllcykKICBhcHBlbmQoJmxhdGVfdXBkYXRlX3Byb2NzLCBsYXRlX3VwZGF0ZV9lbmVtaWVzKQogIGFwcGVuZCgmZHJhd19wcm9jcywgZHJhd19lbmVtaWVzKQp9Cgp1cGRhdGVfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIGZvciAmaGFuZGxlIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGRpcl90b19wbGF5ZXIgOj0gbm9ybShwbGF5ZXIucG9zaXRpb24gLSBlLnBvc2l0aW9uKQogICAgZS5mb3J3YXJkID0gZGlyX3RvX3BsYXllcgogICAgZS5yb3RhdGlvbiA9IGxvb2tfcm90KGUucG9zaXRpb24sIHBsYXllci5wb3NpdGlvbiwgZmxvYXQzX3VwKQogIH0KfQoKbGF0ZV91cGRhdGVfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBmb3IgJmhhbmRsZSwgaSBpbiBlbmVtaWVzIHsKICAgIGVuZW15IDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgaWYgLmRlYWQgaW4gZW5lbXkuZmxhZ3MgewogICAgICBkZXN0cm95X2VudGl0eShlbmVteS5oYW5kbGUpCiAgICAgIHVub3JkZXJlZF9yZW1vdmUoJmVuZW1pZXMsIGkpCiAgICB9CiAgfQp9CgpkcmF3X2VuZW1pZXMgOjogcHJvYygpIAp7CiAgZm9yICZoYW5kbGUgaW4gZW5lbWllcyB7CiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgbW9kZWwgOj0gZW50aXR5X21vZGVsc1tlLmlkeF9tb2RlbF0KICAgIGZvciBpIGluIDAgLi48IG1vZGVsLm1lc2hDb3VudCB7CiAgICAgIHJsLkRyYXdNZXNoKG1vZGVsLm1lc2hlc1tpXSwgbW9kZWwubWF0ZXJpYWxzW2kgKyAxXSwgbWF0cml4X3RycyhlLnBvc2l0aW9uLCBmbG9hdDNfb25lLCBlLnJvdGF0aW9uKSkKICAgIH0KICB9Cn0KCmdldF9lbmVtaWVzX2luX3JhbmdlIDo6IHByb2MocmFuZ2U6IGZsb2F0LCBwb3M6IGZsb2F0MykgLT4gW2R5bmFtaWNdRW50aXR5SGFuZGxlIAp7CiAgbGlzdCA6PSBtYWtlKFtkeW5hbWljXUVudGl0eUhhbmRsZSwgY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICBmb3IgJmhhbmRsZSBpbiBlbmVtaWVzIHsKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBpZiBsaW5hbGcuZGlzdGFuY2UoZS5wb3NpdGlvbiwgcG9zKSA8IHJhbmdlIHsKICAgICAgYXBwZW5kKCZsaXN0LCBlLmhhbmRsZSkKICAgIH0KICB9CiAgcmV0dXJuIGxpc3QKfQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "\n\nabilit"
					},
					"CQAAAJYCAAAAAAAAmQIAAAAAAAAAAAAAmQIAAAAAAACcAgAAAAAAAAAAAACXAgAAAAAAAJcCAAAAAAAAAgAAACAgmgIAAAAAAACbAgAAAAAAAAAAAACbAgAAAAAAAJwCAAAAAAAAAAAAAJwCAAAAAAAAnQIAAAAAAAAAAAAAnQIAAAAAAACeAgAAAAAAAAAAAACeAgAAAAAAAJ8CAAAAAAAAAAAAAJ8CAAAAAAAAoAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAKACAAAAAAAAoQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKECAAAAAAAAogIAAAAAAAAAAAAAogIAAAAAAACjAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKMCAAAAAAAApAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAKQCAAAAAAAApQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\nimport \"core:log\"\r\nimport \"core:math/linalg\"\r\nimport \"core:math/rand\"\r\nimport rl \"vendor:raylib\"\r\n\r\nenemies: [dynamic]EntityHandle\r\nentity_models: [dynamic]rl.Model\r\n\r\ninit_enemies :: proc() \r\n{\r\n  idx_skeleton := load_entity_model(\"skeleton.glb\")\r\n  idx_ranger := load_entity_model(\"skeleton_ranger.glb\")\r\n\r\n  skeleton := entity_models[idx_skeleton]\r\n  ranger := entity_models[idx_ranger]\r\n  for i in 0 ..< skeleton.meshCount {\r\n    smooth_all_mesh_normals(&skeleton.meshes[i])\r\n  }\r\n  for i in 0 ..< ranger.meshCount {\r\n    smooth_all_mesh_normals(&ranger.meshes[i])\r\n  }\r\n  assign_material_all_mats(&skeleton, synty_mat)\r\n  assign_material_all_mats(&ranger, synty_mat)\r\n\r\n  ability = 0\r\n\r\n  enemyCount := 10\r\n  for i in 0 ..< enemyCount {\r\n    handle := create_entity()\r\n    e := get_entity(handle)\r\n    health: float\r\n    if rand.int_max(3) == 1 {\r\n      e.flags += {.enemy_ranged}\r\n      e.idx_model = idx_ranger\r\n      health = 50\r\n    } else {\r\n      e.flags += {.enemy_fodder}\r\n      e.idx_model = idx_skeleton\r\n      health = 10\r\n    }\r\n    e.stats = EntityStats {\r\n      health = health,\r\n    }\r\n    spread: float = float(enemyCount) / 2\r\n    e.position = float3{10, 0, 10} + float3{rand_range(-spread, spread), 0, rand_range(-spread, spread)}\r\n    e.collisionRadiusSqr = 1\r\n    append(&enemies, handle)\r\n  }\r\n\r\n  append(&update_procs, update_enemies)\r\n  append(&late_update_procs, late_update_enemies)\r\n  append(&draw_procs, draw_enemies)\r\n}\r\n\r\nupdate_enemies :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    dir_to_player := norm(player.position - e.position)\r\n    e.forward = dir_to_player\r\n    e.rotation = look_rot(e.position, player.position, float3_up)\r\n  }\r\n}\r\n\r\nlate_update_enemies :: proc() \r\n{\r\n  for &handle, i in enemies {\r\n    enemy := get_entity(handle)\r\n    if .dead in enemy.flags {\r\n      destroy_entity(enemy.handle)\r\n      unordered_remove(&enemies, i)\r\n    }\r\n  }\r\n}\r\n\r\ndraw_enemies :: proc() \r\n{\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    model := entity_models[e.idx_model]\r\n    for i in 0 ..< model.meshCount {\r\n      rl.DrawMesh(model.meshes[i], model.materials[i + 1], matrix_trs(e.position, float3_one, e.rotation))\r\n    }\r\n  }\r\n}\r\n\r\nget_enemies_in_range :: proc(range: float, pos: float3) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    if linalg.distance(e.position, pos) < range {\r\n      append(&list, e.handle)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 99
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAuQkAAAAAAAC5CQAAcGFja2FnZSBtYWluCmltcG9ydCAiY29yZTpsb2ciCmltcG9ydCAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOm1hdGgvcmFuZCIKaW1wb3J0IHJsICJ2ZW5kb3I6cmF5bGliIgoKZW5lbWllczogW2R5bmFtaWNdRW50aXR5SGFuZGxlCmVudGl0eV9tb2RlbHM6IFtkeW5hbWljXXJsLk1vZGVsCgppbml0X2VuZW1pZXMgOjogcHJvYygpIAp7CiAgaWR4X3NrZWxldG9uIDo9IGxvYWRfZW50aXR5X21vZGVsKCJza2VsZXRvbi5nbGIiKQogIGlkeF9yYW5nZXIgOj0gbG9hZF9lbnRpdHlfbW9kZWwoInNrZWxldG9uX3Jhbmdlci5nbGIiKQoKICBza2VsZXRvbiA6PSBlbnRpdHlfbW9kZWxzW2lkeF9za2VsZXRvbl0KICByYW5nZXIgOj0gZW50aXR5X21vZGVsc1tpZHhfcmFuZ2VyXQogIGZvciBpIGluIDAgLi48IHNrZWxldG9uLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmc2tlbGV0b24ubWVzaGVzW2ldKQogIH0KICBmb3IgaSBpbiAwIC4uPCByYW5nZXIubWVzaENvdW50IHsKICAgIHNtb290aF9hbGxfbWVzaF9ub3JtYWxzKCZyYW5nZXIubWVzaGVzW2ldKQogIH0KICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnNrZWxldG9uLCBzeW50eV9tYXQpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZyYW5nZXIsIHN5bnR5X21hdCkKCiAgYWJpbGl0eSA9IDAKCiAgZW5lbXlDb3VudCA6PSAxMAogIGZvciBpIGluIDAgLi48IGVuZW15Q291bnQgewogICAgaGFuZGxlIDo9IGNyZWF0ZV9lbnRpdHkoKQogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGhlYWx0aDogZmxvYXQKICAgIGlmIHJhbmQuaW50X21heCgzKSA9PSAxIHsKICAgICAgZS5mbGFncyArPSB7LmVuZW15X3JhbmdlZH0KICAgICAgZS5pZHhfbW9kZWwgPSBpZHhfcmFuZ2VyCiAgICAgIGhlYWx0aCA9IDUwCiAgICB9IGVsc2UgewogICAgICBlLmZsYWdzICs9IHsuZW5lbXlfZm9kZGVyfQogICAgICBlLmlkeF9tb2RlbCA9IGlkeF9za2VsZXRvbgogICAgICBoZWFsdGggPSAxMAogICAgfQogICAgZS5zdGF0cyA9IEVudGl0eVN0YXRzIHsKICAgICAgaGVhbHRoID0gaGVhbHRoLAogICAgfQogICAgc3ByZWFkOiBmbG9hdCA9IGZsb2F0KGVuZW15Q291bnQpIC8gMgogICAgZS5wb3NpdGlvbiA9IGZsb2F0M3sxMCwgMCwgMTB9ICsgZmxvYXQze3JhbmRfcmFuZ2UoLXNwcmVhZCwgc3ByZWFkKSwgMCwgcmFuZF9yYW5nZSgtc3ByZWFkLCBzcHJlYWQpfQogICAgZS5jb2xsaXNpb25SYWRpdXNTcXIgPSAxCiAgICBhcHBlbmQoJmVuZW1pZXMsIGhhbmRsZSkKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZW5lbWllcykKICBhcHBlbmQoJmxhdGVfdXBkYXRlX3Byb2NzLCBsYXRlX3VwZGF0ZV9lbmVtaWVzKQogIGFwcGVuZCgmZHJhd19wcm9jcywgZHJhd19lbmVtaWVzKQp9Cgp1cGRhdGVfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIGZvciAmaGFuZGxlIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGRpcl90b19wbGF5ZXIgOj0gbm9ybShwbGF5ZXIucG9zaXRpb24gLSBlLnBvc2l0aW9uKQogICAgZS5mb3J3YXJkID0gZGlyX3RvX3BsYXllcgogICAgZS5yb3RhdGlvbiA9IGxvb2tfcm90KGUucG9zaXRpb24sIHBsYXllci5wb3NpdGlvbiwgZmxvYXQzX3VwKQogIH0KfQoKbGF0ZV91cGRhdGVfZW5lbWllcyA6OiBwcm9jKCkgCnsKICBmb3IgJmhhbmRsZSwgaSBpbiBlbmVtaWVzIHsKICAgIGVuZW15IDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgaWYgLmRlYWQgaW4gZW5lbXkuZmxhZ3MgewogICAgICBkZXN0cm95X2VudGl0eShlbmVteS5oYW5kbGUpCiAgICAgIHVub3JkZXJlZF9yZW1vdmUoJmVuZW1pZXMsIGkpCiAgICB9CiAgfQp9CgpkcmF3X2VuZW1pZXMgOjogcHJvYygpIAp7CiAgZm9yICZoYW5kbGUgaW4gZW5lbWllcyB7CiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgbW9kZWwgOj0gZW50aXR5X21vZGVsc1tlLmlkeF9tb2RlbF0KICAgIGZvciBpIGluIDAgLi48IG1vZGVsLm1lc2hDb3VudCB7CiAgICAgIHJsLkRyYXdNZXNoKG1vZGVsLm1lc2hlc1tpXSwgbW9kZWwubWF0ZXJpYWxzW2kgKyAxXSwgbWF0cml4X3RycyhlLnBvc2l0aW9uLCBmbG9hdDNfb25lLCBlLnJvdGF0aW9uKSkKICAgIH0KICB9Cn0KCmdldF9lbmVtaWVzX2luX3JhbmdlIDo6IHByb2MocmFuZ2U6IGZsb2F0LCBwb3M6IGZsb2F0MykgLT4gW2R5bmFtaWNdRW50aXR5SGFuZGxlIAp7CiAgbGlzdCA6PSBtYWtlKFtkeW5hbWljXUVudGl0eUhhbmRsZSwgY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICBmb3IgJmhhbmRsZSBpbiBlbmVtaWVzIHsKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBpZiBsaW5hbGcuZGlzdGFuY2UoZS5wb3NpdGlvbiwgcG9zKSA8IHJhbmdlIHsKICAgICAgYXBwZW5kKCZsaXN0LCBlLmhhbmRsZSkKICAgIH0KICB9CiAgcmV0dXJuIGxpc3QKfQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					163,
					1,
					"cut",
					null,
					"AQAAAJgCAAAAAAAAmAIAAAAAAAAOAAAAICBhYmlsaXR5ID0gMAo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\nimport \"core:log\"\r\nimport \"core:math/linalg\"\r\nimport \"core:math/rand\"\r\nimport rl \"vendor:raylib\"\r\n\r\nenemies: [dynamic]EntityHandle\r\nentity_models: [dynamic]rl.Model\r\n\r\ninit_enemies :: proc() \r\n{\r\n  idx_skeleton := load_entity_model(\"skeleton.glb\")\r\n  idx_ranger := load_entity_model(\"skeleton_ranger.glb\")\r\n\r\n  skeleton := entity_models[idx_skeleton]\r\n  ranger := entity_models[idx_ranger]\r\n  for i in 0 ..< skeleton.meshCount {\r\n    smooth_all_mesh_normals(&skeleton.meshes[i])\r\n  }\r\n  for i in 0 ..< ranger.meshCount {\r\n    smooth_all_mesh_normals(&ranger.meshes[i])\r\n  }\r\n  assign_material_all_mats(&skeleton, synty_mat)\r\n  assign_material_all_mats(&ranger, synty_mat)\r\n\r\n\r\n  enemyCount := 10\r\n  for i in 0 ..< enemyCount {\r\n    handle := create_entity()\r\n    e := get_entity(handle)\r\n    health: float\r\n    if rand.int_max(3) == 1 {\r\n      e.flags += {.enemy_ranged}\r\n      e.idx_model = idx_ranger\r\n      health = 50\r\n    } else {\r\n      e.flags += {.enemy_fodder}\r\n      e.idx_model = idx_skeleton\r\n      health = 10\r\n    }\r\n    e.stats = EntityStats {\r\n      health = health,\r\n    }\r\n    spread: float = float(enemyCount) / 2\r\n    e.position = float3{10, 0, 10} + float3{rand_range(-spread, spread), 0, rand_range(-spread, spread)}\r\n    e.collisionRadiusSqr = 1\r\n    append(&enemies, handle)\r\n  }\r\n\r\n  append(&update_procs, update_enemies)\r\n  append(&late_update_procs, late_update_enemies)\r\n  append(&draw_procs, draw_enemies)\r\n}\r\n\r\nupdate_enemies :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    dir_to_player := norm(player.position - e.position)\r\n    e.forward = dir_to_player\r\n    e.rotation = look_rot(e.position, player.position, float3_up)\r\n  }\r\n}\r\n\r\nlate_update_enemies :: proc() \r\n{\r\n  for &handle, i in enemies {\r\n    enemy := get_entity(handle)\r\n    if .dead in enemy.flags {\r\n      destroy_entity(enemy.handle)\r\n      unordered_remove(&enemies, i)\r\n    }\r\n  }\r\n}\r\n\r\ndraw_enemies :: proc() \r\n{\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    model := entity_models[e.idx_model]\r\n    for i in 0 ..< model.meshCount {\r\n      rl.DrawMesh(model.meshes[i], model.materials[i + 1], matrix_trs(e.position, float3_one, e.rotation))\r\n    }\r\n  }\r\n}\r\n\r\nget_enemies_in_range :: proc(range: float, pos: float3) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  for &handle in enemies {\r\n    e := get_entity(handle)\r\n    if linalg.distance(e.position, pos) < range {\r\n      append(&list, e.handle)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 98
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAqwkAAAAAAACrCQAAcGFja2FnZSBtYWluCmltcG9ydCAiY29yZTpsb2ciCmltcG9ydCAiY29yZTptYXRoL2xpbmFsZyIKaW1wb3J0ICJjb3JlOm1hdGgvcmFuZCIKaW1wb3J0IHJsICJ2ZW5kb3I6cmF5bGliIgoKZW5lbWllczogW2R5bmFtaWNdRW50aXR5SGFuZGxlCmVudGl0eV9tb2RlbHM6IFtkeW5hbWljXXJsLk1vZGVsCgppbml0X2VuZW1pZXMgOjogcHJvYygpIAp7CiAgaWR4X3NrZWxldG9uIDo9IGxvYWRfZW50aXR5X21vZGVsKCJza2VsZXRvbi5nbGIiKQogIGlkeF9yYW5nZXIgOj0gbG9hZF9lbnRpdHlfbW9kZWwoInNrZWxldG9uX3Jhbmdlci5nbGIiKQoKICBza2VsZXRvbiA6PSBlbnRpdHlfbW9kZWxzW2lkeF9za2VsZXRvbl0KICByYW5nZXIgOj0gZW50aXR5X21vZGVsc1tpZHhfcmFuZ2VyXQogIGZvciBpIGluIDAgLi48IHNrZWxldG9uLm1lc2hDb3VudCB7CiAgICBzbW9vdGhfYWxsX21lc2hfbm9ybWFscygmc2tlbGV0b24ubWVzaGVzW2ldKQogIH0KICBmb3IgaSBpbiAwIC4uPCByYW5nZXIubWVzaENvdW50IHsKICAgIHNtb290aF9hbGxfbWVzaF9ub3JtYWxzKCZyYW5nZXIubWVzaGVzW2ldKQogIH0KICBhc3NpZ25fbWF0ZXJpYWxfYWxsX21hdHMoJnNrZWxldG9uLCBzeW50eV9tYXQpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZyYW5nZXIsIHN5bnR5X21hdCkKCgogIGVuZW15Q291bnQgOj0gMTAKICBmb3IgaSBpbiAwIC4uPCBlbmVteUNvdW50IHsKICAgIGhhbmRsZSA6PSBjcmVhdGVfZW50aXR5KCkKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBoZWFsdGg6IGZsb2F0CiAgICBpZiByYW5kLmludF9tYXgoMykgPT0gMSB7CiAgICAgIGUuZmxhZ3MgKz0gey5lbmVteV9yYW5nZWR9CiAgICAgIGUuaWR4X21vZGVsID0gaWR4X3JhbmdlcgogICAgICBoZWFsdGggPSA1MAogICAgfSBlbHNlIHsKICAgICAgZS5mbGFncyArPSB7LmVuZW15X2ZvZGRlcn0KICAgICAgZS5pZHhfbW9kZWwgPSBpZHhfc2tlbGV0b24KICAgICAgaGVhbHRoID0gMTAKICAgIH0KICAgIGUuc3RhdHMgPSBFbnRpdHlTdGF0cyB7CiAgICAgIGhlYWx0aCA9IGhlYWx0aCwKICAgIH0KICAgIHNwcmVhZDogZmxvYXQgPSBmbG9hdChlbmVteUNvdW50KSAvIDIKICAgIGUucG9zaXRpb24gPSBmbG9hdDN7MTAsIDAsIDEwfSArIGZsb2F0M3tyYW5kX3JhbmdlKC1zcHJlYWQsIHNwcmVhZCksIDAsIHJhbmRfcmFuZ2UoLXNwcmVhZCwgc3ByZWFkKX0KICAgIGUuY29sbGlzaW9uUmFkaXVzU3FyID0gMQogICAgYXBwZW5kKCZlbmVtaWVzLCBoYW5kbGUpCiAgfQoKICBhcHBlbmQoJnVwZGF0ZV9wcm9jcywgdXBkYXRlX2VuZW1pZXMpCiAgYXBwZW5kKCZsYXRlX3VwZGF0ZV9wcm9jcywgbGF0ZV91cGRhdGVfZW5lbWllcykKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfZW5lbWllcykKfQoKdXBkYXRlX2VuZW1pZXMgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9lbnRpdHkocGxheWVyX2hhbmRsZSkKICBmb3IgJmhhbmRsZSBpbiBlbmVtaWVzIHsKICAgIGUgOj0gZ2V0X2VudGl0eShoYW5kbGUpCiAgICBkaXJfdG9fcGxheWVyIDo9IG5vcm0ocGxheWVyLnBvc2l0aW9uIC0gZS5wb3NpdGlvbikKICAgIGUuZm9yd2FyZCA9IGRpcl90b19wbGF5ZXIKICAgIGUucm90YXRpb24gPSBsb29rX3JvdChlLnBvc2l0aW9uLCBwbGF5ZXIucG9zaXRpb24sIGZsb2F0M191cCkKICB9Cn0KCmxhdGVfdXBkYXRlX2VuZW1pZXMgOjogcHJvYygpIAp7CiAgZm9yICZoYW5kbGUsIGkgaW4gZW5lbWllcyB7CiAgICBlbmVteSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIGlmIC5kZWFkIGluIGVuZW15LmZsYWdzIHsKICAgICAgZGVzdHJveV9lbnRpdHkoZW5lbXkuaGFuZGxlKQogICAgICB1bm9yZGVyZWRfcmVtb3ZlKCZlbmVtaWVzLCBpKQogICAgfQogIH0KfQoKZHJhd19lbmVtaWVzIDo6IHByb2MoKSAKewogIGZvciAmaGFuZGxlIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGhhbmRsZSkKICAgIG1vZGVsIDo9IGVudGl0eV9tb2RlbHNbZS5pZHhfbW9kZWxdCiAgICBmb3IgaSBpbiAwIC4uPCBtb2RlbC5tZXNoQ291bnQgewogICAgICBybC5EcmF3TWVzaChtb2RlbC5tZXNoZXNbaV0sIG1vZGVsLm1hdGVyaWFsc1tpICsgMV0sIG1hdHJpeF90cnMoZS5wb3NpdGlvbiwgZmxvYXQzX29uZSwgZS5yb3RhdGlvbikpCiAgICB9CiAgfQp9CgpnZXRfZW5lbWllc19pbl9yYW5nZSA6OiBwcm9jKHJhbmdlOiBmbG9hdCwgcG9zOiBmbG9hdDMpIC0+IFtkeW5hbWljXUVudGl0eUhhbmRsZSAKewogIGxpc3QgOj0gbWFrZShbZHluYW1pY11FbnRpdHlIYW5kbGUsIGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgZm9yICZoYW5kbGUgaW4gZW5lbWllcyB7CiAgICBlIDo9IGdldF9lbnRpdHkoaGFuZGxlKQogICAgaWYgbGluYWxnLmRpc3RhbmNlKGUucG9zaXRpb24sIHBvcykgPCByYW5nZSB7CiAgICAgIGFwcGVuZCgmbGlzdCwgZS5oYW5kbGUpCiAgICB9CiAgfQogIHJldHVybiBsaXN0Cn0K",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "ability_divine_weapons.odin",
			"settings":
			{
				"buffer_size": 4065,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					742,
					1,
					"left_delete",
					null,
					"AQAAAMwMAAAAAAAAzAwAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAADNDAAAAAAAAM0MAAAAAAAAAAAAAAAAhUA"
				],
				[
					744,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\nDivine_Weapons :: struct {\r\n  shield_stat:      float,\r\n  current_rotation: float,\r\n  rotation_speed:   float,\r\n  ts_swords_active: float,\r\n  ts_ready:         float,\r\n  attack_range:     float,\r\n  attack_t:         float, //lerp from attack position to attack target 0-1\r\n  num_swords:       int,\r\n  state:            Divine_Weapons_State,\r\n  idx_model:        int,\r\n  mouse_pos:        float3,\r\n  type:             AbilityType,\r\n  positions:        [dynamic]float3,\r\n}\r\n\r\nDivine_Weapons_State :: enum byte {\r\n  READY = 0,\r\n  COOLDOWN,\r\n  ROTATING_SHIELDS,\r\n  CHARGING,\r\n  ATTACKING,\r\n}\r\n\r\n@(private = \"file\")\r\nability: Divine_Weapons\r\n\r\ncreate_divine_weapons :: proc() \r\n{\r\n\r\n  ability = Divine_Weapons {\r\n    attack_range   = 3,\r\n    rotation_speed = 6,\r\n    state          = .READY,\r\n    num_swords     = 6,\r\n  }\r\n\r\n  //this is stupid\r\n  ability.positions = make([dynamic]float3)\r\n  for i in 0 ..< ability.num_swords {\r\n    append(&ability.positions, float3_zero)\r\n  }\r\n\r\n  append(&update_procs, update_divine_weapons)\r\n  append(&draw_procs, draw_divine_weapons)\r\n}\r\n\r\n\r\nupdate_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n\r\n\r\n  if ability.state == .COOLDOWN {\r\n    if time_now > ability.ts_ready {\r\n      ability.state = .READY\r\n    }\r\n  }\r\n\r\n  //trigger\r\n  if ability.state == .READY && core_input.ability_triggered && time_now > ability.ts_ready {\r\n    ability.state = .ROTATING_SHIELDS\r\n    ability.ts_swords_active = time_now + 0.5\r\n    player.stats.shield += ability.shield_stat\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      ability.positions[i] = player.position + float3_up\r\n    }\r\n  }\r\n\r\n  if ability.state == .ROTATING_SHIELDS {\r\n\r\n    ability.current_rotation += dt\r\n    interval := (math.PI * 2) / float(ability.num_swords)\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + ability.current_rotation\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)}\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], player.position + offset * 2 + float3_up, dt * 30)\r\n    }\r\n\r\n    if time_now > ability.ts_swords_active && core_input.ability_triggered {\r\n      ability.state = .CHARGING\r\n      ability.attack_t = 0\r\n    }\r\n  }\r\n\r\n  if ability.state == .CHARGING {\r\n    charge_dur: float = 0.4\r\n    ability.attack_t += dt / charge_dur\r\n\r\n    //calculate the positions behind the player, and lerp towards them\r\n    end_positions := make([dynamic]float3, context.temp_allocator)\r\n    arc: float = math.PI / 1.1\r\n    interval := arc / float(ability.num_swords)\r\n    player_rads := math.atan2(-player.forward.x, player.forward.z) - math.PI * 0.88\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + player_rads\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)} * 2\r\n      append(&end_positions, player.position + offset + float3_up)\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], end_positions[i], dt * 30)\r\n    }\r\n\r\n    if ability.attack_t > 1 {\r\n      ability.state = .ATTACKING\r\n      ability.attack_t = 0\r\n      mouse_pos := get_mouse_pos_world() + float3_up\r\n      dir := mouse_pos - player.position\r\n      length := linalg.length(dir)\r\n      if length > ability.attack_range {\r\n        mouse_pos = player.position + norm(dir) * ability.attack_range\r\n      }\r\n    }\r\n  }\r\n\r\n  if ability.state == .ATTACKING {\r\n    attack_dur: float = 0.5\r\n    ability.attack_t += dt / attack_dur\r\n\r\n    for &p in ability.positions {\r\n      p = linalg.lerp(p, ability.mouse_pos, ability.attack_t)\r\n    }\r\n    if ability.attack_t > 1 {\r\n      ability.state = .COOLDOWN\r\n    }\r\n  }\r\n}\r\n\r\n\r\ndraw_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n  model := entity_models[ability.idx_model]\r\n  if ability.state == .ROTATING_SHIELDS || ability.state == .CHARGING || ability.state == .ATTACKING {\r\n    for pos in ability.positions {\r\n      rl.DrawSphereWires(pos, 0.2, 2, 10, rl.RED)\r\n    }\r\n  }\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 146
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAIA8AAAAAAAAgDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpEaXZpbmVfV2VhcG9ucyA6OiBzdHJ1Y3QgewogIHNoaWVsZF9zdGF0OiAgICAgIGZsb2F0LAogIGN1cnJlbnRfcm90YXRpb246IGZsb2F0LAogIHJvdGF0aW9uX3NwZWVkOiAgIGZsb2F0LAogIHRzX3N3b3Jkc19hY3RpdmU6IGZsb2F0LAogIHRzX3JlYWR5OiAgICAgICAgIGZsb2F0LAogIGF0dGFja19yYW5nZTogICAgIGZsb2F0LAogIGF0dGFja190OiAgICAgICAgIGZsb2F0LCAvL2xlcnAgZnJvbSBhdHRhY2sgcG9zaXRpb24gdG8gYXR0YWNrIHRhcmdldCAwLTEKICBudW1fc3dvcmRzOiAgICAgICBpbnQsCiAgc3RhdGU6ICAgICAgICAgICAgRGl2aW5lX1dlYXBvbnNfU3RhdGUsCiAgaWR4X21vZGVsOiAgICAgICAgaW50LAogIG1vdXNlX3BvczogICAgICAgIGZsb2F0MywKICB0eXBlOiAgICAgICAgICAgICBBYmlsaXR5VHlwZSwKICBwb3NpdGlvbnM6ICAgICAgICBbZHluYW1pY11mbG9hdDMsCn0KCkRpdmluZV9XZWFwb25zX1N0YXRlIDo6IGVudW0gYnl0ZSB7CiAgUkVBRFkgPSAwLAogIENPT0xET1dOLAogIFJPVEFUSU5HX1NISUVMRFMsCiAgQ0hBUkdJTkcsCiAgQVRUQUNLSU5HLAp9CgpAKHByaXZhdGUgPSAiZmlsZSIpCmFiaWxpdHk6IERpdmluZV9XZWFwb25zCgpjcmVhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CgogIGFiaWxpdHkgPSBEaXZpbmVfV2VhcG9ucyB7CiAgICBhdHRhY2tfcmFuZ2UgICA9IDMsCiAgICByb3RhdGlvbl9zcGVlZCA9IDYsCiAgICBzdGF0ZSAgICAgICAgICA9IC5SRUFEWSwKICAgIG51bV9zd29yZHMgICAgID0gNiwKICB9CgogIC8vdGhpcyBpcyBzdHVwaWQKICBhYmlsaXR5LnBvc2l0aW9ucyA9IG1ha2UoW2R5bmFtaWNdZmxvYXQzKQogIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICBhcHBlbmQoJmFiaWxpdHkucG9zaXRpb25zLCBmbG9hdDNfemVybykKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZGl2aW5lX3dlYXBvbnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2RpdmluZV93ZWFwb25zKQp9CgoKdXBkYXRlX2RpdmluZV93ZWFwb25zIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKCgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkNPT0xET1dOIHsKICAgIGlmIHRpbWVfbm93ID4gYWJpbGl0eS50c19yZWFkeSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuUkVBRFkKICAgIH0KICB9CgogIC8vdHJpZ2dlcgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJFQURZICYmIGNvcmVfaW5wdXQuYWJpbGl0eV90cmlnZ2VyZWQgJiYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3JlYWR5IHsKICAgIGFiaWxpdHkuc3RhdGUgPSAuUk9UQVRJTkdfU0hJRUxEUwogICAgYWJpbGl0eS50c19zd29yZHNfYWN0aXZlID0gdGltZV9ub3cgKyAwLjUKICAgIHBsYXllci5zdGF0cy5zaGllbGQgKz0gYWJpbGl0eS5zaGllbGRfc3RhdAoKICAgIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gcGxheWVyLnBvc2l0aW9uICsgZmxvYXQzX3VwCiAgICB9CiAgfQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5ST1RBVElOR19TSElFTERTIHsKCiAgICBhYmlsaXR5LmN1cnJlbnRfcm90YXRpb24gKz0gZHQKICAgIGludGVydmFsIDo9IChtYXRoLlBJICogMikgLyBmbG9hdChhYmlsaXR5Lm51bV9zd29yZHMpCiAgICBmb3IgaSBpbiAwIC4uPCBhYmlsaXR5Lm51bV9zd29yZHMgewogICAgICBhbmdsZSA6PSBmbG9hdChpKSAqIGludGVydmFsICsgYWJpbGl0eS5jdXJyZW50X3JvdGF0aW9uCiAgICAgIG9mZnNldCA6PSBmbG9hdDN7bWF0aC5jb3MoYW5nbGUpLCAwLCBtYXRoLnNpbihhbmdsZSl9CiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gbGluYWxnLmxlcnAoYWJpbGl0eS5wb3NpdGlvbnNbaV0sIHBsYXllci5wb3NpdGlvbiArIG9mZnNldCAqIDIgKyBmbG9hdDNfdXAsIGR0ICogMzApCiAgICB9CgogICAgaWYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3N3b3Jkc19hY3RpdmUgJiYgY29yZV9pbnB1dC5hYmlsaXR5X3RyaWdnZXJlZCB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQ0hBUkdJTkcKICAgICAgYWJpbGl0eS5hdHRhY2tfdCA9IDAKICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkNIQVJHSU5HIHsKICAgIGNoYXJnZV9kdXI6IGZsb2F0ID0gMC40CiAgICBhYmlsaXR5LmF0dGFja190ICs9IGR0IC8gY2hhcmdlX2R1cgoKICAgIC8vY2FsY3VsYXRlIHRoZSBwb3NpdGlvbnMgYmVoaW5kIHRoZSBwbGF5ZXIsIGFuZCBsZXJwIHRvd2FyZHMgdGhlbQogICAgZW5kX3Bvc2l0aW9ucyA6PSBtYWtlKFtkeW5hbWljXWZsb2F0MywgY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICAgIGFyYzogZmxvYXQgPSBtYXRoLlBJIC8gMS4xCiAgICBpbnRlcnZhbCA6PSBhcmMgLyBmbG9hdChhYmlsaXR5Lm51bV9zd29yZHMpCiAgICBwbGF5ZXJfcmFkcyA6PSBtYXRoLmF0YW4yKC1wbGF5ZXIuZm9yd2FyZC54LCBwbGF5ZXIuZm9yd2FyZC56KSAtIG1hdGguUEkgKiAwLjg4CgogICAgZm9yIGkgaW4gMCAuLjwgYWJpbGl0eS5udW1fc3dvcmRzIHsKICAgICAgYW5nbGUgOj0gZmxvYXQoaSkgKiBpbnRlcnZhbCArIHBsYXllcl9yYWRzCiAgICAgIG9mZnNldCA6PSBmbG9hdDN7bWF0aC5jb3MoYW5nbGUpLCAwLCBtYXRoLnNpbihhbmdsZSl9ICogMgogICAgICBhcHBlbmQoJmVuZF9wb3NpdGlvbnMsIHBsYXllci5wb3NpdGlvbiArIG9mZnNldCArIGZsb2F0M191cCkKICAgICAgYWJpbGl0eS5wb3NpdGlvbnNbaV0gPSBsaW5hbGcubGVycChhYmlsaXR5LnBvc2l0aW9uc1tpXSwgZW5kX3Bvc2l0aW9uc1tpXSwgZHQgKiAzMCkKICAgIH0KCiAgICBpZiBhYmlsaXR5LmF0dGFja190ID4gMSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQVRUQUNLSU5HCiAgICAgIGFiaWxpdHkuYXR0YWNrX3QgPSAwCiAgICAgIG1vdXNlX3BvcyA6PSBnZXRfbW91c2VfcG9zX3dvcmxkKCkgKyBmbG9hdDNfdXAKICAgICAgZGlyIDo9IG1vdXNlX3BvcyAtIHBsYXllci5wb3NpdGlvbgogICAgICBsZW5ndGggOj0gbGluYWxnLmxlbmd0aChkaXIpCiAgICAgIGlmIGxlbmd0aCA+IGFiaWxpdHkuYXR0YWNrX3JhbmdlIHsKICAgICAgICBtb3VzZV9wb3MgPSBwbGF5ZXIucG9zaXRpb24gKyBub3JtKGRpcikgKiBhYmlsaXR5LmF0dGFja19yYW5nZQogICAgICB9CiAgICB9CiAgfQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5BVFRBQ0tJTkcgewogICAgYXR0YWNrX2R1cjogZmxvYXQgPSAwLjUKICAgIGFiaWxpdHkuYXR0YWNrX3QgKz0gZHQgLyBhdHRhY2tfZHVyCgogICAgZm9yICZwIGluIGFiaWxpdHkucG9zaXRpb25zIHsKICAgICAgcCA9IGxpbmFsZy5sZXJwKHAsIGFiaWxpdHkubW91c2VfcG9zLCBhYmlsaXR5LmF0dGFja190KQogICAgfQogICAgaWYgYWJpbGl0eS5hdHRhY2tfdCA+IDEgewogICAgICBhYmlsaXR5LnN0YXRlID0gLkNPT0xET1dOCiAgICB9CiAgfQp9CgoKZHJhd19kaXZpbmVfd2VhcG9ucyA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X3BsYXllcigpCiAgbW9kZWwgOj0gZW50aXR5X21vZGVsc1thYmlsaXR5LmlkeF9tb2RlbF0KICBpZiBhYmlsaXR5LnN0YXRlID09IC5ST1RBVElOR19TSElFTERTIHx8IGFiaWxpdHkuc3RhdGUgPT0gLkNIQVJHSU5HIHx8IGFiaWxpdHkuc3RhdGUgPT0gLkFUVEFDS0lORyB7CiAgICBmb3IgcG9zIGluIGFiaWxpdHkucG9zaXRpb25zIHsKICAgICAgcmwuRHJhd1NwaGVyZVdpcmVzKHBvcywgMC4yLCAyLCAxMCwgcmwuUkVEKQogICAgfQogIH0KfQo",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAADMDAAAAAAAAMwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					751,
					1,
					"insert",
					{
						"characters": "abilit."
					},
					"BwAAAIYMAAAAAAAAhwwAAAAAAAAAAAAAhwwAAAAAAACIDAAAAAAAAAAAAACIDAAAAAAAAIkMAAAAAAAAAAAAAIkMAAAAAAAAigwAAAAAAAAAAAAAigwAAAAAAACLDAAAAAAAAAAAAACLDAAAAAAAAIwMAAAAAAAAAAAAAIwMAAAAAAAAjQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAACGDAAAAAAAAIYMAAAAAAAAAAAAAABAU0A"
				],
				[
					754,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\nDivine_Weapons :: struct {\r\n  shield_stat:      float,\r\n  current_rotation: float,\r\n  rotation_speed:   float,\r\n  ts_swords_active: float,\r\n  ts_ready:         float,\r\n  attack_range:     float,\r\n  attack_t:         float, //lerp from attack position to attack target 0-1\r\n  num_swords:       int,\r\n  state:            Divine_Weapons_State,\r\n  idx_model:        int,\r\n  mouse_pos:        float3,\r\n  type:             AbilityType,\r\n  positions:        [dynamic]float3,\r\n}\r\n\r\nDivine_Weapons_State :: enum byte {\r\n  READY = 0,\r\n  COOLDOWN,\r\n  ROTATING_SHIELDS,\r\n  CHARGING,\r\n  ATTACKING,\r\n}\r\n\r\n@(private = \"file\")\r\nability: Divine_Weapons\r\n\r\ncreate_divine_weapons :: proc() \r\n{\r\n\r\n  ability = Divine_Weapons {\r\n    attack_range   = 3,\r\n    rotation_speed = 6,\r\n    state          = .READY,\r\n    num_swords     = 6,\r\n  }\r\n\r\n  //this is stupid\r\n  ability.positions = make([dynamic]float3)\r\n  for i in 0 ..< ability.num_swords {\r\n    append(&ability.positions, float3_zero)\r\n  }\r\n\r\n  append(&update_procs, update_divine_weapons)\r\n  append(&draw_procs, draw_divine_weapons)\r\n}\r\n\r\n\r\nupdate_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n\r\n\r\n  if ability.state == .COOLDOWN {\r\n    if time_now > ability.ts_ready {\r\n      ability.state = .READY\r\n    }\r\n  }\r\n\r\n  //trigger\r\n  if ability.state == .READY && core_input.ability_triggered && time_now > ability.ts_ready {\r\n    ability.state = .ROTATING_SHIELDS\r\n    ability.ts_swords_active = time_now + 0.5\r\n    player.stats.shield += ability.shield_stat\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      ability.positions[i] = player.position + float3_up\r\n    }\r\n  }\r\n\r\n  if ability.state == .ROTATING_SHIELDS {\r\n\r\n    ability.current_rotation += dt\r\n    interval := (math.PI * 2) / float(ability.num_swords)\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + ability.current_rotation\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)}\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], player.position + offset * 2 + float3_up, dt * 30)\r\n    }\r\n\r\n    if time_now > ability.ts_swords_active && core_input.ability_triggered {\r\n      ability.state = .CHARGING\r\n      ability.attack_t = 0\r\n    }\r\n  }\r\n\r\n  if ability.state == .CHARGING {\r\n    charge_dur: float = 0.4\r\n    ability.attack_t += dt / charge_dur\r\n\r\n    //calculate the positions behind the player, and lerp towards them\r\n    end_positions := make([dynamic]float3, context.temp_allocator)\r\n    arc: float = math.PI / 1.1\r\n    interval := arc / float(ability.num_swords)\r\n    player_rads := math.atan2(-player.forward.x, player.forward.z) - math.PI * 0.88\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + player_rads\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)} * 2\r\n      append(&end_positions, player.position + offset + float3_up)\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], end_positions[i], dt * 30)\r\n    }\r\n\r\n    if ability.attack_t > 1 {\r\n      ability.state = .ATTACKING\r\n      ability.attack_t = 0\r\n      mouse_pos := get_mouse_pos_world() + float3_up\r\n      dir := mouse_pos - player.position\r\n      length := linalg.length(dir)\r\n      if length > ability.attack_range {\r\n        abilit.mouse_pos = player.position + norm(dir) * ability.attack_range\r\n      }\r\n    }\r\n  }\r\n\r\n  if ability.state == .ATTACKING {\r\n    attack_dur: float = 0.5\r\n    ability.attack_t += dt / attack_dur\r\n\r\n    for &p in ability.positions {\r\n      p = linalg.lerp(p, ability.mouse_pos, ability.attack_t)\r\n    }\r\n    if ability.attack_t > 1 {\r\n      ability.state = .COOLDOWN\r\n    }\r\n  }\r\n}\r\n\r\n\r\ndraw_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n  model := entity_models[ability.idx_model]\r\n  if ability.state == .ROTATING_SHIELDS || ability.state == .CHARGING || ability.state == .ATTACKING {\r\n    for pos in ability.positions {\r\n      rl.DrawSphereWires(pos, 0.2, 2, 10, rl.RED)\r\n    }\r\n  }\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 146
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAJw8AAAAAAAAnDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpEaXZpbmVfV2VhcG9ucyA6OiBzdHJ1Y3QgewogIHNoaWVsZF9zdGF0OiAgICAgIGZsb2F0LAogIGN1cnJlbnRfcm90YXRpb246IGZsb2F0LAogIHJvdGF0aW9uX3NwZWVkOiAgIGZsb2F0LAogIHRzX3N3b3Jkc19hY3RpdmU6IGZsb2F0LAogIHRzX3JlYWR5OiAgICAgICAgIGZsb2F0LAogIGF0dGFja19yYW5nZTogICAgIGZsb2F0LAogIGF0dGFja190OiAgICAgICAgIGZsb2F0LCAvL2xlcnAgZnJvbSBhdHRhY2sgcG9zaXRpb24gdG8gYXR0YWNrIHRhcmdldCAwLTEKICBudW1fc3dvcmRzOiAgICAgICBpbnQsCiAgc3RhdGU6ICAgICAgICAgICAgRGl2aW5lX1dlYXBvbnNfU3RhdGUsCiAgaWR4X21vZGVsOiAgICAgICAgaW50LAogIG1vdXNlX3BvczogICAgICAgIGZsb2F0MywKICB0eXBlOiAgICAgICAgICAgICBBYmlsaXR5VHlwZSwKICBwb3NpdGlvbnM6ICAgICAgICBbZHluYW1pY11mbG9hdDMsCn0KCkRpdmluZV9XZWFwb25zX1N0YXRlIDo6IGVudW0gYnl0ZSB7CiAgUkVBRFkgPSAwLAogIENPT0xET1dOLAogIFJPVEFUSU5HX1NISUVMRFMsCiAgQ0hBUkdJTkcsCiAgQVRUQUNLSU5HLAp9CgpAKHByaXZhdGUgPSAiZmlsZSIpCmFiaWxpdHk6IERpdmluZV9XZWFwb25zCgpjcmVhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CgogIGFiaWxpdHkgPSBEaXZpbmVfV2VhcG9ucyB7CiAgICBhdHRhY2tfcmFuZ2UgICA9IDMsCiAgICByb3RhdGlvbl9zcGVlZCA9IDYsCiAgICBzdGF0ZSAgICAgICAgICA9IC5SRUFEWSwKICAgIG51bV9zd29yZHMgICAgID0gNiwKICB9CgogIC8vdGhpcyBpcyBzdHVwaWQKICBhYmlsaXR5LnBvc2l0aW9ucyA9IG1ha2UoW2R5bmFtaWNdZmxvYXQzKQogIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICBhcHBlbmQoJmFiaWxpdHkucG9zaXRpb25zLCBmbG9hdDNfemVybykKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZGl2aW5lX3dlYXBvbnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2RpdmluZV93ZWFwb25zKQp9CgoKdXBkYXRlX2RpdmluZV93ZWFwb25zIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKCgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkNPT0xET1dOIHsKICAgIGlmIHRpbWVfbm93ID4gYWJpbGl0eS50c19yZWFkeSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuUkVBRFkKICAgIH0KICB9CgogIC8vdHJpZ2dlcgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJFQURZICYmIGNvcmVfaW5wdXQuYWJpbGl0eV90cmlnZ2VyZWQgJiYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3JlYWR5IHsKICAgIGFiaWxpdHkuc3RhdGUgPSAuUk9UQVRJTkdfU0hJRUxEUwogICAgYWJpbGl0eS50c19zd29yZHNfYWN0aXZlID0gdGltZV9ub3cgKyAwLjUKICAgIHBsYXllci5zdGF0cy5zaGllbGQgKz0gYWJpbGl0eS5zaGllbGRfc3RhdAoKICAgIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gcGxheWVyLnBvc2l0aW9uICsgZmxvYXQzX3VwCiAgICB9CiAgfQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5ST1RBVElOR19TSElFTERTIHsKCiAgICBhYmlsaXR5LmN1cnJlbnRfcm90YXRpb24gKz0gZHQKICAgIGludGVydmFsIDo9IChtYXRoLlBJICogMikgLyBmbG9hdChhYmlsaXR5Lm51bV9zd29yZHMpCiAgICBmb3IgaSBpbiAwIC4uPCBhYmlsaXR5Lm51bV9zd29yZHMgewogICAgICBhbmdsZSA6PSBmbG9hdChpKSAqIGludGVydmFsICsgYWJpbGl0eS5jdXJyZW50X3JvdGF0aW9uCiAgICAgIG9mZnNldCA6PSBmbG9hdDN7bWF0aC5jb3MoYW5nbGUpLCAwLCBtYXRoLnNpbihhbmdsZSl9CiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gbGluYWxnLmxlcnAoYWJpbGl0eS5wb3NpdGlvbnNbaV0sIHBsYXllci5wb3NpdGlvbiArIG9mZnNldCAqIDIgKyBmbG9hdDNfdXAsIGR0ICogMzApCiAgICB9CgogICAgaWYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3N3b3Jkc19hY3RpdmUgJiYgY29yZV9pbnB1dC5hYmlsaXR5X3RyaWdnZXJlZCB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQ0hBUkdJTkcKICAgICAgYWJpbGl0eS5hdHRhY2tfdCA9IDAKICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkNIQVJHSU5HIHsKICAgIGNoYXJnZV9kdXI6IGZsb2F0ID0gMC40CiAgICBhYmlsaXR5LmF0dGFja190ICs9IGR0IC8gY2hhcmdlX2R1cgoKICAgIC8vY2FsY3VsYXRlIHRoZSBwb3NpdGlvbnMgYmVoaW5kIHRoZSBwbGF5ZXIsIGFuZCBsZXJwIHRvd2FyZHMgdGhlbQogICAgZW5kX3Bvc2l0aW9ucyA6PSBtYWtlKFtkeW5hbWljXWZsb2F0MywgY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICAgIGFyYzogZmxvYXQgPSBtYXRoLlBJIC8gMS4xCiAgICBpbnRlcnZhbCA6PSBhcmMgLyBmbG9hdChhYmlsaXR5Lm51bV9zd29yZHMpCiAgICBwbGF5ZXJfcmFkcyA6PSBtYXRoLmF0YW4yKC1wbGF5ZXIuZm9yd2FyZC54LCBwbGF5ZXIuZm9yd2FyZC56KSAtIG1hdGguUEkgKiAwLjg4CgogICAgZm9yIGkgaW4gMCAuLjwgYWJpbGl0eS5udW1fc3dvcmRzIHsKICAgICAgYW5nbGUgOj0gZmxvYXQoaSkgKiBpbnRlcnZhbCArIHBsYXllcl9yYWRzCiAgICAgIG9mZnNldCA6PSBmbG9hdDN7bWF0aC5jb3MoYW5nbGUpLCAwLCBtYXRoLnNpbihhbmdsZSl9ICogMgogICAgICBhcHBlbmQoJmVuZF9wb3NpdGlvbnMsIHBsYXllci5wb3NpdGlvbiArIG9mZnNldCArIGZsb2F0M191cCkKICAgICAgYWJpbGl0eS5wb3NpdGlvbnNbaV0gPSBsaW5hbGcubGVycChhYmlsaXR5LnBvc2l0aW9uc1tpXSwgZW5kX3Bvc2l0aW9uc1tpXSwgZHQgKiAzMCkKICAgIH0KCiAgICBpZiBhYmlsaXR5LmF0dGFja190ID4gMSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQVRUQUNLSU5HCiAgICAgIGFiaWxpdHkuYXR0YWNrX3QgPSAwCiAgICAgIG1vdXNlX3BvcyA6PSBnZXRfbW91c2VfcG9zX3dvcmxkKCkgKyBmbG9hdDNfdXAKICAgICAgZGlyIDo9IG1vdXNlX3BvcyAtIHBsYXllci5wb3NpdGlvbgogICAgICBsZW5ndGggOj0gbGluYWxnLmxlbmd0aChkaXIpCiAgICAgIGlmIGxlbmd0aCA+IGFiaWxpdHkuYXR0YWNrX3JhbmdlIHsKICAgICAgICBhYmlsaXQubW91c2VfcG9zID0gcGxheWVyLnBvc2l0aW9uICsgbm9ybShkaXIpICogYWJpbGl0eS5hdHRhY2tfcmFuZ2UKICAgICAgfQogICAgfQogIH0KCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuQVRUQUNLSU5HIHsKICAgIGF0dGFja19kdXI6IGZsb2F0ID0gMC41CiAgICBhYmlsaXR5LmF0dGFja190ICs9IGR0IC8gYXR0YWNrX2R1cgoKICAgIGZvciAmcCBpbiBhYmlsaXR5LnBvc2l0aW9ucyB7CiAgICAgIHAgPSBsaW5hbGcubGVycChwLCBhYmlsaXR5Lm1vdXNlX3BvcywgYWJpbGl0eS5hdHRhY2tfdCkKICAgIH0KICAgIGlmIGFiaWxpdHkuYXR0YWNrX3QgPiAxIHsKICAgICAgYWJpbGl0eS5zdGF0ZSA9IC5DT09MRE9XTgogICAgfQogIH0KfQoKCmRyYXdfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9wbGF5ZXIoKQogIG1vZGVsIDo9IGVudGl0eV9tb2RlbHNbYWJpbGl0eS5pZHhfbW9kZWxdCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuUk9UQVRJTkdfU0hJRUxEUyB8fCBhYmlsaXR5LnN0YXRlID09IC5DSEFSR0lORyB8fCBhYmlsaXR5LnN0YXRlID09IC5BVFRBQ0tJTkcgewogICAgZm9yIHBvcyBpbiBhYmlsaXR5LnBvc2l0aW9ucyB7CiAgICAgIHJsLkRyYXdTcGhlcmVXaXJlcyhwb3MsIDAuMiwgMiwgMTAsIHJsLlJFRCkKICAgIH0KICB9Cn0K",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAACODAAAAAAAAI4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					756,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAIwMAAAAAAAAjQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAACMDAAAAAAAAIwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					758,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\nDivine_Weapons :: struct {\r\n  shield_stat:      float,\r\n  current_rotation: float,\r\n  rotation_speed:   float,\r\n  ts_swords_active: float,\r\n  ts_ready:         float,\r\n  attack_range:     float,\r\n  attack_t:         float, //lerp from attack position to attack target 0-1\r\n  num_swords:       int,\r\n  state:            Divine_Weapons_State,\r\n  idx_model:        int,\r\n  mouse_pos:        float3,\r\n  type:             AbilityType,\r\n  positions:        [dynamic]float3,\r\n}\r\n\r\nDivine_Weapons_State :: enum byte {\r\n  READY = 0,\r\n  COOLDOWN,\r\n  ROTATING_SHIELDS,\r\n  CHARGING,\r\n  ATTACKING,\r\n}\r\n\r\n@(private = \"file\")\r\nability: Divine_Weapons\r\n\r\ncreate_divine_weapons :: proc() \r\n{\r\n\r\n  ability = Divine_Weapons {\r\n    attack_range   = 3,\r\n    rotation_speed = 6,\r\n    state          = .READY,\r\n    num_swords     = 6,\r\n  }\r\n\r\n  //this is stupid\r\n  ability.positions = make([dynamic]float3)\r\n  for i in 0 ..< ability.num_swords {\r\n    append(&ability.positions, float3_zero)\r\n  }\r\n\r\n  append(&update_procs, update_divine_weapons)\r\n  append(&draw_procs, draw_divine_weapons)\r\n}\r\n\r\n\r\nupdate_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n\r\n\r\n  if ability.state == .COOLDOWN {\r\n    if time_now > ability.ts_ready {\r\n      ability.state = .READY\r\n    }\r\n  }\r\n\r\n  //trigger\r\n  if ability.state == .READY && core_input.ability_triggered && time_now > ability.ts_ready {\r\n    ability.state = .ROTATING_SHIELDS\r\n    ability.ts_swords_active = time_now + 0.5\r\n    player.stats.shield += ability.shield_stat\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      ability.positions[i] = player.position + float3_up\r\n    }\r\n  }\r\n\r\n  if ability.state == .ROTATING_SHIELDS {\r\n\r\n    ability.current_rotation += dt\r\n    interval := (math.PI * 2) / float(ability.num_swords)\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + ability.current_rotation\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)}\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], player.position + offset * 2 + float3_up, dt * 30)\r\n    }\r\n\r\n    if time_now > ability.ts_swords_active && core_input.ability_triggered {\r\n      ability.state = .CHARGING\r\n      ability.attack_t = 0\r\n    }\r\n  }\r\n\r\n  if ability.state == .CHARGING {\r\n    charge_dur: float = 0.4\r\n    ability.attack_t += dt / charge_dur\r\n\r\n    //calculate the positions behind the player, and lerp towards them\r\n    end_positions := make([dynamic]float3, context.temp_allocator)\r\n    arc: float = math.PI / 1.1\r\n    interval := arc / float(ability.num_swords)\r\n    player_rads := math.atan2(-player.forward.x, player.forward.z) - math.PI * 0.88\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + player_rads\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)} * 2\r\n      append(&end_positions, player.position + offset + float3_up)\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], end_positions[i], dt * 30)\r\n    }\r\n\r\n    if ability.attack_t > 1 {\r\n      ability.state = .ATTACKING\r\n      ability.attack_t = 0\r\n      mouse_pos := get_mouse_pos_world() + float3_up\r\n      dir := mouse_pos - player.position\r\n      length := linalg.length(dir)\r\n      if length > ability.attack_range {\r\n        ability.mouse_pos = player.position + norm(dir) * ability.attack_range\r\n      }\r\n    }\r\n  }\r\n\r\n  if ability.state == .ATTACKING {\r\n    attack_dur: float = 0.5\r\n    ability.attack_t += dt / attack_dur\r\n\r\n    for &p in ability.positions {\r\n      p = linalg.lerp(p, ability.mouse_pos, ability.attack_t)\r\n    }\r\n    if ability.attack_t > 1 {\r\n      ability.state = .COOLDOWN\r\n    }\r\n  }\r\n}\r\n\r\n\r\ndraw_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n  model := entity_models[ability.idx_model]\r\n  if ability.state == .ROTATING_SHIELDS || ability.state == .CHARGING || ability.state == .ATTACKING {\r\n    for pos in ability.positions {\r\n      rl.DrawSphereWires(pos, 0.2, 2, 10, rl.RED)\r\n    }\r\n  }\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 146
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAKA8AAAAAAAAoDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpEaXZpbmVfV2VhcG9ucyA6OiBzdHJ1Y3QgewogIHNoaWVsZF9zdGF0OiAgICAgIGZsb2F0LAogIGN1cnJlbnRfcm90YXRpb246IGZsb2F0LAogIHJvdGF0aW9uX3NwZWVkOiAgIGZsb2F0LAogIHRzX3N3b3Jkc19hY3RpdmU6IGZsb2F0LAogIHRzX3JlYWR5OiAgICAgICAgIGZsb2F0LAogIGF0dGFja19yYW5nZTogICAgIGZsb2F0LAogIGF0dGFja190OiAgICAgICAgIGZsb2F0LCAvL2xlcnAgZnJvbSBhdHRhY2sgcG9zaXRpb24gdG8gYXR0YWNrIHRhcmdldCAwLTEKICBudW1fc3dvcmRzOiAgICAgICBpbnQsCiAgc3RhdGU6ICAgICAgICAgICAgRGl2aW5lX1dlYXBvbnNfU3RhdGUsCiAgaWR4X21vZGVsOiAgICAgICAgaW50LAogIG1vdXNlX3BvczogICAgICAgIGZsb2F0MywKICB0eXBlOiAgICAgICAgICAgICBBYmlsaXR5VHlwZSwKICBwb3NpdGlvbnM6ICAgICAgICBbZHluYW1pY11mbG9hdDMsCn0KCkRpdmluZV9XZWFwb25zX1N0YXRlIDo6IGVudW0gYnl0ZSB7CiAgUkVBRFkgPSAwLAogIENPT0xET1dOLAogIFJPVEFUSU5HX1NISUVMRFMsCiAgQ0hBUkdJTkcsCiAgQVRUQUNLSU5HLAp9CgpAKHByaXZhdGUgPSAiZmlsZSIpCmFiaWxpdHk6IERpdmluZV9XZWFwb25zCgpjcmVhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CgogIGFiaWxpdHkgPSBEaXZpbmVfV2VhcG9ucyB7CiAgICBhdHRhY2tfcmFuZ2UgICA9IDMsCiAgICByb3RhdGlvbl9zcGVlZCA9IDYsCiAgICBzdGF0ZSAgICAgICAgICA9IC5SRUFEWSwKICAgIG51bV9zd29yZHMgICAgID0gNiwKICB9CgogIC8vdGhpcyBpcyBzdHVwaWQKICBhYmlsaXR5LnBvc2l0aW9ucyA9IG1ha2UoW2R5bmFtaWNdZmxvYXQzKQogIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICBhcHBlbmQoJmFiaWxpdHkucG9zaXRpb25zLCBmbG9hdDNfemVybykKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZGl2aW5lX3dlYXBvbnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2RpdmluZV93ZWFwb25zKQp9CgoKdXBkYXRlX2RpdmluZV93ZWFwb25zIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKCgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkNPT0xET1dOIHsKICAgIGlmIHRpbWVfbm93ID4gYWJpbGl0eS50c19yZWFkeSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuUkVBRFkKICAgIH0KICB9CgogIC8vdHJpZ2dlcgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJFQURZICYmIGNvcmVfaW5wdXQuYWJpbGl0eV90cmlnZ2VyZWQgJiYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3JlYWR5IHsKICAgIGFiaWxpdHkuc3RhdGUgPSAuUk9UQVRJTkdfU0hJRUxEUwogICAgYWJpbGl0eS50c19zd29yZHNfYWN0aXZlID0gdGltZV9ub3cgKyAwLjUKICAgIHBsYXllci5zdGF0cy5zaGllbGQgKz0gYWJpbGl0eS5zaGllbGRfc3RhdAoKICAgIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gcGxheWVyLnBvc2l0aW9uICsgZmxvYXQzX3VwCiAgICB9CiAgfQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5ST1RBVElOR19TSElFTERTIHsKCiAgICBhYmlsaXR5LmN1cnJlbnRfcm90YXRpb24gKz0gZHQKICAgIGludGVydmFsIDo9IChtYXRoLlBJICogMikgLyBmbG9hdChhYmlsaXR5Lm51bV9zd29yZHMpCiAgICBmb3IgaSBpbiAwIC4uPCBhYmlsaXR5Lm51bV9zd29yZHMgewogICAgICBhbmdsZSA6PSBmbG9hdChpKSAqIGludGVydmFsICsgYWJpbGl0eS5jdXJyZW50X3JvdGF0aW9uCiAgICAgIG9mZnNldCA6PSBmbG9hdDN7bWF0aC5jb3MoYW5nbGUpLCAwLCBtYXRoLnNpbihhbmdsZSl9CiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gbGluYWxnLmxlcnAoYWJpbGl0eS5wb3NpdGlvbnNbaV0sIHBsYXllci5wb3NpdGlvbiArIG9mZnNldCAqIDIgKyBmbG9hdDNfdXAsIGR0ICogMzApCiAgICB9CgogICAgaWYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3N3b3Jkc19hY3RpdmUgJiYgY29yZV9pbnB1dC5hYmlsaXR5X3RyaWdnZXJlZCB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQ0hBUkdJTkcKICAgICAgYWJpbGl0eS5hdHRhY2tfdCA9IDAKICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkNIQVJHSU5HIHsKICAgIGNoYXJnZV9kdXI6IGZsb2F0ID0gMC40CiAgICBhYmlsaXR5LmF0dGFja190ICs9IGR0IC8gY2hhcmdlX2R1cgoKICAgIC8vY2FsY3VsYXRlIHRoZSBwb3NpdGlvbnMgYmVoaW5kIHRoZSBwbGF5ZXIsIGFuZCBsZXJwIHRvd2FyZHMgdGhlbQogICAgZW5kX3Bvc2l0aW9ucyA6PSBtYWtlKFtkeW5hbWljXWZsb2F0MywgY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICAgIGFyYzogZmxvYXQgPSBtYXRoLlBJIC8gMS4xCiAgICBpbnRlcnZhbCA6PSBhcmMgLyBmbG9hdChhYmlsaXR5Lm51bV9zd29yZHMpCiAgICBwbGF5ZXJfcmFkcyA6PSBtYXRoLmF0YW4yKC1wbGF5ZXIuZm9yd2FyZC54LCBwbGF5ZXIuZm9yd2FyZC56KSAtIG1hdGguUEkgKiAwLjg4CgogICAgZm9yIGkgaW4gMCAuLjwgYWJpbGl0eS5udW1fc3dvcmRzIHsKICAgICAgYW5nbGUgOj0gZmxvYXQoaSkgKiBpbnRlcnZhbCArIHBsYXllcl9yYWRzCiAgICAgIG9mZnNldCA6PSBmbG9hdDN7bWF0aC5jb3MoYW5nbGUpLCAwLCBtYXRoLnNpbihhbmdsZSl9ICogMgogICAgICBhcHBlbmQoJmVuZF9wb3NpdGlvbnMsIHBsYXllci5wb3NpdGlvbiArIG9mZnNldCArIGZsb2F0M191cCkKICAgICAgYWJpbGl0eS5wb3NpdGlvbnNbaV0gPSBsaW5hbGcubGVycChhYmlsaXR5LnBvc2l0aW9uc1tpXSwgZW5kX3Bvc2l0aW9uc1tpXSwgZHQgKiAzMCkKICAgIH0KCiAgICBpZiBhYmlsaXR5LmF0dGFja190ID4gMSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQVRUQUNLSU5HCiAgICAgIGFiaWxpdHkuYXR0YWNrX3QgPSAwCiAgICAgIG1vdXNlX3BvcyA6PSBnZXRfbW91c2VfcG9zX3dvcmxkKCkgKyBmbG9hdDNfdXAKICAgICAgZGlyIDo9IG1vdXNlX3BvcyAtIHBsYXllci5wb3NpdGlvbgogICAgICBsZW5ndGggOj0gbGluYWxnLmxlbmd0aChkaXIpCiAgICAgIGlmIGxlbmd0aCA+IGFiaWxpdHkuYXR0YWNrX3JhbmdlIHsKICAgICAgICBhYmlsaXR5Lm1vdXNlX3BvcyA9IHBsYXllci5wb3NpdGlvbiArIG5vcm0oZGlyKSAqIGFiaWxpdHkuYXR0YWNrX3JhbmdlCiAgICAgIH0KICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkFUVEFDS0lORyB7CiAgICBhdHRhY2tfZHVyOiBmbG9hdCA9IDAuNQogICAgYWJpbGl0eS5hdHRhY2tfdCArPSBkdCAvIGF0dGFja19kdXIKCiAgICBmb3IgJnAgaW4gYWJpbGl0eS5wb3NpdGlvbnMgewogICAgICBwID0gbGluYWxnLmxlcnAocCwgYWJpbGl0eS5tb3VzZV9wb3MsIGFiaWxpdHkuYXR0YWNrX3QpCiAgICB9CiAgICBpZiBhYmlsaXR5LmF0dGFja190ID4gMSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQ09PTERPV04KICAgIH0KICB9Cn0KCgpkcmF3X2RpdmluZV93ZWFwb25zIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKICBtb2RlbCA6PSBlbnRpdHlfbW9kZWxzW2FiaWxpdHkuaWR4X21vZGVsXQogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJPVEFUSU5HX1NISUVMRFMgfHwgYWJpbGl0eS5zdGF0ZSA9PSAuQ0hBUkdJTkcgfHwgYWJpbGl0eS5zdGF0ZSA9PSAuQVRUQUNLSU5HIHsKICAgIGZvciBwb3MgaW4gYWJpbGl0eS5wb3NpdGlvbnMgewogICAgICBybC5EcmF3U3BoZXJlV2lyZXMocG9zLCAwLjIsIDIsIDEwLCBybC5SRUQpCiAgICB9CiAgfQp9Cg",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAACNDAAAAAAAAI0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					761,
					1,
					"insert",
					{
						"characters": "\nabi"
					},
					"BAAAAAgMAAAAAAAADwwAAAAAAAAAAAAADwwAAAAAAAAQDAAAAAAAAAAAAAAQDAAAAAAAABEMAAAAAAAAAAAAABEMAAAAAAAAEgwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAIDAAAAAAAAAgMAAAAAAAA////////738"
				],
				[
					762,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ability"
					},
					"AgAAAA8MAAAAAAAADwwAAAAAAAADAAAAYWJpDwwAAAAAAAAWDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAASDAAAAAAAABIMAAAAAAAAAAAAAAAA8L8"
				],
				[
					763,
					1,
					"insert",
					{
						"characters": ".mo"
					},
					"AwAAABYMAAAAAAAAFwwAAAAAAAAAAAAAFwwAAAAAAAAYDAAAAAAAAAAAAAAYDAAAAAAAABkMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAWDAAAAAAAABYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					764,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":4,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mouse_pos"
					},
					"AgAAABcMAAAAAAAAFwwAAAAAAAACAAAAbW8XDAAAAAAAACAMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAZDAAAAAAAABkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					765,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACAMAAAAAAAAIQwAAAAAAAAAAAAAIQwAAAAAAAAiDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAgDAAAAAAAACAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					766,
					1,
					"insert",
					{
						"characters": " mou"
					},
					"BAAAACIMAAAAAAAAIwwAAAAAAAAAAAAAIwwAAAAAAAAkDAAAAAAAAAAAAAAkDAAAAAAAACUMAAAAAAAAAAAAACUMAAAAAAAAJgwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAiDAAAAAAAACIMAAAAAAAAAAAAAAAA8L8"
				],
				[
					767,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":3,\"session_name\":\"odin\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mouse_pos"
					},
					"AgAAACMMAAAAAAAAIwwAAAAAAAADAAAAbW91IwwAAAAAAAAsDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAmDAAAAAAAACYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					769,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\nDivine_Weapons :: struct {\r\n  shield_stat:      float,\r\n  current_rotation: float,\r\n  rotation_speed:   float,\r\n  ts_swords_active: float,\r\n  ts_ready:         float,\r\n  attack_range:     float,\r\n  attack_t:         float, //lerp from attack position to attack target 0-1\r\n  num_swords:       int,\r\n  state:            Divine_Weapons_State,\r\n  idx_model:        int,\r\n  mouse_pos:        float3,\r\n  type:             AbilityType,\r\n  positions:        [dynamic]float3,\r\n}\r\n\r\nDivine_Weapons_State :: enum byte {\r\n  READY = 0,\r\n  COOLDOWN,\r\n  ROTATING_SHIELDS,\r\n  CHARGING,\r\n  ATTACKING,\r\n}\r\n\r\n@(private = \"file\")\r\nability: Divine_Weapons\r\n\r\ncreate_divine_weapons :: proc() \r\n{\r\n\r\n  ability = Divine_Weapons {\r\n    attack_range   = 3,\r\n    rotation_speed = 6,\r\n    state          = .READY,\r\n    num_swords     = 6,\r\n  }\r\n\r\n  //this is stupid\r\n  ability.positions = make([dynamic]float3)\r\n  for i in 0 ..< ability.num_swords {\r\n    append(&ability.positions, float3_zero)\r\n  }\r\n\r\n  append(&update_procs, update_divine_weapons)\r\n  append(&draw_procs, draw_divine_weapons)\r\n}\r\n\r\n\r\nupdate_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n\r\n\r\n  if ability.state == .COOLDOWN {\r\n    if time_now > ability.ts_ready {\r\n      ability.state = .READY\r\n    }\r\n  }\r\n\r\n  //trigger\r\n  if ability.state == .READY && core_input.ability_triggered && time_now > ability.ts_ready {\r\n    ability.state = .ROTATING_SHIELDS\r\n    ability.ts_swords_active = time_now + 0.5\r\n    player.stats.shield += ability.shield_stat\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      ability.positions[i] = player.position + float3_up\r\n    }\r\n  }\r\n\r\n  if ability.state == .ROTATING_SHIELDS {\r\n\r\n    ability.current_rotation += dt\r\n    interval := (math.PI * 2) / float(ability.num_swords)\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + ability.current_rotation\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)}\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], player.position + offset * 2 + float3_up, dt * 30)\r\n    }\r\n\r\n    if time_now > ability.ts_swords_active && core_input.ability_triggered {\r\n      ability.state = .CHARGING\r\n      ability.attack_t = 0\r\n    }\r\n  }\r\n\r\n  if ability.state == .CHARGING {\r\n    charge_dur: float = 0.4\r\n    ability.attack_t += dt / charge_dur\r\n\r\n    //calculate the positions behind the player, and lerp towards them\r\n    end_positions := make([dynamic]float3, context.temp_allocator)\r\n    arc: float = math.PI / 1.1\r\n    interval := arc / float(ability.num_swords)\r\n    player_rads := math.atan2(-player.forward.x, player.forward.z) - math.PI * 0.88\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + player_rads\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)} * 2\r\n      append(&end_positions, player.position + offset + float3_up)\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], end_positions[i], dt * 30)\r\n    }\r\n\r\n    if ability.attack_t > 1 {\r\n      ability.state = .ATTACKING\r\n      ability.attack_t = 0\r\n      mouse_pos := get_mouse_pos_world() + float3_up\r\n      ability.mouse_pos = mouse_pos\r\n      dir := mouse_pos - player.position\r\n      length := linalg.length(dir)\r\n      if length > ability.attack_range {\r\n        ability.mouse_pos = player.position + norm(dir) * ability.attack_range\r\n      }\r\n    }\r\n  }\r\n\r\n  if ability.state == .ATTACKING {\r\n    attack_dur: float = 0.5\r\n    ability.attack_t += dt / attack_dur\r\n\r\n    for &p in ability.positions {\r\n      p = linalg.lerp(p, ability.mouse_pos, ability.attack_t)\r\n    }\r\n    if ability.attack_t > 1 {\r\n      ability.state = .COOLDOWN\r\n    }\r\n  }\r\n}\r\n\r\n\r\ndraw_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n  model := entity_models[ability.idx_model]\r\n  if ability.state == .ROTATING_SHIELDS || ability.state == .CHARGING || ability.state == .ATTACKING {\r\n    for pos in ability.positions {\r\n      rl.DrawSphereWires(pos, 0.2, 2, 10, rl.RED)\r\n    }\r\n  }\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 147
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAATA8AAAAAAABMDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpEaXZpbmVfV2VhcG9ucyA6OiBzdHJ1Y3QgewogIHNoaWVsZF9zdGF0OiAgICAgIGZsb2F0LAogIGN1cnJlbnRfcm90YXRpb246IGZsb2F0LAogIHJvdGF0aW9uX3NwZWVkOiAgIGZsb2F0LAogIHRzX3N3b3Jkc19hY3RpdmU6IGZsb2F0LAogIHRzX3JlYWR5OiAgICAgICAgIGZsb2F0LAogIGF0dGFja19yYW5nZTogICAgIGZsb2F0LAogIGF0dGFja190OiAgICAgICAgIGZsb2F0LCAvL2xlcnAgZnJvbSBhdHRhY2sgcG9zaXRpb24gdG8gYXR0YWNrIHRhcmdldCAwLTEKICBudW1fc3dvcmRzOiAgICAgICBpbnQsCiAgc3RhdGU6ICAgICAgICAgICAgRGl2aW5lX1dlYXBvbnNfU3RhdGUsCiAgaWR4X21vZGVsOiAgICAgICAgaW50LAogIG1vdXNlX3BvczogICAgICAgIGZsb2F0MywKICB0eXBlOiAgICAgICAgICAgICBBYmlsaXR5VHlwZSwKICBwb3NpdGlvbnM6ICAgICAgICBbZHluYW1pY11mbG9hdDMsCn0KCkRpdmluZV9XZWFwb25zX1N0YXRlIDo6IGVudW0gYnl0ZSB7CiAgUkVBRFkgPSAwLAogIENPT0xET1dOLAogIFJPVEFUSU5HX1NISUVMRFMsCiAgQ0hBUkdJTkcsCiAgQVRUQUNLSU5HLAp9CgpAKHByaXZhdGUgPSAiZmlsZSIpCmFiaWxpdHk6IERpdmluZV9XZWFwb25zCgpjcmVhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CgogIGFiaWxpdHkgPSBEaXZpbmVfV2VhcG9ucyB7CiAgICBhdHRhY2tfcmFuZ2UgICA9IDMsCiAgICByb3RhdGlvbl9zcGVlZCA9IDYsCiAgICBzdGF0ZSAgICAgICAgICA9IC5SRUFEWSwKICAgIG51bV9zd29yZHMgICAgID0gNiwKICB9CgogIC8vdGhpcyBpcyBzdHVwaWQKICBhYmlsaXR5LnBvc2l0aW9ucyA9IG1ha2UoW2R5bmFtaWNdZmxvYXQzKQogIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICBhcHBlbmQoJmFiaWxpdHkucG9zaXRpb25zLCBmbG9hdDNfemVybykKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZGl2aW5lX3dlYXBvbnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2RpdmluZV93ZWFwb25zKQp9CgoKdXBkYXRlX2RpdmluZV93ZWFwb25zIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKCgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkNPT0xET1dOIHsKICAgIGlmIHRpbWVfbm93ID4gYWJpbGl0eS50c19yZWFkeSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuUkVBRFkKICAgIH0KICB9CgogIC8vdHJpZ2dlcgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJFQURZICYmIGNvcmVfaW5wdXQuYWJpbGl0eV90cmlnZ2VyZWQgJiYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3JlYWR5IHsKICAgIGFiaWxpdHkuc3RhdGUgPSAuUk9UQVRJTkdfU0hJRUxEUwogICAgYWJpbGl0eS50c19zd29yZHNfYWN0aXZlID0gdGltZV9ub3cgKyAwLjUKICAgIHBsYXllci5zdGF0cy5zaGllbGQgKz0gYWJpbGl0eS5zaGllbGRfc3RhdAoKICAgIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gcGxheWVyLnBvc2l0aW9uICsgZmxvYXQzX3VwCiAgICB9CiAgfQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5ST1RBVElOR19TSElFTERTIHsKCiAgICBhYmlsaXR5LmN1cnJlbnRfcm90YXRpb24gKz0gZHQKICAgIGludGVydmFsIDo9IChtYXRoLlBJICogMikgLyBmbG9hdChhYmlsaXR5Lm51bV9zd29yZHMpCiAgICBmb3IgaSBpbiAwIC4uPCBhYmlsaXR5Lm51bV9zd29yZHMgewogICAgICBhbmdsZSA6PSBmbG9hdChpKSAqIGludGVydmFsICsgYWJpbGl0eS5jdXJyZW50X3JvdGF0aW9uCiAgICAgIG9mZnNldCA6PSBmbG9hdDN7bWF0aC5jb3MoYW5nbGUpLCAwLCBtYXRoLnNpbihhbmdsZSl9CiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gbGluYWxnLmxlcnAoYWJpbGl0eS5wb3NpdGlvbnNbaV0sIHBsYXllci5wb3NpdGlvbiArIG9mZnNldCAqIDIgKyBmbG9hdDNfdXAsIGR0ICogMzApCiAgICB9CgogICAgaWYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3N3b3Jkc19hY3RpdmUgJiYgY29yZV9pbnB1dC5hYmlsaXR5X3RyaWdnZXJlZCB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQ0hBUkdJTkcKICAgICAgYWJpbGl0eS5hdHRhY2tfdCA9IDAKICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkNIQVJHSU5HIHsKICAgIGNoYXJnZV9kdXI6IGZsb2F0ID0gMC40CiAgICBhYmlsaXR5LmF0dGFja190ICs9IGR0IC8gY2hhcmdlX2R1cgoKICAgIC8vY2FsY3VsYXRlIHRoZSBwb3NpdGlvbnMgYmVoaW5kIHRoZSBwbGF5ZXIsIGFuZCBsZXJwIHRvd2FyZHMgdGhlbQogICAgZW5kX3Bvc2l0aW9ucyA6PSBtYWtlKFtkeW5hbWljXWZsb2F0MywgY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICAgIGFyYzogZmxvYXQgPSBtYXRoLlBJIC8gMS4xCiAgICBpbnRlcnZhbCA6PSBhcmMgLyBmbG9hdChhYmlsaXR5Lm51bV9zd29yZHMpCiAgICBwbGF5ZXJfcmFkcyA6PSBtYXRoLmF0YW4yKC1wbGF5ZXIuZm9yd2FyZC54LCBwbGF5ZXIuZm9yd2FyZC56KSAtIG1hdGguUEkgKiAwLjg4CgogICAgZm9yIGkgaW4gMCAuLjwgYWJpbGl0eS5udW1fc3dvcmRzIHsKICAgICAgYW5nbGUgOj0gZmxvYXQoaSkgKiBpbnRlcnZhbCArIHBsYXllcl9yYWRzCiAgICAgIG9mZnNldCA6PSBmbG9hdDN7bWF0aC5jb3MoYW5nbGUpLCAwLCBtYXRoLnNpbihhbmdsZSl9ICogMgogICAgICBhcHBlbmQoJmVuZF9wb3NpdGlvbnMsIHBsYXllci5wb3NpdGlvbiArIG9mZnNldCArIGZsb2F0M191cCkKICAgICAgYWJpbGl0eS5wb3NpdGlvbnNbaV0gPSBsaW5hbGcubGVycChhYmlsaXR5LnBvc2l0aW9uc1tpXSwgZW5kX3Bvc2l0aW9uc1tpXSwgZHQgKiAzMCkKICAgIH0KCiAgICBpZiBhYmlsaXR5LmF0dGFja190ID4gMSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQVRUQUNLSU5HCiAgICAgIGFiaWxpdHkuYXR0YWNrX3QgPSAwCiAgICAgIG1vdXNlX3BvcyA6PSBnZXRfbW91c2VfcG9zX3dvcmxkKCkgKyBmbG9hdDNfdXAKICAgICAgYWJpbGl0eS5tb3VzZV9wb3MgPSBtb3VzZV9wb3MKICAgICAgZGlyIDo9IG1vdXNlX3BvcyAtIHBsYXllci5wb3NpdGlvbgogICAgICBsZW5ndGggOj0gbGluYWxnLmxlbmd0aChkaXIpCiAgICAgIGlmIGxlbmd0aCA+IGFiaWxpdHkuYXR0YWNrX3JhbmdlIHsKICAgICAgICBhYmlsaXR5Lm1vdXNlX3BvcyA9IHBsYXllci5wb3NpdGlvbiArIG5vcm0oZGlyKSAqIGFiaWxpdHkuYXR0YWNrX3JhbmdlCiAgICAgIH0KICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkFUVEFDS0lORyB7CiAgICBhdHRhY2tfZHVyOiBmbG9hdCA9IDAuNQogICAgYWJpbGl0eS5hdHRhY2tfdCArPSBkdCAvIGF0dGFja19kdXIKCiAgICBmb3IgJnAgaW4gYWJpbGl0eS5wb3NpdGlvbnMgewogICAgICBwID0gbGluYWxnLmxlcnAocCwgYWJpbGl0eS5tb3VzZV9wb3MsIGFiaWxpdHkuYXR0YWNrX3QpCiAgICB9CiAgICBpZiBhYmlsaXR5LmF0dGFja190ID4gMSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQ09PTERPV04KICAgIH0KICB9Cn0KCgpkcmF3X2RpdmluZV93ZWFwb25zIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKICBtb2RlbCA6PSBlbnRpdHlfbW9kZWxzW2FiaWxpdHkuaWR4X21vZGVsXQogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJPVEFUSU5HX1NISUVMRFMgfHwgYWJpbGl0eS5zdGF0ZSA9PSAuQ0hBUkdJTkcgfHwgYWJpbGl0eS5zdGF0ZSA9PSAuQVRUQUNLSU5HIHsKICAgIGZvciBwb3MgaW4gYWJpbGl0eS5wb3NpdGlvbnMgewogICAgICBybC5EcmF3U3BoZXJlV2lyZXMocG9zLCAwLjIsIDIsIDEwLCBybC5SRUQpCiAgICB9CiAgfQp9Cg",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsDAAAAAAAACwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					771,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\nDivine_Weapons :: struct {\r\n  shield_stat:      float,\r\n  current_rotation: float,\r\n  rotation_speed:   float,\r\n  ts_swords_active: float,\r\n  ts_ready:         float,\r\n  attack_range:     float,\r\n  attack_t:         float, //lerp from attack position to attack target 0-1\r\n  num_swords:       int,\r\n  state:            Divine_Weapons_State,\r\n  idx_model:        int,\r\n  mouse_pos:        float3,\r\n  type:             AbilityType,\r\n  positions:        [dynamic]float3,\r\n}\r\n\r\nDivine_Weapons_State :: enum byte {\r\n  READY = 0,\r\n  COOLDOWN,\r\n  ROTATING_SHIELDS,\r\n  CHARGING,\r\n  ATTACKING,\r\n}\r\n\r\n@(private = \"file\")\r\nability: Divine_Weapons\r\n\r\ncreate_divine_weapons :: proc() \r\n{\r\n\r\n  ability = Divine_Weapons {\r\n    attack_range   = 3,\r\n    rotation_speed = 6,\r\n    state          = .READY,\r\n    num_swords     = 6,\r\n  }\r\n\r\n  //this is stupid\r\n  ability.positions = make([dynamic]float3)\r\n  for i in 0 ..< ability.num_swords {\r\n    append(&ability.positions, float3_zero)\r\n  }\r\n\r\n  append(&update_procs, update_divine_weapons)\r\n  append(&draw_procs, draw_divine_weapons)\r\n}\r\n\r\n\r\nupdate_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n\r\n\r\n  if ability.state == .COOLDOWN {\r\n    if time_now > ability.ts_ready {\r\n      ability.state = .READY\r\n    }\r\n  }\r\n\r\n  //trigger\r\n  if ability.state == .READY && core_input.ability_triggered && time_now > ability.ts_ready {\r\n    ability.state = .ROTATING_SHIELDS\r\n    ability.ts_swords_active = time_now + 0.5\r\n    player.stats.shield += ability.shield_stat\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      ability.positions[i] = player.position + float3_up\r\n    }\r\n  }\r\n\r\n  if ability.state == .ROTATING_SHIELDS {\r\n\r\n    ability.current_rotation += dt\r\n    interval := (math.PI * 2) / float(ability.num_swords)\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + ability.current_rotation\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)}\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], player.position + offset * 2 + float3_up, dt * 30)\r\n    }\r\n\r\n    if time_now > ability.ts_swords_active && core_input.ability_triggered {\r\n      ability.state = .CHARGING\r\n      ability.attack_t = 0\r\n    }\r\n  }\r\n\r\n  if ability.state == .CHARGING {\r\n    charge_dur: float = 0.4\r\n    ability.attack_t += dt / charge_dur\r\n\r\n    //calculate the positions behind the player, and lerp towards them\r\n    end_positions := make([dynamic]float3, context.temp_allocator)\r\n    arc: float = math.PI / 1.1\r\n    interval := arc / float(ability.num_swords)\r\n    player_rads := math.atan2(-player.forward.x, player.forward.z) - math.PI * 0.88\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + player_rads\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)} * 2\r\n      append(&end_positions, player.position + offset + float3_up)\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], end_positions[i], dt * 30)\r\n    }\r\n\r\n    if ability.attack_t > 1 {\r\n      ability.state = .ATTACKING\r\n      ability.attack_t = 0\r\n      mouse_pos := get_mouse_pos_world() + float3_up\r\n      ability.mouse_pos = mouse_pos\r\n      dir := mouse_pos - player.position\r\n      length := linalg.length(dir)\r\n      if length > ability.attack_range {\r\n        ability.mouse_pos = player.position + norm(dir) * ability.attack_range\r\n      }\r\n    }\r\n  }\r\n\r\n  if ability.state == .ATTACKING {\r\n    attack_dur: float = 0.5\r\n    ability.attack_t += dt / attack_dur\r\n\r\n    for &p in ability.positions {\r\n      p = linalg.lerp(p, ability.mouse_pos, ability.attack_t)\r\n    }\r\n    if ability.attack_t > 1 {\r\n      ability.state = .COOLDOWN\r\n    }\r\n  }\r\n}\r\n\r\n\r\ndraw_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n  model := entity_models[ability.idx_model]\r\n  if ability.state == .ROTATING_SHIELDS || ability.state == .CHARGING || ability.state == .ATTACKING {\r\n    for pos in ability.positions {\r\n      rl.DrawSphereWires(pos, 0.2, 2, 10, rl.RED)\r\n    }\r\n  }\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 147
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAATA8AAAAAAABMDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpEaXZpbmVfV2VhcG9ucyA6OiBzdHJ1Y3QgewogIHNoaWVsZF9zdGF0OiAgICAgIGZsb2F0LAogIGN1cnJlbnRfcm90YXRpb246IGZsb2F0LAogIHJvdGF0aW9uX3NwZWVkOiAgIGZsb2F0LAogIHRzX3N3b3Jkc19hY3RpdmU6IGZsb2F0LAogIHRzX3JlYWR5OiAgICAgICAgIGZsb2F0LAogIGF0dGFja19yYW5nZTogICAgIGZsb2F0LAogIGF0dGFja190OiAgICAgICAgIGZsb2F0LCAvL2xlcnAgZnJvbSBhdHRhY2sgcG9zaXRpb24gdG8gYXR0YWNrIHRhcmdldCAwLTEKICBudW1fc3dvcmRzOiAgICAgICBpbnQsCiAgc3RhdGU6ICAgICAgICAgICAgRGl2aW5lX1dlYXBvbnNfU3RhdGUsCiAgaWR4X21vZGVsOiAgICAgICAgaW50LAogIG1vdXNlX3BvczogICAgICAgIGZsb2F0MywKICB0eXBlOiAgICAgICAgICAgICBBYmlsaXR5VHlwZSwKICBwb3NpdGlvbnM6ICAgICAgICBbZHluYW1pY11mbG9hdDMsCn0KCkRpdmluZV9XZWFwb25zX1N0YXRlIDo6IGVudW0gYnl0ZSB7CiAgUkVBRFkgPSAwLAogIENPT0xET1dOLAogIFJPVEFUSU5HX1NISUVMRFMsCiAgQ0hBUkdJTkcsCiAgQVRUQUNLSU5HLAp9CgpAKHByaXZhdGUgPSAiZmlsZSIpCmFiaWxpdHk6IERpdmluZV9XZWFwb25zCgpjcmVhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CgogIGFiaWxpdHkgPSBEaXZpbmVfV2VhcG9ucyB7CiAgICBhdHRhY2tfcmFuZ2UgICA9IDMsCiAgICByb3RhdGlvbl9zcGVlZCA9IDYsCiAgICBzdGF0ZSAgICAgICAgICA9IC5SRUFEWSwKICAgIG51bV9zd29yZHMgICAgID0gNiwKICB9CgogIC8vdGhpcyBpcyBzdHVwaWQKICBhYmlsaXR5LnBvc2l0aW9ucyA9IG1ha2UoW2R5bmFtaWNdZmxvYXQzKQogIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICBhcHBlbmQoJmFiaWxpdHkucG9zaXRpb25zLCBmbG9hdDNfemVybykKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZGl2aW5lX3dlYXBvbnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2RpdmluZV93ZWFwb25zKQp9CgoKdXBkYXRlX2RpdmluZV93ZWFwb25zIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKCgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkNPT0xET1dOIHsKICAgIGlmIHRpbWVfbm93ID4gYWJpbGl0eS50c19yZWFkeSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuUkVBRFkKICAgIH0KICB9CgogIC8vdHJpZ2dlcgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJFQURZICYmIGNvcmVfaW5wdXQuYWJpbGl0eV90cmlnZ2VyZWQgJiYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3JlYWR5IHsKICAgIGFiaWxpdHkuc3RhdGUgPSAuUk9UQVRJTkdfU0hJRUxEUwogICAgYWJpbGl0eS50c19zd29yZHNfYWN0aXZlID0gdGltZV9ub3cgKyAwLjUKICAgIHBsYXllci5zdGF0cy5zaGllbGQgKz0gYWJpbGl0eS5zaGllbGRfc3RhdAoKICAgIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gcGxheWVyLnBvc2l0aW9uICsgZmxvYXQzX3VwCiAgICB9CiAgfQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5ST1RBVElOR19TSElFTERTIHsKCiAgICBhYmlsaXR5LmN1cnJlbnRfcm90YXRpb24gKz0gZHQKICAgIGludGVydmFsIDo9IChtYXRoLlBJICogMikgLyBmbG9hdChhYmlsaXR5Lm51bV9zd29yZHMpCiAgICBmb3IgaSBpbiAwIC4uPCBhYmlsaXR5Lm51bV9zd29yZHMgewogICAgICBhbmdsZSA6PSBmbG9hdChpKSAqIGludGVydmFsICsgYWJpbGl0eS5jdXJyZW50X3JvdGF0aW9uCiAgICAgIG9mZnNldCA6PSBmbG9hdDN7bWF0aC5jb3MoYW5nbGUpLCAwLCBtYXRoLnNpbihhbmdsZSl9CiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gbGluYWxnLmxlcnAoYWJpbGl0eS5wb3NpdGlvbnNbaV0sIHBsYXllci5wb3NpdGlvbiArIG9mZnNldCAqIDIgKyBmbG9hdDNfdXAsIGR0ICogMzApCiAgICB9CgogICAgaWYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3N3b3Jkc19hY3RpdmUgJiYgY29yZV9pbnB1dC5hYmlsaXR5X3RyaWdnZXJlZCB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQ0hBUkdJTkcKICAgICAgYWJpbGl0eS5hdHRhY2tfdCA9IDAKICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkNIQVJHSU5HIHsKICAgIGNoYXJnZV9kdXI6IGZsb2F0ID0gMC40CiAgICBhYmlsaXR5LmF0dGFja190ICs9IGR0IC8gY2hhcmdlX2R1cgoKICAgIC8vY2FsY3VsYXRlIHRoZSBwb3NpdGlvbnMgYmVoaW5kIHRoZSBwbGF5ZXIsIGFuZCBsZXJwIHRvd2FyZHMgdGhlbQogICAgZW5kX3Bvc2l0aW9ucyA6PSBtYWtlKFtkeW5hbWljXWZsb2F0MywgY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICAgIGFyYzogZmxvYXQgPSBtYXRoLlBJIC8gMS4xCiAgICBpbnRlcnZhbCA6PSBhcmMgLyBmbG9hdChhYmlsaXR5Lm51bV9zd29yZHMpCiAgICBwbGF5ZXJfcmFkcyA6PSBtYXRoLmF0YW4yKC1wbGF5ZXIuZm9yd2FyZC54LCBwbGF5ZXIuZm9yd2FyZC56KSAtIG1hdGguUEkgKiAwLjg4CgogICAgZm9yIGkgaW4gMCAuLjwgYWJpbGl0eS5udW1fc3dvcmRzIHsKICAgICAgYW5nbGUgOj0gZmxvYXQoaSkgKiBpbnRlcnZhbCArIHBsYXllcl9yYWRzCiAgICAgIG9mZnNldCA6PSBmbG9hdDN7bWF0aC5jb3MoYW5nbGUpLCAwLCBtYXRoLnNpbihhbmdsZSl9ICogMgogICAgICBhcHBlbmQoJmVuZF9wb3NpdGlvbnMsIHBsYXllci5wb3NpdGlvbiArIG9mZnNldCArIGZsb2F0M191cCkKICAgICAgYWJpbGl0eS5wb3NpdGlvbnNbaV0gPSBsaW5hbGcubGVycChhYmlsaXR5LnBvc2l0aW9uc1tpXSwgZW5kX3Bvc2l0aW9uc1tpXSwgZHQgKiAzMCkKICAgIH0KCiAgICBpZiBhYmlsaXR5LmF0dGFja190ID4gMSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQVRUQUNLSU5HCiAgICAgIGFiaWxpdHkuYXR0YWNrX3QgPSAwCiAgICAgIG1vdXNlX3BvcyA6PSBnZXRfbW91c2VfcG9zX3dvcmxkKCkgKyBmbG9hdDNfdXAKICAgICAgYWJpbGl0eS5tb3VzZV9wb3MgPSBtb3VzZV9wb3MKICAgICAgZGlyIDo9IG1vdXNlX3BvcyAtIHBsYXllci5wb3NpdGlvbgogICAgICBsZW5ndGggOj0gbGluYWxnLmxlbmd0aChkaXIpCiAgICAgIGlmIGxlbmd0aCA+IGFiaWxpdHkuYXR0YWNrX3JhbmdlIHsKICAgICAgICBhYmlsaXR5Lm1vdXNlX3BvcyA9IHBsYXllci5wb3NpdGlvbiArIG5vcm0oZGlyKSAqIGFiaWxpdHkuYXR0YWNrX3JhbmdlCiAgICAgIH0KICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkFUVEFDS0lORyB7CiAgICBhdHRhY2tfZHVyOiBmbG9hdCA9IDAuNQogICAgYWJpbGl0eS5hdHRhY2tfdCArPSBkdCAvIGF0dGFja19kdXIKCiAgICBmb3IgJnAgaW4gYWJpbGl0eS5wb3NpdGlvbnMgewogICAgICBwID0gbGluYWxnLmxlcnAocCwgYWJpbGl0eS5tb3VzZV9wb3MsIGFiaWxpdHkuYXR0YWNrX3QpCiAgICB9CiAgICBpZiBhYmlsaXR5LmF0dGFja190ID4gMSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQ09PTERPV04KICAgIH0KICB9Cn0KCgpkcmF3X2RpdmluZV93ZWFwb25zIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKICBtb2RlbCA6PSBlbnRpdHlfbW9kZWxzW2FiaWxpdHkuaWR4X21vZGVsXQogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJPVEFUSU5HX1NISUVMRFMgfHwgYWJpbGl0eS5zdGF0ZSA9PSAuQ0hBUkdJTkcgfHwgYWJpbGl0eS5zdGF0ZSA9PSAuQVRUQUNLSU5HIHsKICAgIGZvciBwb3MgaW4gYWJpbGl0eS5wb3NpdGlvbnMgewogICAgICBybC5EcmF3U3BoZXJlV2lyZXMocG9zLCAwLjIsIDIsIDEwLCBybC5SRUQpCiAgICB9CiAgfQp9Cg",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAsDAAAAAAAACwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					777,
					1,
					"left_delete",
					null,
					"AQAAACIDAAAAAAAAIgMAAAAAAAABAAAAMw",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAjAwAAAAAAACMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					778,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAACIDAAAAAAAAIwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAfgYAAAAAAAB+BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAiAwAAAAAAACIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					780,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\nDivine_Weapons :: struct {\r\n  shield_stat:      float,\r\n  current_rotation: float,\r\n  rotation_speed:   float,\r\n  ts_swords_active: float,\r\n  ts_ready:         float,\r\n  attack_range:     float,\r\n  attack_t:         float, //lerp from attack position to attack target 0-1\r\n  num_swords:       int,\r\n  state:            Divine_Weapons_State,\r\n  idx_model:        int,\r\n  mouse_pos:        float3,\r\n  type:             AbilityType,\r\n  positions:        [dynamic]float3,\r\n}\r\n\r\nDivine_Weapons_State :: enum byte {\r\n  READY = 0,\r\n  COOLDOWN,\r\n  ROTATING_SHIELDS,\r\n  CHARGING,\r\n  ATTACKING,\r\n}\r\n\r\n@(private = \"file\")\r\nability: Divine_Weapons\r\n\r\ncreate_divine_weapons :: proc() \r\n{\r\n\r\n  ability = Divine_Weapons {\r\n    attack_range   = 5,\r\n    rotation_speed = 6,\r\n    state          = .READY,\r\n    num_swords     = 6,\r\n  }\r\n\r\n  //this is stupid\r\n  ability.positions = make([dynamic]float3)\r\n  for i in 0 ..< ability.num_swords {\r\n    append(&ability.positions, float3_zero)\r\n  }\r\n\r\n  append(&update_procs, update_divine_weapons)\r\n  append(&draw_procs, draw_divine_weapons)\r\n}\r\n\r\n\r\nupdate_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n\r\n\r\n  if ability.state == .COOLDOWN {\r\n    if time_now > ability.ts_ready {\r\n      ability.state = .READY\r\n    }\r\n  }\r\n\r\n  //trigger\r\n  if ability.state == .READY && core_input.ability_triggered && time_now > ability.ts_ready {\r\n    ability.state = .ROTATING_SHIELDS\r\n    ability.ts_swords_active = time_now + 0.5\r\n    player.stats.shield += ability.shield_stat\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      ability.positions[i] = player.position + float3_up\r\n    }\r\n  }\r\n\r\n  if ability.state == .ROTATING_SHIELDS {\r\n\r\n    ability.current_rotation += dt\r\n    interval := (math.PI * 2) / float(ability.num_swords)\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + ability.current_rotation\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)}\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], player.position + offset * 2 + float3_up, dt * 30)\r\n    }\r\n\r\n    if time_now > ability.ts_swords_active && core_input.ability_triggered {\r\n      ability.state = .CHARGING\r\n      ability.attack_t = 0\r\n    }\r\n  }\r\n\r\n  if ability.state == .CHARGING {\r\n    charge_dur: float = 0.4\r\n    ability.attack_t += dt / charge_dur\r\n\r\n    //calculate the positions behind the player, and lerp towards them\r\n    end_positions := make([dynamic]float3, context.temp_allocator)\r\n    arc: float = math.PI / 1.1\r\n    interval := arc / float(ability.num_swords)\r\n    player_rads := math.atan2(-player.forward.x, player.forward.z) - math.PI * 0.88\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + player_rads\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)} * 2\r\n      append(&end_positions, player.position + offset + float3_up)\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], end_positions[i], dt * 30)\r\n    }\r\n\r\n    if ability.attack_t > 1 {\r\n      ability.state = .ATTACKING\r\n      ability.attack_t = 0\r\n      mouse_pos := get_mouse_pos_world() + float3_up\r\n      ability.mouse_pos = mouse_pos\r\n      dir := mouse_pos - player.position\r\n      length := linalg.length(dir)\r\n      if length > ability.attack_range {\r\n        ability.mouse_pos = player.position + norm(dir) * ability.attack_range\r\n      }\r\n    }\r\n  }\r\n\r\n  if ability.state == .ATTACKING {\r\n    attack_dur: float = 0.5\r\n    ability.attack_t += dt / attack_dur\r\n\r\n    for &p in ability.positions {\r\n      p = linalg.lerp(p, ability.mouse_pos, ability.attack_t)\r\n    }\r\n    if ability.attack_t > 1 {\r\n      ability.state = .COOLDOWN\r\n    }\r\n  }\r\n}\r\n\r\n\r\ndraw_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n  model := entity_models[ability.idx_model]\r\n  if ability.state == .ROTATING_SHIELDS || ability.state == .CHARGING || ability.state == .ATTACKING {\r\n    for pos in ability.positions {\r\n      rl.DrawSphereWires(pos, 0.2, 2, 10, rl.RED)\r\n    }\r\n  }\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 147
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAATA8AAAAAAABMDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpEaXZpbmVfV2VhcG9ucyA6OiBzdHJ1Y3QgewogIHNoaWVsZF9zdGF0OiAgICAgIGZsb2F0LAogIGN1cnJlbnRfcm90YXRpb246IGZsb2F0LAogIHJvdGF0aW9uX3NwZWVkOiAgIGZsb2F0LAogIHRzX3N3b3Jkc19hY3RpdmU6IGZsb2F0LAogIHRzX3JlYWR5OiAgICAgICAgIGZsb2F0LAogIGF0dGFja19yYW5nZTogICAgIGZsb2F0LAogIGF0dGFja190OiAgICAgICAgIGZsb2F0LCAvL2xlcnAgZnJvbSBhdHRhY2sgcG9zaXRpb24gdG8gYXR0YWNrIHRhcmdldCAwLTEKICBudW1fc3dvcmRzOiAgICAgICBpbnQsCiAgc3RhdGU6ICAgICAgICAgICAgRGl2aW5lX1dlYXBvbnNfU3RhdGUsCiAgaWR4X21vZGVsOiAgICAgICAgaW50LAogIG1vdXNlX3BvczogICAgICAgIGZsb2F0MywKICB0eXBlOiAgICAgICAgICAgICBBYmlsaXR5VHlwZSwKICBwb3NpdGlvbnM6ICAgICAgICBbZHluYW1pY11mbG9hdDMsCn0KCkRpdmluZV9XZWFwb25zX1N0YXRlIDo6IGVudW0gYnl0ZSB7CiAgUkVBRFkgPSAwLAogIENPT0xET1dOLAogIFJPVEFUSU5HX1NISUVMRFMsCiAgQ0hBUkdJTkcsCiAgQVRUQUNLSU5HLAp9CgpAKHByaXZhdGUgPSAiZmlsZSIpCmFiaWxpdHk6IERpdmluZV9XZWFwb25zCgpjcmVhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CgogIGFiaWxpdHkgPSBEaXZpbmVfV2VhcG9ucyB7CiAgICBhdHRhY2tfcmFuZ2UgICA9IDUsCiAgICByb3RhdGlvbl9zcGVlZCA9IDYsCiAgICBzdGF0ZSAgICAgICAgICA9IC5SRUFEWSwKICAgIG51bV9zd29yZHMgICAgID0gNiwKICB9CgogIC8vdGhpcyBpcyBzdHVwaWQKICBhYmlsaXR5LnBvc2l0aW9ucyA9IG1ha2UoW2R5bmFtaWNdZmxvYXQzKQogIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICBhcHBlbmQoJmFiaWxpdHkucG9zaXRpb25zLCBmbG9hdDNfemVybykKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZGl2aW5lX3dlYXBvbnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2RpdmluZV93ZWFwb25zKQp9CgoKdXBkYXRlX2RpdmluZV93ZWFwb25zIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKCgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkNPT0xET1dOIHsKICAgIGlmIHRpbWVfbm93ID4gYWJpbGl0eS50c19yZWFkeSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuUkVBRFkKICAgIH0KICB9CgogIC8vdHJpZ2dlcgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJFQURZICYmIGNvcmVfaW5wdXQuYWJpbGl0eV90cmlnZ2VyZWQgJiYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3JlYWR5IHsKICAgIGFiaWxpdHkuc3RhdGUgPSAuUk9UQVRJTkdfU0hJRUxEUwogICAgYWJpbGl0eS50c19zd29yZHNfYWN0aXZlID0gdGltZV9ub3cgKyAwLjUKICAgIHBsYXllci5zdGF0cy5zaGllbGQgKz0gYWJpbGl0eS5zaGllbGRfc3RhdAoKICAgIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gcGxheWVyLnBvc2l0aW9uICsgZmxvYXQzX3VwCiAgICB9CiAgfQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5ST1RBVElOR19TSElFTERTIHsKCiAgICBhYmlsaXR5LmN1cnJlbnRfcm90YXRpb24gKz0gZHQKICAgIGludGVydmFsIDo9IChtYXRoLlBJICogMikgLyBmbG9hdChhYmlsaXR5Lm51bV9zd29yZHMpCiAgICBmb3IgaSBpbiAwIC4uPCBhYmlsaXR5Lm51bV9zd29yZHMgewogICAgICBhbmdsZSA6PSBmbG9hdChpKSAqIGludGVydmFsICsgYWJpbGl0eS5jdXJyZW50X3JvdGF0aW9uCiAgICAgIG9mZnNldCA6PSBmbG9hdDN7bWF0aC5jb3MoYW5nbGUpLCAwLCBtYXRoLnNpbihhbmdsZSl9CiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gbGluYWxnLmxlcnAoYWJpbGl0eS5wb3NpdGlvbnNbaV0sIHBsYXllci5wb3NpdGlvbiArIG9mZnNldCAqIDIgKyBmbG9hdDNfdXAsIGR0ICogMzApCiAgICB9CgogICAgaWYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3N3b3Jkc19hY3RpdmUgJiYgY29yZV9pbnB1dC5hYmlsaXR5X3RyaWdnZXJlZCB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQ0hBUkdJTkcKICAgICAgYWJpbGl0eS5hdHRhY2tfdCA9IDAKICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkNIQVJHSU5HIHsKICAgIGNoYXJnZV9kdXI6IGZsb2F0ID0gMC40CiAgICBhYmlsaXR5LmF0dGFja190ICs9IGR0IC8gY2hhcmdlX2R1cgoKICAgIC8vY2FsY3VsYXRlIHRoZSBwb3NpdGlvbnMgYmVoaW5kIHRoZSBwbGF5ZXIsIGFuZCBsZXJwIHRvd2FyZHMgdGhlbQogICAgZW5kX3Bvc2l0aW9ucyA6PSBtYWtlKFtkeW5hbWljXWZsb2F0MywgY29udGV4dC50ZW1wX2FsbG9jYXRvcikKICAgIGFyYzogZmxvYXQgPSBtYXRoLlBJIC8gMS4xCiAgICBpbnRlcnZhbCA6PSBhcmMgLyBmbG9hdChhYmlsaXR5Lm51bV9zd29yZHMpCiAgICBwbGF5ZXJfcmFkcyA6PSBtYXRoLmF0YW4yKC1wbGF5ZXIuZm9yd2FyZC54LCBwbGF5ZXIuZm9yd2FyZC56KSAtIG1hdGguUEkgKiAwLjg4CgogICAgZm9yIGkgaW4gMCAuLjwgYWJpbGl0eS5udW1fc3dvcmRzIHsKICAgICAgYW5nbGUgOj0gZmxvYXQoaSkgKiBpbnRlcnZhbCArIHBsYXllcl9yYWRzCiAgICAgIG9mZnNldCA6PSBmbG9hdDN7bWF0aC5jb3MoYW5nbGUpLCAwLCBtYXRoLnNpbihhbmdsZSl9ICogMgogICAgICBhcHBlbmQoJmVuZF9wb3NpdGlvbnMsIHBsYXllci5wb3NpdGlvbiArIG9mZnNldCArIGZsb2F0M191cCkKICAgICAgYWJpbGl0eS5wb3NpdGlvbnNbaV0gPSBsaW5hbGcubGVycChhYmlsaXR5LnBvc2l0aW9uc1tpXSwgZW5kX3Bvc2l0aW9uc1tpXSwgZHQgKiAzMCkKICAgIH0KCiAgICBpZiBhYmlsaXR5LmF0dGFja190ID4gMSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQVRUQUNLSU5HCiAgICAgIGFiaWxpdHkuYXR0YWNrX3QgPSAwCiAgICAgIG1vdXNlX3BvcyA6PSBnZXRfbW91c2VfcG9zX3dvcmxkKCkgKyBmbG9hdDNfdXAKICAgICAgYWJpbGl0eS5tb3VzZV9wb3MgPSBtb3VzZV9wb3MKICAgICAgZGlyIDo9IG1vdXNlX3BvcyAtIHBsYXllci5wb3NpdGlvbgogICAgICBsZW5ndGggOj0gbGluYWxnLmxlbmd0aChkaXIpCiAgICAgIGlmIGxlbmd0aCA+IGFiaWxpdHkuYXR0YWNrX3JhbmdlIHsKICAgICAgICBhYmlsaXR5Lm1vdXNlX3BvcyA9IHBsYXllci5wb3NpdGlvbiArIG5vcm0oZGlyKSAqIGFiaWxpdHkuYXR0YWNrX3JhbmdlCiAgICAgIH0KICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLkFUVEFDS0lORyB7CiAgICBhdHRhY2tfZHVyOiBmbG9hdCA9IDAuNQogICAgYWJpbGl0eS5hdHRhY2tfdCArPSBkdCAvIGF0dGFja19kdXIKCiAgICBmb3IgJnAgaW4gYWJpbGl0eS5wb3NpdGlvbnMgewogICAgICBwID0gbGluYWxnLmxlcnAocCwgYWJpbGl0eS5tb3VzZV9wb3MsIGFiaWxpdHkuYXR0YWNrX3QpCiAgICB9CiAgICBpZiBhYmlsaXR5LmF0dGFja190ID4gMSB7CiAgICAgIGFiaWxpdHkuc3RhdGUgPSAuQ09PTERPV04KICAgIH0KICB9Cn0KCgpkcmF3X2RpdmluZV93ZWFwb25zIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKICBtb2RlbCA6PSBlbnRpdHlfbW9kZWxzW2FiaWxpdHkuaWR4X21vZGVsXQogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJPVEFUSU5HX1NISUVMRFMgfHwgYWJpbGl0eS5zdGF0ZSA9PSAuQ0hBUkdJTkcgfHwgYWJpbGl0eS5zdGF0ZSA9PSAuQVRUQUNLSU5HIHsKICAgIGZvciBwb3MgaW4gYWJpbGl0eS5wb3NpdGlvbnMgewogICAgICBybC5EcmF3U3BoZXJlV2lyZXMocG9zLCAwLjIsIDIsIDEwLCBybC5SRUQpCiAgICB9CiAgfQp9Cg",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAjAwAAAAAAACMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					786,
					1,
					"left_delete",
					null,
					"AQAAAKcEAAAAAAAApwQAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/AQAAAAEAAACoBAAAAAAAAKgEAAAAAAAAAAAAAADQc0A"
				],
				[
					788,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\nDivine_Weapons :: struct {\r\n  shield_stat:      float,\r\n  current_rotation: float,\r\n  rotation_speed:   float,\r\n  ts_swords_active: float,\r\n  ts_ready:         float,\r\n  attack_range:     float,\r\n  attack_t:         float, //lerp from attack position to attack target 0-1\r\n  num_swords:       int,\r\n  state:            Divine_Weapons_State,\r\n  idx_model:        int,\r\n  mouse_pos:        float3,\r\n  type:             AbilityType,\r\n  positions:        [dynamic]float3,\r\n}\r\n\r\nDivine_Weapons_State :: enum byte {\r\n  READY = 0,\r\n  COOLDOWN,\r\n  ROTATING_SHIELDS,\r\n  CHARGING,\r\n  ATTACKING,\r\n}\r\n\r\n@(private = \"file\")\r\nability: Divine_Weapons\r\n\r\ncreate_divine_weapons :: proc() \r\n{\r\n\r\n  ability = Divine_Weapons {\r\n    attack_range   = 5,\r\n    rotation_speed = 6,\r\n    state          = .READY,\r\n    num_swords     = 6,\r\n  }\r\n\r\n  //this is stupid\r\n  ability.positions = make([dynamic]float3)\r\n  for i in 0 ..< ability.num_swords {\r\n    append(&ability.positions, float3_zero)\r\n  }\r\n\r\n  append(&update_procs, update_divine_weapons)\r\n  append(&draw_procs, draw_divine_weapons)\r\n}\r\n\r\n\r\nupdate_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n\r\n  if ability.state == .COOLDOWN {\r\n    if time_now > ability.ts_ready {\r\n      ability.state = .READY\r\n    }\r\n  }\r\n\r\n  //trigger\r\n  if ability.state == .READY && core_input.ability_triggered && time_now > ability.ts_ready {\r\n    ability.state = .ROTATING_SHIELDS\r\n    ability.ts_swords_active = time_now + 0.5\r\n    player.stats.shield += ability.shield_stat\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      ability.positions[i] = player.position + float3_up\r\n    }\r\n  }\r\n\r\n  if ability.state == .ROTATING_SHIELDS {\r\n\r\n    ability.current_rotation += dt\r\n    interval := (math.PI * 2) / float(ability.num_swords)\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + ability.current_rotation\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)}\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], player.position + offset * 2 + float3_up, dt * 30)\r\n    }\r\n\r\n    if time_now > ability.ts_swords_active && core_input.ability_triggered {\r\n      ability.state = .CHARGING\r\n      ability.attack_t = 0\r\n    }\r\n  }\r\n\r\n  if ability.state == .CHARGING {\r\n    charge_dur: float = 0.4\r\n    ability.attack_t += dt / charge_dur\r\n\r\n    //calculate the positions behind the player, and lerp towards them\r\n    end_positions := make([dynamic]float3, context.temp_allocator)\r\n    arc: float = math.PI / 1.1\r\n    interval := arc / float(ability.num_swords)\r\n    player_rads := math.atan2(-player.forward.x, player.forward.z) - math.PI * 0.88\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + player_rads\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)} * 2\r\n      append(&end_positions, player.position + offset + float3_up)\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], end_positions[i], dt * 30)\r\n    }\r\n\r\n    if ability.attack_t > 1 {\r\n      ability.state = .ATTACKING\r\n      ability.attack_t = 0\r\n      mouse_pos := get_mouse_pos_world() + float3_up\r\n      ability.mouse_pos = mouse_pos\r\n      dir := mouse_pos - player.position\r\n      length := linalg.length(dir)\r\n      if length > ability.attack_range {\r\n        ability.mouse_pos = player.position + norm(dir) * ability.attack_range\r\n      }\r\n    }\r\n  }\r\n\r\n  if ability.state == .ATTACKING {\r\n    attack_dur: float = 0.5\r\n    ability.attack_t += dt / attack_dur\r\n\r\n    for &p in ability.positions {\r\n      p = linalg.lerp(p, ability.mouse_pos, ability.attack_t)\r\n    }\r\n    if ability.attack_t > 1 {\r\n      ability.state = .COOLDOWN\r\n    }\r\n  }\r\n}\r\n\r\n\r\ndraw_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n  model := entity_models[ability.idx_model]\r\n  if ability.state == .ROTATING_SHIELDS || ability.state == .CHARGING || ability.state == .ATTACKING {\r\n    for pos in ability.positions {\r\n      rl.DrawSphereWires(pos, 0.2, 2, 10, rl.RED)\r\n    }\r\n  }\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 146
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAASw8AAAAAAABLDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpEaXZpbmVfV2VhcG9ucyA6OiBzdHJ1Y3QgewogIHNoaWVsZF9zdGF0OiAgICAgIGZsb2F0LAogIGN1cnJlbnRfcm90YXRpb246IGZsb2F0LAogIHJvdGF0aW9uX3NwZWVkOiAgIGZsb2F0LAogIHRzX3N3b3Jkc19hY3RpdmU6IGZsb2F0LAogIHRzX3JlYWR5OiAgICAgICAgIGZsb2F0LAogIGF0dGFja19yYW5nZTogICAgIGZsb2F0LAogIGF0dGFja190OiAgICAgICAgIGZsb2F0LCAvL2xlcnAgZnJvbSBhdHRhY2sgcG9zaXRpb24gdG8gYXR0YWNrIHRhcmdldCAwLTEKICBudW1fc3dvcmRzOiAgICAgICBpbnQsCiAgc3RhdGU6ICAgICAgICAgICAgRGl2aW5lX1dlYXBvbnNfU3RhdGUsCiAgaWR4X21vZGVsOiAgICAgICAgaW50LAogIG1vdXNlX3BvczogICAgICAgIGZsb2F0MywKICB0eXBlOiAgICAgICAgICAgICBBYmlsaXR5VHlwZSwKICBwb3NpdGlvbnM6ICAgICAgICBbZHluYW1pY11mbG9hdDMsCn0KCkRpdmluZV9XZWFwb25zX1N0YXRlIDo6IGVudW0gYnl0ZSB7CiAgUkVBRFkgPSAwLAogIENPT0xET1dOLAogIFJPVEFUSU5HX1NISUVMRFMsCiAgQ0hBUkdJTkcsCiAgQVRUQUNLSU5HLAp9CgpAKHByaXZhdGUgPSAiZmlsZSIpCmFiaWxpdHk6IERpdmluZV9XZWFwb25zCgpjcmVhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CgogIGFiaWxpdHkgPSBEaXZpbmVfV2VhcG9ucyB7CiAgICBhdHRhY2tfcmFuZ2UgICA9IDUsCiAgICByb3RhdGlvbl9zcGVlZCA9IDYsCiAgICBzdGF0ZSAgICAgICAgICA9IC5SRUFEWSwKICAgIG51bV9zd29yZHMgICAgID0gNiwKICB9CgogIC8vdGhpcyBpcyBzdHVwaWQKICBhYmlsaXR5LnBvc2l0aW9ucyA9IG1ha2UoW2R5bmFtaWNdZmxvYXQzKQogIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICBhcHBlbmQoJmFiaWxpdHkucG9zaXRpb25zLCBmbG9hdDNfemVybykKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZGl2aW5lX3dlYXBvbnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2RpdmluZV93ZWFwb25zKQp9CgoKdXBkYXRlX2RpdmluZV93ZWFwb25zIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuQ09PTERPV04gewogICAgaWYgdGltZV9ub3cgPiBhYmlsaXR5LnRzX3JlYWR5IHsKICAgICAgYWJpbGl0eS5zdGF0ZSA9IC5SRUFEWQogICAgfQogIH0KCiAgLy90cmlnZ2VyCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuUkVBRFkgJiYgY29yZV9pbnB1dC5hYmlsaXR5X3RyaWdnZXJlZCAmJiB0aW1lX25vdyA+IGFiaWxpdHkudHNfcmVhZHkgewogICAgYWJpbGl0eS5zdGF0ZSA9IC5ST1RBVElOR19TSElFTERTCiAgICBhYmlsaXR5LnRzX3N3b3Jkc19hY3RpdmUgPSB0aW1lX25vdyArIDAuNQogICAgcGxheWVyLnN0YXRzLnNoaWVsZCArPSBhYmlsaXR5LnNoaWVsZF9zdGF0CgogICAgZm9yIGkgaW4gMCAuLjwgYWJpbGl0eS5udW1fc3dvcmRzIHsKICAgICAgYWJpbGl0eS5wb3NpdGlvbnNbaV0gPSBwbGF5ZXIucG9zaXRpb24gKyBmbG9hdDNfdXAKICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJPVEFUSU5HX1NISUVMRFMgewoKICAgIGFiaWxpdHkuY3VycmVudF9yb3RhdGlvbiArPSBkdAogICAgaW50ZXJ2YWwgOj0gKG1hdGguUEkgKiAyKSAvIGZsb2F0KGFiaWxpdHkubnVtX3N3b3JkcykKICAgIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICAgIGFuZ2xlIDo9IGZsb2F0KGkpICogaW50ZXJ2YWwgKyBhYmlsaXR5LmN1cnJlbnRfcm90YXRpb24KICAgICAgb2Zmc2V0IDo9IGZsb2F0M3ttYXRoLmNvcyhhbmdsZSksIDAsIG1hdGguc2luKGFuZ2xlKX0KICAgICAgYWJpbGl0eS5wb3NpdGlvbnNbaV0gPSBsaW5hbGcubGVycChhYmlsaXR5LnBvc2l0aW9uc1tpXSwgcGxheWVyLnBvc2l0aW9uICsgb2Zmc2V0ICogMiArIGZsb2F0M191cCwgZHQgKiAzMCkKICAgIH0KCiAgICBpZiB0aW1lX25vdyA+IGFiaWxpdHkudHNfc3dvcmRzX2FjdGl2ZSAmJiBjb3JlX2lucHV0LmFiaWxpdHlfdHJpZ2dlcmVkIHsKICAgICAgYWJpbGl0eS5zdGF0ZSA9IC5DSEFSR0lORwogICAgICBhYmlsaXR5LmF0dGFja190ID0gMAogICAgfQogIH0KCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuQ0hBUkdJTkcgewogICAgY2hhcmdlX2R1cjogZmxvYXQgPSAwLjQKICAgIGFiaWxpdHkuYXR0YWNrX3QgKz0gZHQgLyBjaGFyZ2VfZHVyCgogICAgLy9jYWxjdWxhdGUgdGhlIHBvc2l0aW9ucyBiZWhpbmQgdGhlIHBsYXllciwgYW5kIGxlcnAgdG93YXJkcyB0aGVtCiAgICBlbmRfcG9zaXRpb25zIDo9IG1ha2UoW2R5bmFtaWNdZmxvYXQzLCBjb250ZXh0LnRlbXBfYWxsb2NhdG9yKQogICAgYXJjOiBmbG9hdCA9IG1hdGguUEkgLyAxLjEKICAgIGludGVydmFsIDo9IGFyYyAvIGZsb2F0KGFiaWxpdHkubnVtX3N3b3JkcykKICAgIHBsYXllcl9yYWRzIDo9IG1hdGguYXRhbjIoLXBsYXllci5mb3J3YXJkLngsIHBsYXllci5mb3J3YXJkLnopIC0gbWF0aC5QSSAqIDAuODgKCiAgICBmb3IgaSBpbiAwIC4uPCBhYmlsaXR5Lm51bV9zd29yZHMgewogICAgICBhbmdsZSA6PSBmbG9hdChpKSAqIGludGVydmFsICsgcGxheWVyX3JhZHMKICAgICAgb2Zmc2V0IDo9IGZsb2F0M3ttYXRoLmNvcyhhbmdsZSksIDAsIG1hdGguc2luKGFuZ2xlKX0gKiAyCiAgICAgIGFwcGVuZCgmZW5kX3Bvc2l0aW9ucywgcGxheWVyLnBvc2l0aW9uICsgb2Zmc2V0ICsgZmxvYXQzX3VwKQogICAgICBhYmlsaXR5LnBvc2l0aW9uc1tpXSA9IGxpbmFsZy5sZXJwKGFiaWxpdHkucG9zaXRpb25zW2ldLCBlbmRfcG9zaXRpb25zW2ldLCBkdCAqIDMwKQogICAgfQoKICAgIGlmIGFiaWxpdHkuYXR0YWNrX3QgPiAxIHsKICAgICAgYWJpbGl0eS5zdGF0ZSA9IC5BVFRBQ0tJTkcKICAgICAgYWJpbGl0eS5hdHRhY2tfdCA9IDAKICAgICAgbW91c2VfcG9zIDo9IGdldF9tb3VzZV9wb3Nfd29ybGQoKSArIGZsb2F0M191cAogICAgICBhYmlsaXR5Lm1vdXNlX3BvcyA9IG1vdXNlX3BvcwogICAgICBkaXIgOj0gbW91c2VfcG9zIC0gcGxheWVyLnBvc2l0aW9uCiAgICAgIGxlbmd0aCA6PSBsaW5hbGcubGVuZ3RoKGRpcikKICAgICAgaWYgbGVuZ3RoID4gYWJpbGl0eS5hdHRhY2tfcmFuZ2UgewogICAgICAgIGFiaWxpdHkubW91c2VfcG9zID0gcGxheWVyLnBvc2l0aW9uICsgbm9ybShkaXIpICogYWJpbGl0eS5hdHRhY2tfcmFuZ2UKICAgICAgfQogICAgfQogIH0KCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuQVRUQUNLSU5HIHsKICAgIGF0dGFja19kdXI6IGZsb2F0ID0gMC41CiAgICBhYmlsaXR5LmF0dGFja190ICs9IGR0IC8gYXR0YWNrX2R1cgoKICAgIGZvciAmcCBpbiBhYmlsaXR5LnBvc2l0aW9ucyB7CiAgICAgIHAgPSBsaW5hbGcubGVycChwLCBhYmlsaXR5Lm1vdXNlX3BvcywgYWJpbGl0eS5hdHRhY2tfdCkKICAgIH0KICAgIGlmIGFiaWxpdHkuYXR0YWNrX3QgPiAxIHsKICAgICAgYWJpbGl0eS5zdGF0ZSA9IC5DT09MRE9XTgogICAgfQogIH0KfQoKCmRyYXdfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9wbGF5ZXIoKQogIG1vZGVsIDo9IGVudGl0eV9tb2RlbHNbYWJpbGl0eS5pZHhfbW9kZWxdCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuUk9UQVRJTkdfU0hJRUxEUyB8fCBhYmlsaXR5LnN0YXRlID09IC5DSEFSR0lORyB8fCBhYmlsaXR5LnN0YXRlID09IC5BVFRBQ0tJTkcgewogICAgZm9yIHBvcyBpbiBhYmlsaXR5LnBvc2l0aW9ucyB7CiAgICAgIHJsLkRyYXdTcGhlcmVXaXJlcyhwb3MsIDAuMiwgMiwgMTAsIHJsLlJFRCkKICAgIH0KICB9Cn0K",
					"AgAAAAAAAAABAAAAfgYAAAAAAAB+BgAAAAAAAAAAAAAAAPC/AQAAAAEAAACnBAAAAAAAAKcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					790,
					1,
					"insert",
					{
						"characters": "///"
					},
					"AwAAAGoEAAAAAAAAawQAAAAAAAAAAAAAawQAAAAAAABsBAAAAAAAAAAAAABsBAAAAAAAAG0EAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAfgYAAAAAAAB+BgAAAAAAAAAAAAAAAPC/AQAAAAEAAABqBAAAAAAAAGoEAAAAAAAAAAAAAAAAAAA"
				],
				[
					791,
					1,
					"left_delete",
					null,
					"AQAAAGwEAAAAAAAAbAQAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAgQYAAAAAAACBBgAAAAAAAAAAAAAAAPC/AQAAAAEAAABtBAAAAAAAAG0EAAAAAAAAAAAAAAAA8L8"
				],
				[
					792,
					1,
					"insert",
					{
						"characters": " spinngin"
					},
					"CQAAAGwEAAAAAAAAbQQAAAAAAAAAAAAAbQQAAAAAAABuBAAAAAAAAAAAAABuBAAAAAAAAG8EAAAAAAAAAAAAAG8EAAAAAAAAcAQAAAAAAAAAAAAAcAQAAAAAAABxBAAAAAAAAAAAAABxBAAAAAAAAHIEAAAAAAAAAAAAAHIEAAAAAAAAcwQAAAAAAAAAAAAAcwQAAAAAAAB0BAAAAAAAAAAAAAB0BAAAAAAAAHUEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAgAYAAAAAAACABgAAAAAAAAAAAAAAAPC/AQAAAAEAAABsBAAAAAAAAGwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					793,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHUEAAAAAAAAdgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAiQYAAAAAAACJBgAAAAAAAAAAAAAAAPC/AQAAAAEAAAB1BAAAAAAAAHUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					794,
					4,
					"left_delete",
					null,
					"BAAAAHUEAAAAAAAAdQQAAAAAAAABAAAAIHQEAAAAAAAAdAQAAAAAAAABAAAAbnMEAAAAAAAAcwQAAAAAAAABAAAAaXIEAAAAAAAAcgQAAAAAAAABAAAAZw",
					"AgAAAAAAAAABAAAAigYAAAAAAACKBgAAAAAAAAAAAAAAAPC/AQAAAAEAAAB2BAAAAAAAAHYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					795,
					1,
					"insert",
					{
						"characters": "ing"
					},
					"AwAAAHIEAAAAAAAAcwQAAAAAAAAAAAAAcwQAAAAAAAB0BAAAAAAAAAAAAAB0BAAAAAAAAHUEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAhgYAAAAAAACGBgAAAAAAAAAAAAAAAPC/AQAAAAEAAAByBAAAAAAAAHIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					796,
					1,
					"insert",
					{
						"characters": " shie"
					},
					"BQAAAHUEAAAAAAAAdgQAAAAAAAAAAAAAdgQAAAAAAAB3BAAAAAAAAAAAAAB3BAAAAAAAAHgEAAAAAAAAAAAAAHgEAAAAAAAAeQQAAAAAAAAAAAAAeQQAAAAAAAB6BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAiQYAAAAAAACJBgAAAAAAAAAAAAAAAPC/AQAAAAEAAAB1BAAAAAAAAHUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					798,
					1,
					"insert",
					{
						"characters": "Summon"
					},
					"BgAAAG0EAAAAAAAAbgQAAAAAAAANAAAAc3Bpbm5pbmcgc2hpZW4EAAAAAAAAbwQAAAAAAAAAAAAAbwQAAAAAAABwBAAAAAAAAAAAAABwBAAAAAAAAHEEAAAAAAAAAAAAAHEEAAAAAAAAcgQAAAAAAAAAAAAAcgQAAAAAAABzBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAjgYAAAAAAACOBgAAAAAAAAAAAAAAAPC/AQAAAAEAAAB6BAAAAAAAAG0EAAAAAAAAAAAAAAAA8L8"
				],
				[
					799,
					1,
					"insert",
					{
						"characters": " spinning"
					},
					"CQAAAHMEAAAAAAAAdAQAAAAAAAAAAAAAdAQAAAAAAAB1BAAAAAAAAAAAAAB1BAAAAAAAAHYEAAAAAAAAAAAAAHYEAAAAAAAAdwQAAAAAAAAAAAAAdwQAAAAAAAB4BAAAAAAAAAAAAAB4BAAAAAAAAHkEAAAAAAAAAAAAAHkEAAAAAAAAegQAAAAAAAAAAAAAegQAAAAAAAB7BAAAAAAAAAAAAAB7BAAAAAAAAHwEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAhwYAAAAAAACHBgAAAAAAAAAAAAAAAPC/AQAAAAEAAABzBAAAAAAAAHMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					800,
					1,
					"insert",
					{
						"characters": " shields,"
					},
					"CQAAAHwEAAAAAAAAfQQAAAAAAAAAAAAAfQQAAAAAAAB+BAAAAAAAAAAAAAB+BAAAAAAAAH8EAAAAAAAAAAAAAH8EAAAAAAAAgAQAAAAAAAAAAAAAgAQAAAAAAACBBAAAAAAAAAAAAACBBAAAAAAAAIIEAAAAAAAAAAAAAIIEAAAAAAAAgwQAAAAAAAAAAAAAgwQAAAAAAACEBAAAAAAAAAAAAACEBAAAAAAAAIUEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAkAYAAAAAAACQBgAAAAAAAAAAAAAAAPC/AQAAAAEAAAB8BAAAAAAAAHwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					801,
					1,
					"insert",
					{
						"characters": " after"
					},
					"BgAAAIUEAAAAAAAAhgQAAAAAAAAAAAAAhgQAAAAAAACHBAAAAAAAAAAAAACHBAAAAAAAAIgEAAAAAAAAAAAAAIgEAAAAAAAAiQQAAAAAAAAAAAAAiQQAAAAAAACKBAAAAAAAAAAAAACKBAAAAAAAAIsEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAmQYAAAAAAACZBgAAAAAAAAAAAAAAAPC/AQAAAAEAAACFBAAAAAAAAIUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					802,
					1,
					"insert",
					{
						"characters": " x"
					},
					"AgAAAIsEAAAAAAAAjAQAAAAAAAAAAAAAjAQAAAAAAACNBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAnwYAAAAAAACfBgAAAAAAAAAAAAAAAPC/AQAAAAEAAACLBAAAAAAAAIsEAAAAAAAAAAAAAAAA8L8"
				],
				[
					803,
					1,
					"insert",
					{
						"characters": " seconds,"
					},
					"CQAAAI0EAAAAAAAAjgQAAAAAAAAAAAAAjgQAAAAAAACPBAAAAAAAAAAAAACPBAAAAAAAAJAEAAAAAAAAAAAAAJAEAAAAAAAAkQQAAAAAAAAAAAAAkQQAAAAAAACSBAAAAAAAAAAAAACSBAAAAAAAAJMEAAAAAAAAAAAAAJMEAAAAAAAAlAQAAAAAAAAAAAAAlAQAAAAAAACVBAAAAAAAAAAAAACVBAAAAAAAAJYEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAoQYAAAAAAAChBgAAAAAAAAAAAAAAAPC/AQAAAAEAAACNBAAAAAAAAI0EAAAAAAAAAAAAAAAA8L8"
				],
				[
					804,
					1,
					"insert",
					{
						"characters": " click"
					},
					"BgAAAJYEAAAAAAAAlwQAAAAAAAAAAAAAlwQAAAAAAACYBAAAAAAAAAAAAACYBAAAAAAAAJkEAAAAAAAAAAAAAJkEAAAAAAAAmgQAAAAAAAAAAAAAmgQAAAAAAACbBAAAAAAAAAAAAACbBAAAAAAAAJwEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAqgYAAAAAAACqBgAAAAAAAAAAAAAAAPC/AQAAAAEAAACWBAAAAAAAAJYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					805,
					1,
					"insert",
					{
						"characters": " again"
					},
					"BgAAAJwEAAAAAAAAnQQAAAAAAAAAAAAAnQQAAAAAAACeBAAAAAAAAAAAAACeBAAAAAAAAJ8EAAAAAAAAAAAAAJ8EAAAAAAAAoAQAAAAAAAAAAAAAoAQAAAAAAAChBAAAAAAAAAAAAAChBAAAAAAAAKIEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAsAYAAAAAAACwBgAAAAAAAAAAAAAAAPC/AQAAAAEAAACcBAAAAAAAAJwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					806,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAKIEAAAAAAAAowQAAAAAAAAAAAAAowQAAAAAAACkBAAAAAAAAAAAAACkBAAAAAAAAKUEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAtgYAAAAAAAC2BgAAAAAAAAAAAAAAAPC/AQAAAAEAAACiBAAAAAAAAKIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					807,
					1,
					"insert",
					{
						"characters": " turn"
					},
					"BQAAAKUEAAAAAAAApgQAAAAAAAAAAAAApgQAAAAAAACnBAAAAAAAAAAAAACnBAAAAAAAAKgEAAAAAAAAAAAAAKgEAAAAAAAAqQQAAAAAAAAAAAAAqQQAAAAAAACqBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAuQYAAAAAAAC5BgAAAAAAAAAAAAAAAPC/AQAAAAEAAAClBAAAAAAAAKUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					808,
					1,
					"insert",
					{
						"characters": " shields"
					},
					"CAAAAKoEAAAAAAAAqwQAAAAAAAAAAAAAqwQAAAAAAACsBAAAAAAAAAAAAACsBAAAAAAAAK0EAAAAAAAAAAAAAK0EAAAAAAAArgQAAAAAAAAAAAAArgQAAAAAAACvBAAAAAAAAAAAAACvBAAAAAAAALAEAAAAAAAAAAAAALAEAAAAAAAAsQQAAAAAAAAAAAAAsQQAAAAAAACyBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAvgYAAAAAAAC+BgAAAAAAAAAAAAAAAPC/AQAAAAEAAACqBAAAAAAAAKoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					809,
					1,
					"insert",
					{
						"characters": " into"
					},
					"BQAAALIEAAAAAAAAswQAAAAAAAAAAAAAswQAAAAAAAC0BAAAAAAAAAAAAAC0BAAAAAAAALUEAAAAAAAAAAAAALUEAAAAAAAAtgQAAAAAAAAAAAAAtgQAAAAAAAC3BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAxgYAAAAAAADGBgAAAAAAAAAAAAAAAPC/AQAAAAEAAACyBAAAAAAAALIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					810,
					1,
					"insert",
					{
						"characters": " swords."
					},
					"CAAAALcEAAAAAAAAuAQAAAAAAAAAAAAAuAQAAAAAAAC5BAAAAAAAAAAAAAC5BAAAAAAAALoEAAAAAAAAAAAAALoEAAAAAAAAuwQAAAAAAAAAAAAAuwQAAAAAAAC8BAAAAAAAAAAAAAC8BAAAAAAAAL0EAAAAAAAAAAAAAL0EAAAAAAAAvgQAAAAAAAAAAAAAvgQAAAAAAAC/BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAywYAAAAAAADLBgAAAAAAAAAAAAAAAPC/AQAAAAEAAAC3BAAAAAAAALcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					811,
					1,
					"insert",
					{
						"characters": " Swords"
					},
					"BwAAAL8EAAAAAAAAwAQAAAAAAAAAAAAAwAQAAAAAAADBBAAAAAAAAAAAAADBBAAAAAAAAMIEAAAAAAAAAAAAAMIEAAAAAAAAwwQAAAAAAAAAAAAAwwQAAAAAAADEBAAAAAAAAAAAAADEBAAAAAAAAMUEAAAAAAAAAAAAAMUEAAAAAAAAxgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA0wYAAAAAAADTBgAAAAAAAAAAAAAAAPC/AQAAAAEAAAC/BAAAAAAAAL8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					812,
					1,
					"insert",
					{
						"characters": " fly"
					},
					"BAAAAMYEAAAAAAAAxwQAAAAAAAAAAAAAxwQAAAAAAADIBAAAAAAAAAAAAADIBAAAAAAAAMkEAAAAAAAAAAAAAMkEAAAAAAAAygQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA2gYAAAAAAADaBgAAAAAAAAAAAAAAAPC/AQAAAAEAAADGBAAAAAAAAMYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					813,
					1,
					"insert",
					{
						"characters": " behind"
					},
					"BwAAAMoEAAAAAAAAywQAAAAAAAAAAAAAywQAAAAAAADMBAAAAAAAAAAAAADMBAAAAAAAAM0EAAAAAAAAAAAAAM0EAAAAAAAAzgQAAAAAAAAAAAAAzgQAAAAAAADPBAAAAAAAAAAAAADPBAAAAAAAANAEAAAAAAAAAAAAANAEAAAAAAAA0QQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA3gYAAAAAAADeBgAAAAAAAAAAAAAAAPC/AQAAAAEAAADKBAAAAAAAAMoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					814,
					1,
					"insert",
					{
						"characters": " you,"
					},
					"BQAAANEEAAAAAAAA0gQAAAAAAAAAAAAA0gQAAAAAAADTBAAAAAAAAAAAAADTBAAAAAAAANQEAAAAAAAAAAAAANQEAAAAAAAA1QQAAAAAAAAAAAAA1QQAAAAAAADWBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA5QYAAAAAAADlBgAAAAAAAAAAAAAAAPC/AQAAAAEAAADRBAAAAAAAANEEAAAAAAAAAAAAAAAA8L8"
				],
				[
					815,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAANYEAAAAAAAA1wQAAAAAAAAAAAAA1wQAAAAAAADYBAAAAAAAAAAAAADYBAAAAAAAANkEAAAAAAAAAAAAANkEAAAAAAAA2gQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA6gYAAAAAAADqBgAAAAAAAAAAAAAAAPC/AQAAAAEAAADWBAAAAAAAANYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					816,
					1,
					"insert",
					{
						"characters": " then"
					},
					"BQAAANoEAAAAAAAA2wQAAAAAAAAAAAAA2wQAAAAAAADcBAAAAAAAAAAAAADcBAAAAAAAAN0EAAAAAAAAAAAAAN0EAAAAAAAA3gQAAAAAAAAAAAAA3gQAAAAAAADfBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA7gYAAAAAAADuBgAAAAAAAAAAAAAAAPC/AQAAAAEAAADaBAAAAAAAANoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					817,
					1,
					"insert",
					{
						"characters": " quickly"
					},
					"CAAAAN8EAAAAAAAA4AQAAAAAAAAAAAAA4AQAAAAAAADhBAAAAAAAAAAAAADhBAAAAAAAAOIEAAAAAAAAAAAAAOIEAAAAAAAA4wQAAAAAAAAAAAAA4wQAAAAAAADkBAAAAAAAAAAAAADkBAAAAAAAAOUEAAAAAAAAAAAAAOUEAAAAAAAA5gQAAAAAAAAAAAAA5gQAAAAAAADnBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA8wYAAAAAAADzBgAAAAAAAAAAAAAAAPC/AQAAAAEAAADfBAAAAAAAAN8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					818,
					1,
					"insert",
					{
						"characters": " attacks"
					},
					"CAAAAOcEAAAAAAAA6AQAAAAAAAAAAAAA6AQAAAAAAADpBAAAAAAAAAAAAADpBAAAAAAAAOoEAAAAAAAAAAAAAOoEAAAAAAAA6wQAAAAAAAAAAAAA6wQAAAAAAADsBAAAAAAAAAAAAADsBAAAAAAAAO0EAAAAAAAAAAAAAO0EAAAAAAAA7gQAAAAAAAAAAAAA7gQAAAAAAADvBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA+wYAAAAAAAD7BgAAAAAAAAAAAAAAAPC/AQAAAAEAAADnBAAAAAAAAOcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					819,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAO8EAAAAAAAA8AQAAAAAAAAAAAAA8AQAAAAAAADxBAAAAAAAAAAAAADxBAAAAAAAAPIEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAwcAAAAAAAADBwAAAAAAAAAAAAAAAPC/AQAAAAEAAADvBAAAAAAAAO8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					820,
					1,
					"insert",
					{
						"characters": " front"
					},
					"BgAAAPIEAAAAAAAA8wQAAAAAAAAAAAAA8wQAAAAAAAD0BAAAAAAAAAAAAAD0BAAAAAAAAPUEAAAAAAAAAAAAAPUEAAAAAAAA9gQAAAAAAAAAAAAA9gQAAAAAAAD3BAAAAAAAAAAAAAD3BAAAAAAAAPgEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAABgcAAAAAAAAGBwAAAAAAAAAAAAAAAPC/AQAAAAEAAADyBAAAAAAAAPIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					821,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAPgEAAAAAAAA+QQAAAAAAAAAAAAA+QQAAAAAAAD6BAAAAAAAAAAAAAD6BAAAAAAAAPsEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAADAcAAAAAAAAMBwAAAAAAAAAAAAAAAPC/AQAAAAEAAAD4BAAAAAAAAPgEAAAAAAAAAAAAAAAA8L8"
				],
				[
					822,
					1,
					"insert",
					{
						"characters": " you"
					},
					"BAAAAPsEAAAAAAAA/AQAAAAAAAAAAAAA/AQAAAAAAAD9BAAAAAAAAAAAAAD9BAAAAAAAAP4EAAAAAAAAAAAAAP4EAAAAAAAA/wQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAADwcAAAAAAAAPBwAAAAAAAAAAAAAAAPC/AQAAAAEAAAD7BAAAAAAAAPsEAAAAAAAAAAAAAAAA8L8"
				],
				[
					824,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\nDivine_Weapons :: struct {\r\n  shield_stat:      float,\r\n  current_rotation: float,\r\n  rotation_speed:   float,\r\n  ts_swords_active: float,\r\n  ts_ready:         float,\r\n  attack_range:     float,\r\n  attack_t:         float, //lerp from attack position to attack target 0-1\r\n  num_swords:       int,\r\n  state:            Divine_Weapons_State,\r\n  idx_model:        int,\r\n  mouse_pos:        float3,\r\n  type:             AbilityType,\r\n  positions:        [dynamic]float3,\r\n}\r\n\r\nDivine_Weapons_State :: enum byte {\r\n  READY = 0,\r\n  COOLDOWN,\r\n  ROTATING_SHIELDS,\r\n  CHARGING,\r\n  ATTACKING,\r\n}\r\n\r\n@(private = \"file\")\r\nability: Divine_Weapons\r\n\r\ncreate_divine_weapons :: proc() \r\n{\r\n\r\n  ability = Divine_Weapons {\r\n    attack_range   = 5,\r\n    rotation_speed = 6,\r\n    state          = .READY,\r\n    num_swords     = 6,\r\n  }\r\n\r\n  //this is stupid\r\n  ability.positions = make([dynamic]float3)\r\n  for i in 0 ..< ability.num_swords {\r\n    append(&ability.positions, float3_zero)\r\n  }\r\n\r\n  append(&update_procs, update_divine_weapons)\r\n  append(&draw_procs, draw_divine_weapons)\r\n}\r\n\r\n// Summon spinning shields, after x seconds, click again to turn shields into swords. Swords fly behind you, and then quickly attacks in front of you\r\nupdate_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n\r\n  if ability.state == .COOLDOWN {\r\n    if time_now > ability.ts_ready {\r\n      ability.state = .READY\r\n    }\r\n  }\r\n\r\n  //trigger\r\n  if ability.state == .READY && core_input.ability_triggered && time_now > ability.ts_ready {\r\n    ability.state = .ROTATING_SHIELDS\r\n    ability.ts_swords_active = time_now + 0.5\r\n    player.stats.shield += ability.shield_stat\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      ability.positions[i] = player.position + float3_up\r\n    }\r\n  }\r\n\r\n  if ability.state == .ROTATING_SHIELDS {\r\n\r\n    ability.current_rotation += dt\r\n    interval := (math.PI * 2) / float(ability.num_swords)\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + ability.current_rotation\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)}\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], player.position + offset * 2 + float3_up, dt * 30)\r\n    }\r\n\r\n    if time_now > ability.ts_swords_active && core_input.ability_triggered {\r\n      ability.state = .CHARGING\r\n      ability.attack_t = 0\r\n    }\r\n  }\r\n\r\n  if ability.state == .CHARGING {\r\n    charge_dur: float = 0.4\r\n    ability.attack_t += dt / charge_dur\r\n\r\n    //calculate the positions behind the player, and lerp towards them\r\n    end_positions := make([dynamic]float3, context.temp_allocator)\r\n    arc: float = math.PI / 1.1\r\n    interval := arc / float(ability.num_swords)\r\n    player_rads := math.atan2(-player.forward.x, player.forward.z) - math.PI * 0.88\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + player_rads\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)} * 2\r\n      append(&end_positions, player.position + offset + float3_up)\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], end_positions[i], dt * 30)\r\n    }\r\n\r\n    if ability.attack_t > 1 {\r\n      ability.state = .ATTACKING\r\n      ability.attack_t = 0\r\n      mouse_pos := get_mouse_pos_world() + float3_up\r\n      ability.mouse_pos = mouse_pos\r\n      dir := mouse_pos - player.position\r\n      length := linalg.length(dir)\r\n      if length > ability.attack_range {\r\n        ability.mouse_pos = player.position + norm(dir) * ability.attack_range\r\n      }\r\n    }\r\n  }\r\n\r\n  if ability.state == .ATTACKING {\r\n    attack_dur: float = 0.5\r\n    ability.attack_t += dt / attack_dur\r\n\r\n    for &p in ability.positions {\r\n      p = linalg.lerp(p, ability.mouse_pos, ability.attack_t)\r\n    }\r\n    if ability.attack_t > 1 {\r\n      ability.state = .COOLDOWN\r\n    }\r\n  }\r\n}\r\n\r\n\r\ndraw_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n  model := entity_models[ability.idx_model]\r\n  if ability.state == .ROTATING_SHIELDS || ability.state == .CHARGING || ability.state == .ATTACKING {\r\n    for pos in ability.positions {\r\n      rl.DrawSphereWires(pos, 0.2, 2, 10, rl.RED)\r\n    }\r\n  }\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 146
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA4A8AAAAAAADgDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpEaXZpbmVfV2VhcG9ucyA6OiBzdHJ1Y3QgewogIHNoaWVsZF9zdGF0OiAgICAgIGZsb2F0LAogIGN1cnJlbnRfcm90YXRpb246IGZsb2F0LAogIHJvdGF0aW9uX3NwZWVkOiAgIGZsb2F0LAogIHRzX3N3b3Jkc19hY3RpdmU6IGZsb2F0LAogIHRzX3JlYWR5OiAgICAgICAgIGZsb2F0LAogIGF0dGFja19yYW5nZTogICAgIGZsb2F0LAogIGF0dGFja190OiAgICAgICAgIGZsb2F0LCAvL2xlcnAgZnJvbSBhdHRhY2sgcG9zaXRpb24gdG8gYXR0YWNrIHRhcmdldCAwLTEKICBudW1fc3dvcmRzOiAgICAgICBpbnQsCiAgc3RhdGU6ICAgICAgICAgICAgRGl2aW5lX1dlYXBvbnNfU3RhdGUsCiAgaWR4X21vZGVsOiAgICAgICAgaW50LAogIG1vdXNlX3BvczogICAgICAgIGZsb2F0MywKICB0eXBlOiAgICAgICAgICAgICBBYmlsaXR5VHlwZSwKICBwb3NpdGlvbnM6ICAgICAgICBbZHluYW1pY11mbG9hdDMsCn0KCkRpdmluZV9XZWFwb25zX1N0YXRlIDo6IGVudW0gYnl0ZSB7CiAgUkVBRFkgPSAwLAogIENPT0xET1dOLAogIFJPVEFUSU5HX1NISUVMRFMsCiAgQ0hBUkdJTkcsCiAgQVRUQUNLSU5HLAp9CgpAKHByaXZhdGUgPSAiZmlsZSIpCmFiaWxpdHk6IERpdmluZV9XZWFwb25zCgpjcmVhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CgogIGFiaWxpdHkgPSBEaXZpbmVfV2VhcG9ucyB7CiAgICBhdHRhY2tfcmFuZ2UgICA9IDUsCiAgICByb3RhdGlvbl9zcGVlZCA9IDYsCiAgICBzdGF0ZSAgICAgICAgICA9IC5SRUFEWSwKICAgIG51bV9zd29yZHMgICAgID0gNiwKICB9CgogIC8vdGhpcyBpcyBzdHVwaWQKICBhYmlsaXR5LnBvc2l0aW9ucyA9IG1ha2UoW2R5bmFtaWNdZmxvYXQzKQogIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICBhcHBlbmQoJmFiaWxpdHkucG9zaXRpb25zLCBmbG9hdDNfemVybykKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZGl2aW5lX3dlYXBvbnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2RpdmluZV93ZWFwb25zKQp9CgovLyBTdW1tb24gc3Bpbm5pbmcgc2hpZWxkcywgYWZ0ZXIgeCBzZWNvbmRzLCBjbGljayBhZ2FpbiB0byB0dXJuIHNoaWVsZHMgaW50byBzd29yZHMuIFN3b3JkcyBmbHkgYmVoaW5kIHlvdSwgYW5kIHRoZW4gcXVpY2tseSBhdHRhY2tzIGluIGZyb250IG9mIHlvdQp1cGRhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9wbGF5ZXIoKQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5DT09MRE9XTiB7CiAgICBpZiB0aW1lX25vdyA+IGFiaWxpdHkudHNfcmVhZHkgewogICAgICBhYmlsaXR5LnN0YXRlID0gLlJFQURZCiAgICB9CiAgfQoKICAvL3RyaWdnZXIKICBpZiBhYmlsaXR5LnN0YXRlID09IC5SRUFEWSAmJiBjb3JlX2lucHV0LmFiaWxpdHlfdHJpZ2dlcmVkICYmIHRpbWVfbm93ID4gYWJpbGl0eS50c19yZWFkeSB7CiAgICBhYmlsaXR5LnN0YXRlID0gLlJPVEFUSU5HX1NISUVMRFMKICAgIGFiaWxpdHkudHNfc3dvcmRzX2FjdGl2ZSA9IHRpbWVfbm93ICsgMC41CiAgICBwbGF5ZXIuc3RhdHMuc2hpZWxkICs9IGFiaWxpdHkuc2hpZWxkX3N0YXQKCiAgICBmb3IgaSBpbiAwIC4uPCBhYmlsaXR5Lm51bV9zd29yZHMgewogICAgICBhYmlsaXR5LnBvc2l0aW9uc1tpXSA9IHBsYXllci5wb3NpdGlvbiArIGZsb2F0M191cAogICAgfQogIH0KCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuUk9UQVRJTkdfU0hJRUxEUyB7CgogICAgYWJpbGl0eS5jdXJyZW50X3JvdGF0aW9uICs9IGR0CiAgICBpbnRlcnZhbCA6PSAobWF0aC5QSSAqIDIpIC8gZmxvYXQoYWJpbGl0eS5udW1fc3dvcmRzKQogICAgZm9yIGkgaW4gMCAuLjwgYWJpbGl0eS5udW1fc3dvcmRzIHsKICAgICAgYW5nbGUgOj0gZmxvYXQoaSkgKiBpbnRlcnZhbCArIGFiaWxpdHkuY3VycmVudF9yb3RhdGlvbgogICAgICBvZmZzZXQgOj0gZmxvYXQze21hdGguY29zKGFuZ2xlKSwgMCwgbWF0aC5zaW4oYW5nbGUpfQogICAgICBhYmlsaXR5LnBvc2l0aW9uc1tpXSA9IGxpbmFsZy5sZXJwKGFiaWxpdHkucG9zaXRpb25zW2ldLCBwbGF5ZXIucG9zaXRpb24gKyBvZmZzZXQgKiAyICsgZmxvYXQzX3VwLCBkdCAqIDMwKQogICAgfQoKICAgIGlmIHRpbWVfbm93ID4gYWJpbGl0eS50c19zd29yZHNfYWN0aXZlICYmIGNvcmVfaW5wdXQuYWJpbGl0eV90cmlnZ2VyZWQgewogICAgICBhYmlsaXR5LnN0YXRlID0gLkNIQVJHSU5HCiAgICAgIGFiaWxpdHkuYXR0YWNrX3QgPSAwCiAgICB9CiAgfQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5DSEFSR0lORyB7CiAgICBjaGFyZ2VfZHVyOiBmbG9hdCA9IDAuNAogICAgYWJpbGl0eS5hdHRhY2tfdCArPSBkdCAvIGNoYXJnZV9kdXIKCiAgICAvL2NhbGN1bGF0ZSB0aGUgcG9zaXRpb25zIGJlaGluZCB0aGUgcGxheWVyLCBhbmQgbGVycCB0b3dhcmRzIHRoZW0KICAgIGVuZF9wb3NpdGlvbnMgOj0gbWFrZShbZHluYW1pY11mbG9hdDMsIGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgICBhcmM6IGZsb2F0ID0gbWF0aC5QSSAvIDEuMQogICAgaW50ZXJ2YWwgOj0gYXJjIC8gZmxvYXQoYWJpbGl0eS5udW1fc3dvcmRzKQogICAgcGxheWVyX3JhZHMgOj0gbWF0aC5hdGFuMigtcGxheWVyLmZvcndhcmQueCwgcGxheWVyLmZvcndhcmQueikgLSBtYXRoLlBJICogMC44OAoKICAgIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICAgIGFuZ2xlIDo9IGZsb2F0KGkpICogaW50ZXJ2YWwgKyBwbGF5ZXJfcmFkcwogICAgICBvZmZzZXQgOj0gZmxvYXQze21hdGguY29zKGFuZ2xlKSwgMCwgbWF0aC5zaW4oYW5nbGUpfSAqIDIKICAgICAgYXBwZW5kKCZlbmRfcG9zaXRpb25zLCBwbGF5ZXIucG9zaXRpb24gKyBvZmZzZXQgKyBmbG9hdDNfdXApCiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gbGluYWxnLmxlcnAoYWJpbGl0eS5wb3NpdGlvbnNbaV0sIGVuZF9wb3NpdGlvbnNbaV0sIGR0ICogMzApCiAgICB9CgogICAgaWYgYWJpbGl0eS5hdHRhY2tfdCA+IDEgewogICAgICBhYmlsaXR5LnN0YXRlID0gLkFUVEFDS0lORwogICAgICBhYmlsaXR5LmF0dGFja190ID0gMAogICAgICBtb3VzZV9wb3MgOj0gZ2V0X21vdXNlX3Bvc193b3JsZCgpICsgZmxvYXQzX3VwCiAgICAgIGFiaWxpdHkubW91c2VfcG9zID0gbW91c2VfcG9zCiAgICAgIGRpciA6PSBtb3VzZV9wb3MgLSBwbGF5ZXIucG9zaXRpb24KICAgICAgbGVuZ3RoIDo9IGxpbmFsZy5sZW5ndGgoZGlyKQogICAgICBpZiBsZW5ndGggPiBhYmlsaXR5LmF0dGFja19yYW5nZSB7CiAgICAgICAgYWJpbGl0eS5tb3VzZV9wb3MgPSBwbGF5ZXIucG9zaXRpb24gKyBub3JtKGRpcikgKiBhYmlsaXR5LmF0dGFja19yYW5nZQogICAgICB9CiAgICB9CiAgfQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5BVFRBQ0tJTkcgewogICAgYXR0YWNrX2R1cjogZmxvYXQgPSAwLjUKICAgIGFiaWxpdHkuYXR0YWNrX3QgKz0gZHQgLyBhdHRhY2tfZHVyCgogICAgZm9yICZwIGluIGFiaWxpdHkucG9zaXRpb25zIHsKICAgICAgcCA9IGxpbmFsZy5sZXJwKHAsIGFiaWxpdHkubW91c2VfcG9zLCBhYmlsaXR5LmF0dGFja190KQogICAgfQogICAgaWYgYWJpbGl0eS5hdHRhY2tfdCA+IDEgewogICAgICBhYmlsaXR5LnN0YXRlID0gLkNPT0xET1dOCiAgICB9CiAgfQp9CgoKZHJhd19kaXZpbmVfd2VhcG9ucyA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X3BsYXllcigpCiAgbW9kZWwgOj0gZW50aXR5X21vZGVsc1thYmlsaXR5LmlkeF9tb2RlbF0KICBpZiBhYmlsaXR5LnN0YXRlID09IC5ST1RBVElOR19TSElFTERTIHx8IGFiaWxpdHkuc3RhdGUgPT0gLkNIQVJHSU5HIHx8IGFiaWxpdHkuc3RhdGUgPT0gLkFUVEFDS0lORyB7CiAgICBmb3IgcG9zIGluIGFiaWxpdHkucG9zaXRpb25zIHsKICAgICAgcmwuRHJhd1NwaGVyZVdpcmVzKHBvcywgMC4yLCAyLCAxMCwgcmwuUkVEKQogICAgfQogIH0KfQo",
					"AgAAAAAAAAABAAAAEwcAAAAAAAATBwAAAAAAAAAAAAAAAPC/AQAAAAEAAAD/BAAAAAAAAP8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					828,
					1,
					"insert",
					{
						"characters": "\n//"
					},
					"AwAAAL8EAAAAAAAAwAQAAAAAAAAAAAAAwAQAAAAAAADBBAAAAAAAAAAAAADBBAAAAAAAAMIEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAEwcAAAAAAAATBwAAAAAAAAAAAAAAAPC/AQAAAAEAAAC/BAAAAAAAAL8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					830,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\nDivine_Weapons :: struct {\r\n  shield_stat:      float,\r\n  current_rotation: float,\r\n  rotation_speed:   float,\r\n  ts_swords_active: float,\r\n  ts_ready:         float,\r\n  attack_range:     float,\r\n  attack_t:         float, //lerp from attack position to attack target 0-1\r\n  num_swords:       int,\r\n  state:            Divine_Weapons_State,\r\n  idx_model:        int,\r\n  mouse_pos:        float3,\r\n  type:             AbilityType,\r\n  positions:        [dynamic]float3,\r\n}\r\n\r\nDivine_Weapons_State :: enum byte {\r\n  READY = 0,\r\n  COOLDOWN,\r\n  ROTATING_SHIELDS,\r\n  CHARGING,\r\n  ATTACKING,\r\n}\r\n\r\n@(private = \"file\")\r\nability: Divine_Weapons\r\n\r\ncreate_divine_weapons :: proc() \r\n{\r\n\r\n  ability = Divine_Weapons {\r\n    attack_range   = 5,\r\n    rotation_speed = 6,\r\n    state          = .READY,\r\n    num_swords     = 6,\r\n  }\r\n\r\n  //this is stupid\r\n  ability.positions = make([dynamic]float3)\r\n  for i in 0 ..< ability.num_swords {\r\n    append(&ability.positions, float3_zero)\r\n  }\r\n\r\n  append(&update_procs, update_divine_weapons)\r\n  append(&draw_procs, draw_divine_weapons)\r\n}\r\n\r\n// Summon spinning shields, after x seconds, click again to turn shields into swords.\r\n// Swords fly behind you, and then quickly attacks in front of you\r\nupdate_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n\r\n  if ability.state == .COOLDOWN {\r\n    if time_now > ability.ts_ready {\r\n      ability.state = .READY\r\n    }\r\n  }\r\n\r\n  //trigger\r\n  if ability.state == .READY && core_input.ability_triggered && time_now > ability.ts_ready {\r\n    ability.state = .ROTATING_SHIELDS\r\n    ability.ts_swords_active = time_now + 0.5\r\n    player.stats.shield += ability.shield_stat\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      ability.positions[i] = player.position + float3_up\r\n    }\r\n  }\r\n\r\n  if ability.state == .ROTATING_SHIELDS {\r\n\r\n    ability.current_rotation += dt\r\n    interval := (math.PI * 2) / float(ability.num_swords)\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + ability.current_rotation\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)}\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], player.position + offset * 2 + float3_up, dt * 30)\r\n    }\r\n\r\n    if time_now > ability.ts_swords_active && core_input.ability_triggered {\r\n      ability.state = .CHARGING\r\n      ability.attack_t = 0\r\n    }\r\n  }\r\n\r\n  if ability.state == .CHARGING {\r\n    charge_dur: float = 0.4\r\n    ability.attack_t += dt / charge_dur\r\n\r\n    //calculate the positions behind the player, and lerp towards them\r\n    end_positions := make([dynamic]float3, context.temp_allocator)\r\n    arc: float = math.PI / 1.1\r\n    interval := arc / float(ability.num_swords)\r\n    player_rads := math.atan2(-player.forward.x, player.forward.z) - math.PI * 0.88\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + player_rads\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)} * 2\r\n      append(&end_positions, player.position + offset + float3_up)\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], end_positions[i], dt * 30)\r\n    }\r\n\r\n    if ability.attack_t > 1 {\r\n      ability.state = .ATTACKING\r\n      ability.attack_t = 0\r\n      mouse_pos := get_mouse_pos_world() + float3_up\r\n      ability.mouse_pos = mouse_pos\r\n      dir := mouse_pos - player.position\r\n      length := linalg.length(dir)\r\n      if length > ability.attack_range {\r\n        ability.mouse_pos = player.position + norm(dir) * ability.attack_range\r\n      }\r\n    }\r\n  }\r\n\r\n  if ability.state == .ATTACKING {\r\n    attack_dur: float = 0.5\r\n    ability.attack_t += dt / attack_dur\r\n\r\n    for &p in ability.positions {\r\n      p = linalg.lerp(p, ability.mouse_pos, ability.attack_t)\r\n    }\r\n    if ability.attack_t > 1 {\r\n      ability.state = .COOLDOWN\r\n    }\r\n  }\r\n}\r\n\r\n\r\ndraw_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n  model := entity_models[ability.idx_model]\r\n  if ability.state == .ROTATING_SHIELDS || ability.state == .CHARGING || ability.state == .ATTACKING {\r\n    for pos in ability.positions {\r\n      rl.DrawSphereWires(pos, 0.2, 2, 10, rl.RED)\r\n    }\r\n  }\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 147
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA4w8AAAAAAADjDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpEaXZpbmVfV2VhcG9ucyA6OiBzdHJ1Y3QgewogIHNoaWVsZF9zdGF0OiAgICAgIGZsb2F0LAogIGN1cnJlbnRfcm90YXRpb246IGZsb2F0LAogIHJvdGF0aW9uX3NwZWVkOiAgIGZsb2F0LAogIHRzX3N3b3Jkc19hY3RpdmU6IGZsb2F0LAogIHRzX3JlYWR5OiAgICAgICAgIGZsb2F0LAogIGF0dGFja19yYW5nZTogICAgIGZsb2F0LAogIGF0dGFja190OiAgICAgICAgIGZsb2F0LCAvL2xlcnAgZnJvbSBhdHRhY2sgcG9zaXRpb24gdG8gYXR0YWNrIHRhcmdldCAwLTEKICBudW1fc3dvcmRzOiAgICAgICBpbnQsCiAgc3RhdGU6ICAgICAgICAgICAgRGl2aW5lX1dlYXBvbnNfU3RhdGUsCiAgaWR4X21vZGVsOiAgICAgICAgaW50LAogIG1vdXNlX3BvczogICAgICAgIGZsb2F0MywKICB0eXBlOiAgICAgICAgICAgICBBYmlsaXR5VHlwZSwKICBwb3NpdGlvbnM6ICAgICAgICBbZHluYW1pY11mbG9hdDMsCn0KCkRpdmluZV9XZWFwb25zX1N0YXRlIDo6IGVudW0gYnl0ZSB7CiAgUkVBRFkgPSAwLAogIENPT0xET1dOLAogIFJPVEFUSU5HX1NISUVMRFMsCiAgQ0hBUkdJTkcsCiAgQVRUQUNLSU5HLAp9CgpAKHByaXZhdGUgPSAiZmlsZSIpCmFiaWxpdHk6IERpdmluZV9XZWFwb25zCgpjcmVhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CgogIGFiaWxpdHkgPSBEaXZpbmVfV2VhcG9ucyB7CiAgICBhdHRhY2tfcmFuZ2UgICA9IDUsCiAgICByb3RhdGlvbl9zcGVlZCA9IDYsCiAgICBzdGF0ZSAgICAgICAgICA9IC5SRUFEWSwKICAgIG51bV9zd29yZHMgICAgID0gNiwKICB9CgogIC8vdGhpcyBpcyBzdHVwaWQKICBhYmlsaXR5LnBvc2l0aW9ucyA9IG1ha2UoW2R5bmFtaWNdZmxvYXQzKQogIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICBhcHBlbmQoJmFiaWxpdHkucG9zaXRpb25zLCBmbG9hdDNfemVybykKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZGl2aW5lX3dlYXBvbnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2RpdmluZV93ZWFwb25zKQp9CgovLyBTdW1tb24gc3Bpbm5pbmcgc2hpZWxkcywgYWZ0ZXIgeCBzZWNvbmRzLCBjbGljayBhZ2FpbiB0byB0dXJuIHNoaWVsZHMgaW50byBzd29yZHMuCi8vIFN3b3JkcyBmbHkgYmVoaW5kIHlvdSwgYW5kIHRoZW4gcXVpY2tseSBhdHRhY2tzIGluIGZyb250IG9mIHlvdQp1cGRhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9wbGF5ZXIoKQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5DT09MRE9XTiB7CiAgICBpZiB0aW1lX25vdyA+IGFiaWxpdHkudHNfcmVhZHkgewogICAgICBhYmlsaXR5LnN0YXRlID0gLlJFQURZCiAgICB9CiAgfQoKICAvL3RyaWdnZXIKICBpZiBhYmlsaXR5LnN0YXRlID09IC5SRUFEWSAmJiBjb3JlX2lucHV0LmFiaWxpdHlfdHJpZ2dlcmVkICYmIHRpbWVfbm93ID4gYWJpbGl0eS50c19yZWFkeSB7CiAgICBhYmlsaXR5LnN0YXRlID0gLlJPVEFUSU5HX1NISUVMRFMKICAgIGFiaWxpdHkudHNfc3dvcmRzX2FjdGl2ZSA9IHRpbWVfbm93ICsgMC41CiAgICBwbGF5ZXIuc3RhdHMuc2hpZWxkICs9IGFiaWxpdHkuc2hpZWxkX3N0YXQKCiAgICBmb3IgaSBpbiAwIC4uPCBhYmlsaXR5Lm51bV9zd29yZHMgewogICAgICBhYmlsaXR5LnBvc2l0aW9uc1tpXSA9IHBsYXllci5wb3NpdGlvbiArIGZsb2F0M191cAogICAgfQogIH0KCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuUk9UQVRJTkdfU0hJRUxEUyB7CgogICAgYWJpbGl0eS5jdXJyZW50X3JvdGF0aW9uICs9IGR0CiAgICBpbnRlcnZhbCA6PSAobWF0aC5QSSAqIDIpIC8gZmxvYXQoYWJpbGl0eS5udW1fc3dvcmRzKQogICAgZm9yIGkgaW4gMCAuLjwgYWJpbGl0eS5udW1fc3dvcmRzIHsKICAgICAgYW5nbGUgOj0gZmxvYXQoaSkgKiBpbnRlcnZhbCArIGFiaWxpdHkuY3VycmVudF9yb3RhdGlvbgogICAgICBvZmZzZXQgOj0gZmxvYXQze21hdGguY29zKGFuZ2xlKSwgMCwgbWF0aC5zaW4oYW5nbGUpfQogICAgICBhYmlsaXR5LnBvc2l0aW9uc1tpXSA9IGxpbmFsZy5sZXJwKGFiaWxpdHkucG9zaXRpb25zW2ldLCBwbGF5ZXIucG9zaXRpb24gKyBvZmZzZXQgKiAyICsgZmxvYXQzX3VwLCBkdCAqIDMwKQogICAgfQoKICAgIGlmIHRpbWVfbm93ID4gYWJpbGl0eS50c19zd29yZHNfYWN0aXZlICYmIGNvcmVfaW5wdXQuYWJpbGl0eV90cmlnZ2VyZWQgewogICAgICBhYmlsaXR5LnN0YXRlID0gLkNIQVJHSU5HCiAgICAgIGFiaWxpdHkuYXR0YWNrX3QgPSAwCiAgICB9CiAgfQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5DSEFSR0lORyB7CiAgICBjaGFyZ2VfZHVyOiBmbG9hdCA9IDAuNAogICAgYWJpbGl0eS5hdHRhY2tfdCArPSBkdCAvIGNoYXJnZV9kdXIKCiAgICAvL2NhbGN1bGF0ZSB0aGUgcG9zaXRpb25zIGJlaGluZCB0aGUgcGxheWVyLCBhbmQgbGVycCB0b3dhcmRzIHRoZW0KICAgIGVuZF9wb3NpdGlvbnMgOj0gbWFrZShbZHluYW1pY11mbG9hdDMsIGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgICBhcmM6IGZsb2F0ID0gbWF0aC5QSSAvIDEuMQogICAgaW50ZXJ2YWwgOj0gYXJjIC8gZmxvYXQoYWJpbGl0eS5udW1fc3dvcmRzKQogICAgcGxheWVyX3JhZHMgOj0gbWF0aC5hdGFuMigtcGxheWVyLmZvcndhcmQueCwgcGxheWVyLmZvcndhcmQueikgLSBtYXRoLlBJICogMC44OAoKICAgIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICAgIGFuZ2xlIDo9IGZsb2F0KGkpICogaW50ZXJ2YWwgKyBwbGF5ZXJfcmFkcwogICAgICBvZmZzZXQgOj0gZmxvYXQze21hdGguY29zKGFuZ2xlKSwgMCwgbWF0aC5zaW4oYW5nbGUpfSAqIDIKICAgICAgYXBwZW5kKCZlbmRfcG9zaXRpb25zLCBwbGF5ZXIucG9zaXRpb24gKyBvZmZzZXQgKyBmbG9hdDNfdXApCiAgICAgIGFiaWxpdHkucG9zaXRpb25zW2ldID0gbGluYWxnLmxlcnAoYWJpbGl0eS5wb3NpdGlvbnNbaV0sIGVuZF9wb3NpdGlvbnNbaV0sIGR0ICogMzApCiAgICB9CgogICAgaWYgYWJpbGl0eS5hdHRhY2tfdCA+IDEgewogICAgICBhYmlsaXR5LnN0YXRlID0gLkFUVEFDS0lORwogICAgICBhYmlsaXR5LmF0dGFja190ID0gMAogICAgICBtb3VzZV9wb3MgOj0gZ2V0X21vdXNlX3Bvc193b3JsZCgpICsgZmxvYXQzX3VwCiAgICAgIGFiaWxpdHkubW91c2VfcG9zID0gbW91c2VfcG9zCiAgICAgIGRpciA6PSBtb3VzZV9wb3MgLSBwbGF5ZXIucG9zaXRpb24KICAgICAgbGVuZ3RoIDo9IGxpbmFsZy5sZW5ndGgoZGlyKQogICAgICBpZiBsZW5ndGggPiBhYmlsaXR5LmF0dGFja19yYW5nZSB7CiAgICAgICAgYWJpbGl0eS5tb3VzZV9wb3MgPSBwbGF5ZXIucG9zaXRpb24gKyBub3JtKGRpcikgKiBhYmlsaXR5LmF0dGFja19yYW5nZQogICAgICB9CiAgICB9CiAgfQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5BVFRBQ0tJTkcgewogICAgYXR0YWNrX2R1cjogZmxvYXQgPSAwLjUKICAgIGFiaWxpdHkuYXR0YWNrX3QgKz0gZHQgLyBhdHRhY2tfZHVyCgogICAgZm9yICZwIGluIGFiaWxpdHkucG9zaXRpb25zIHsKICAgICAgcCA9IGxpbmFsZy5sZXJwKHAsIGFiaWxpdHkubW91c2VfcG9zLCBhYmlsaXR5LmF0dGFja190KQogICAgfQogICAgaWYgYWJpbGl0eS5hdHRhY2tfdCA+IDEgewogICAgICBhYmlsaXR5LnN0YXRlID0gLkNPT0xET1dOCiAgICB9CiAgfQp9CgoKZHJhd19kaXZpbmVfd2VhcG9ucyA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X3BsYXllcigpCiAgbW9kZWwgOj0gZW50aXR5X21vZGVsc1thYmlsaXR5LmlkeF9tb2RlbF0KICBpZiBhYmlsaXR5LnN0YXRlID09IC5ST1RBVElOR19TSElFTERTIHx8IGFiaWxpdHkuc3RhdGUgPT0gLkNIQVJHSU5HIHx8IGFiaWxpdHkuc3RhdGUgPT0gLkFUVEFDS0lORyB7CiAgICBmb3IgcG9zIGluIGFiaWxpdHkucG9zaXRpb25zIHsKICAgICAgcmwuRHJhd1NwaGVyZVdpcmVzKHBvcywgMC4yLCAyLCAxMCwgcmwuUkVEKQogICAgfQogIH0KfQo",
					"AgAAAAAAAAABAAAAFgcAAAAAAAAWBwAAAAAAAAAAAAAAAPC/AQAAAAEAAADCBAAAAAAAAMIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					840,
					3,
					"left_delete",
					null,
					"AwAAAGsGAAAAAAAAawYAAAAAAAABAAAANWoGAAAAAAAAagYAAAAAAAABAAAALmkGAAAAAAAAaQYAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAFgcAAAAAAAAWBwAAAAAAAAAAAAAAAPC/AQAAAAEAAABsBgAAAAAAAGwGAAAAAAAAAAAAAAAA8L8"
				],
				[
					841,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAGkGAAAAAAAAagYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAEwcAAAAAAAATBwAAAAAAAAAAAAAAAPC/AQAAAAEAAABpBgAAAAAAAGkGAAAAAAAAAAAAAAAA8L8"
				],
				[
					844,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\nDivine_Weapons :: struct {\r\n  shield_stat:      float,\r\n  current_rotation: float,\r\n  rotation_speed:   float,\r\n  ts_swords_active: float,\r\n  ts_ready:         float,\r\n  attack_range:     float,\r\n  attack_t:         float, //lerp from attack position to attack target 0-1\r\n  num_swords:       int,\r\n  state:            Divine_Weapons_State,\r\n  idx_model:        int,\r\n  mouse_pos:        float3,\r\n  type:             AbilityType,\r\n  positions:        [dynamic]float3,\r\n}\r\n\r\nDivine_Weapons_State :: enum byte {\r\n  READY = 0,\r\n  COOLDOWN,\r\n  ROTATING_SHIELDS,\r\n  CHARGING,\r\n  ATTACKING,\r\n}\r\n\r\n@(private = \"file\")\r\nability: Divine_Weapons\r\n\r\ncreate_divine_weapons :: proc() \r\n{\r\n\r\n  ability = Divine_Weapons {\r\n    attack_range   = 5,\r\n    rotation_speed = 6,\r\n    state          = .READY,\r\n    num_swords     = 6,\r\n  }\r\n\r\n  //this is stupid\r\n  ability.positions = make([dynamic]float3)\r\n  for i in 0 ..< ability.num_swords {\r\n    append(&ability.positions, float3_zero)\r\n  }\r\n\r\n  append(&update_procs, update_divine_weapons)\r\n  append(&draw_procs, draw_divine_weapons)\r\n}\r\n\r\n// Summon spinning shields, after x seconds, click again to turn shields into swords.\r\n// Swords fly behind you, and then quickly attacks in front of you\r\nupdate_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n\r\n  if ability.state == .COOLDOWN {\r\n    if time_now > ability.ts_ready {\r\n      ability.state = .READY\r\n    }\r\n  }\r\n\r\n  //trigger\r\n  if ability.state == .READY && core_input.ability_triggered && time_now > ability.ts_ready {\r\n    ability.state = .ROTATING_SHIELDS\r\n    ability.ts_swords_active = time_now + 2\r\n    player.stats.shield += ability.shield_stat\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      ability.positions[i] = player.position + float3_up\r\n    }\r\n  }\r\n\r\n  if ability.state == .ROTATING_SHIELDS {\r\n\r\n    ability.current_rotation += dt\r\n    interval := (math.PI * 2) / float(ability.num_swords)\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + ability.current_rotation\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)}\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], player.position + offset * 2 + float3_up, dt * 30)\r\n    }\r\n\r\n    if time_now > ability.ts_swords_active && core_input.ability_triggered {\r\n      ability.state = .CHARGING\r\n      ability.attack_t = 0\r\n    }\r\n  }\r\n\r\n  if ability.state == .CHARGING {\r\n    charge_dur: float = 0.4\r\n    ability.attack_t += dt / charge_dur\r\n\r\n    //calculate the positions behind the player, and lerp towards them\r\n    end_positions := make([dynamic]float3, context.temp_allocator)\r\n    arc: float = math.PI / 1.1\r\n    interval := arc / float(ability.num_swords)\r\n    player_rads := math.atan2(-player.forward.x, player.forward.z) - math.PI * 0.88\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + player_rads\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)} * 2\r\n      append(&end_positions, player.position + offset + float3_up)\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], end_positions[i], dt * 30)\r\n    }\r\n\r\n    if ability.attack_t > 1 {\r\n      ability.state = .ATTACKING\r\n      ability.attack_t = 0\r\n      mouse_pos := get_mouse_pos_world() + float3_up\r\n      ability.mouse_pos = mouse_pos\r\n      dir := mouse_pos - player.position\r\n      length := linalg.length(dir)\r\n      if length > ability.attack_range {\r\n        ability.mouse_pos = player.position + norm(dir) * ability.attack_range\r\n      }\r\n    }\r\n  }\r\n\r\n  if ability.state == .ATTACKING {\r\n    attack_dur: float = 0.5\r\n    ability.attack_t += dt / attack_dur\r\n\r\n    for &p in ability.positions {\r\n      p = linalg.lerp(p, ability.mouse_pos, ability.attack_t)\r\n    }\r\n    if ability.attack_t > 1 {\r\n      ability.state = .COOLDOWN\r\n    }\r\n  }\r\n}\r\n\r\n\r\ndraw_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n  model := entity_models[ability.idx_model]\r\n  if ability.state == .ROTATING_SHIELDS || ability.state == .CHARGING || ability.state == .ATTACKING {\r\n    for pos in ability.positions {\r\n      rl.DrawSphereWires(pos, 0.2, 2, 10, rl.RED)\r\n    }\r\n  }\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 147
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA4Q8AAAAAAADhDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpEaXZpbmVfV2VhcG9ucyA6OiBzdHJ1Y3QgewogIHNoaWVsZF9zdGF0OiAgICAgIGZsb2F0LAogIGN1cnJlbnRfcm90YXRpb246IGZsb2F0LAogIHJvdGF0aW9uX3NwZWVkOiAgIGZsb2F0LAogIHRzX3N3b3Jkc19hY3RpdmU6IGZsb2F0LAogIHRzX3JlYWR5OiAgICAgICAgIGZsb2F0LAogIGF0dGFja19yYW5nZTogICAgIGZsb2F0LAogIGF0dGFja190OiAgICAgICAgIGZsb2F0LCAvL2xlcnAgZnJvbSBhdHRhY2sgcG9zaXRpb24gdG8gYXR0YWNrIHRhcmdldCAwLTEKICBudW1fc3dvcmRzOiAgICAgICBpbnQsCiAgc3RhdGU6ICAgICAgICAgICAgRGl2aW5lX1dlYXBvbnNfU3RhdGUsCiAgaWR4X21vZGVsOiAgICAgICAgaW50LAogIG1vdXNlX3BvczogICAgICAgIGZsb2F0MywKICB0eXBlOiAgICAgICAgICAgICBBYmlsaXR5VHlwZSwKICBwb3NpdGlvbnM6ICAgICAgICBbZHluYW1pY11mbG9hdDMsCn0KCkRpdmluZV9XZWFwb25zX1N0YXRlIDo6IGVudW0gYnl0ZSB7CiAgUkVBRFkgPSAwLAogIENPT0xET1dOLAogIFJPVEFUSU5HX1NISUVMRFMsCiAgQ0hBUkdJTkcsCiAgQVRUQUNLSU5HLAp9CgpAKHByaXZhdGUgPSAiZmlsZSIpCmFiaWxpdHk6IERpdmluZV9XZWFwb25zCgpjcmVhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CgogIGFiaWxpdHkgPSBEaXZpbmVfV2VhcG9ucyB7CiAgICBhdHRhY2tfcmFuZ2UgICA9IDUsCiAgICByb3RhdGlvbl9zcGVlZCA9IDYsCiAgICBzdGF0ZSAgICAgICAgICA9IC5SRUFEWSwKICAgIG51bV9zd29yZHMgICAgID0gNiwKICB9CgogIC8vdGhpcyBpcyBzdHVwaWQKICBhYmlsaXR5LnBvc2l0aW9ucyA9IG1ha2UoW2R5bmFtaWNdZmxvYXQzKQogIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICBhcHBlbmQoJmFiaWxpdHkucG9zaXRpb25zLCBmbG9hdDNfemVybykKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZGl2aW5lX3dlYXBvbnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2RpdmluZV93ZWFwb25zKQp9CgovLyBTdW1tb24gc3Bpbm5pbmcgc2hpZWxkcywgYWZ0ZXIgeCBzZWNvbmRzLCBjbGljayBhZ2FpbiB0byB0dXJuIHNoaWVsZHMgaW50byBzd29yZHMuCi8vIFN3b3JkcyBmbHkgYmVoaW5kIHlvdSwgYW5kIHRoZW4gcXVpY2tseSBhdHRhY2tzIGluIGZyb250IG9mIHlvdQp1cGRhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9wbGF5ZXIoKQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5DT09MRE9XTiB7CiAgICBpZiB0aW1lX25vdyA+IGFiaWxpdHkudHNfcmVhZHkgewogICAgICBhYmlsaXR5LnN0YXRlID0gLlJFQURZCiAgICB9CiAgfQoKICAvL3RyaWdnZXIKICBpZiBhYmlsaXR5LnN0YXRlID09IC5SRUFEWSAmJiBjb3JlX2lucHV0LmFiaWxpdHlfdHJpZ2dlcmVkICYmIHRpbWVfbm93ID4gYWJpbGl0eS50c19yZWFkeSB7CiAgICBhYmlsaXR5LnN0YXRlID0gLlJPVEFUSU5HX1NISUVMRFMKICAgIGFiaWxpdHkudHNfc3dvcmRzX2FjdGl2ZSA9IHRpbWVfbm93ICsgMgogICAgcGxheWVyLnN0YXRzLnNoaWVsZCArPSBhYmlsaXR5LnNoaWVsZF9zdGF0CgogICAgZm9yIGkgaW4gMCAuLjwgYWJpbGl0eS5udW1fc3dvcmRzIHsKICAgICAgYWJpbGl0eS5wb3NpdGlvbnNbaV0gPSBwbGF5ZXIucG9zaXRpb24gKyBmbG9hdDNfdXAKICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJPVEFUSU5HX1NISUVMRFMgewoKICAgIGFiaWxpdHkuY3VycmVudF9yb3RhdGlvbiArPSBkdAogICAgaW50ZXJ2YWwgOj0gKG1hdGguUEkgKiAyKSAvIGZsb2F0KGFiaWxpdHkubnVtX3N3b3JkcykKICAgIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICAgIGFuZ2xlIDo9IGZsb2F0KGkpICogaW50ZXJ2YWwgKyBhYmlsaXR5LmN1cnJlbnRfcm90YXRpb24KICAgICAgb2Zmc2V0IDo9IGZsb2F0M3ttYXRoLmNvcyhhbmdsZSksIDAsIG1hdGguc2luKGFuZ2xlKX0KICAgICAgYWJpbGl0eS5wb3NpdGlvbnNbaV0gPSBsaW5hbGcubGVycChhYmlsaXR5LnBvc2l0aW9uc1tpXSwgcGxheWVyLnBvc2l0aW9uICsgb2Zmc2V0ICogMiArIGZsb2F0M191cCwgZHQgKiAzMCkKICAgIH0KCiAgICBpZiB0aW1lX25vdyA+IGFiaWxpdHkudHNfc3dvcmRzX2FjdGl2ZSAmJiBjb3JlX2lucHV0LmFiaWxpdHlfdHJpZ2dlcmVkIHsKICAgICAgYWJpbGl0eS5zdGF0ZSA9IC5DSEFSR0lORwogICAgICBhYmlsaXR5LmF0dGFja190ID0gMAogICAgfQogIH0KCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuQ0hBUkdJTkcgewogICAgY2hhcmdlX2R1cjogZmxvYXQgPSAwLjQKICAgIGFiaWxpdHkuYXR0YWNrX3QgKz0gZHQgLyBjaGFyZ2VfZHVyCgogICAgLy9jYWxjdWxhdGUgdGhlIHBvc2l0aW9ucyBiZWhpbmQgdGhlIHBsYXllciwgYW5kIGxlcnAgdG93YXJkcyB0aGVtCiAgICBlbmRfcG9zaXRpb25zIDo9IG1ha2UoW2R5bmFtaWNdZmxvYXQzLCBjb250ZXh0LnRlbXBfYWxsb2NhdG9yKQogICAgYXJjOiBmbG9hdCA9IG1hdGguUEkgLyAxLjEKICAgIGludGVydmFsIDo9IGFyYyAvIGZsb2F0KGFiaWxpdHkubnVtX3N3b3JkcykKICAgIHBsYXllcl9yYWRzIDo9IG1hdGguYXRhbjIoLXBsYXllci5mb3J3YXJkLngsIHBsYXllci5mb3J3YXJkLnopIC0gbWF0aC5QSSAqIDAuODgKCiAgICBmb3IgaSBpbiAwIC4uPCBhYmlsaXR5Lm51bV9zd29yZHMgewogICAgICBhbmdsZSA6PSBmbG9hdChpKSAqIGludGVydmFsICsgcGxheWVyX3JhZHMKICAgICAgb2Zmc2V0IDo9IGZsb2F0M3ttYXRoLmNvcyhhbmdsZSksIDAsIG1hdGguc2luKGFuZ2xlKX0gKiAyCiAgICAgIGFwcGVuZCgmZW5kX3Bvc2l0aW9ucywgcGxheWVyLnBvc2l0aW9uICsgb2Zmc2V0ICsgZmxvYXQzX3VwKQogICAgICBhYmlsaXR5LnBvc2l0aW9uc1tpXSA9IGxpbmFsZy5sZXJwKGFiaWxpdHkucG9zaXRpb25zW2ldLCBlbmRfcG9zaXRpb25zW2ldLCBkdCAqIDMwKQogICAgfQoKICAgIGlmIGFiaWxpdHkuYXR0YWNrX3QgPiAxIHsKICAgICAgYWJpbGl0eS5zdGF0ZSA9IC5BVFRBQ0tJTkcKICAgICAgYWJpbGl0eS5hdHRhY2tfdCA9IDAKICAgICAgbW91c2VfcG9zIDo9IGdldF9tb3VzZV9wb3Nfd29ybGQoKSArIGZsb2F0M191cAogICAgICBhYmlsaXR5Lm1vdXNlX3BvcyA9IG1vdXNlX3BvcwogICAgICBkaXIgOj0gbW91c2VfcG9zIC0gcGxheWVyLnBvc2l0aW9uCiAgICAgIGxlbmd0aCA6PSBsaW5hbGcubGVuZ3RoKGRpcikKICAgICAgaWYgbGVuZ3RoID4gYWJpbGl0eS5hdHRhY2tfcmFuZ2UgewogICAgICAgIGFiaWxpdHkubW91c2VfcG9zID0gcGxheWVyLnBvc2l0aW9uICsgbm9ybShkaXIpICogYWJpbGl0eS5hdHRhY2tfcmFuZ2UKICAgICAgfQogICAgfQogIH0KCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuQVRUQUNLSU5HIHsKICAgIGF0dGFja19kdXI6IGZsb2F0ID0gMC41CiAgICBhYmlsaXR5LmF0dGFja190ICs9IGR0IC8gYXR0YWNrX2R1cgoKICAgIGZvciAmcCBpbiBhYmlsaXR5LnBvc2l0aW9ucyB7CiAgICAgIHAgPSBsaW5hbGcubGVycChwLCBhYmlsaXR5Lm1vdXNlX3BvcywgYWJpbGl0eS5hdHRhY2tfdCkKICAgIH0KICAgIGlmIGFiaWxpdHkuYXR0YWNrX3QgPiAxIHsKICAgICAgYWJpbGl0eS5zdGF0ZSA9IC5DT09MRE9XTgogICAgfQogIH0KfQoKCmRyYXdfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9wbGF5ZXIoKQogIG1vZGVsIDo9IGVudGl0eV9tb2RlbHNbYWJpbGl0eS5pZHhfbW9kZWxdCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuUk9UQVRJTkdfU0hJRUxEUyB8fCBhYmlsaXR5LnN0YXRlID09IC5DSEFSR0lORyB8fCBhYmlsaXR5LnN0YXRlID09IC5BVFRBQ0tJTkcgewogICAgZm9yIHBvcyBpbiBhYmlsaXR5LnBvc2l0aW9ucyB7CiAgICAgIHJsLkRyYXdTcGhlcmVXaXJlcyhwb3MsIDAuMiwgMiwgMTAsIHJsLlJFRCkKICAgIH0KICB9Cn0K",
					"AgAAAAAAAAABAAAAFAcAAAAAAAAUBwAAAAAAAAAAAAAAAPC/AQAAAAEAAABrBgAAAAAAAGsGAAAAAAAAAAAAAAAA8L8"
				],
				[
					848,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\nDivine_Weapons :: struct {\r\n  shield_stat:      float,\r\n  current_rotation: float,\r\n  rotation_speed:   float,\r\n  ts_swords_active: float,\r\n  ts_ready:         float,\r\n  attack_range:     float,\r\n  attack_t:         float, //lerp from attack position to attack target 0-1\r\n  num_swords:       int,\r\n  state:            Divine_Weapons_State,\r\n  idx_model:        int,\r\n  mouse_pos:        float3,\r\n  type:             AbilityType,\r\n  positions:        [dynamic]float3,\r\n}\r\n\r\nDivine_Weapons_State :: enum byte {\r\n  READY = 0,\r\n  COOLDOWN,\r\n  ROTATING_SHIELDS,\r\n  CHARGING,\r\n  ATTACKING,\r\n}\r\n\r\n@(private = \"file\")\r\nability: Divine_Weapons\r\n\r\ncreate_divine_weapons :: proc() \r\n{\r\n\r\n  ability = Divine_Weapons {\r\n    attack_range   = 5,\r\n    rotation_speed = 6,\r\n    state          = .READY,\r\n    num_swords     = 6,\r\n  }\r\n\r\n  //this is stupid\r\n  ability.positions = make([dynamic]float3)\r\n  for i in 0 ..< ability.num_swords {\r\n    append(&ability.positions, float3_zero)\r\n  }\r\n\r\n  append(&update_procs, update_divine_weapons)\r\n  append(&draw_procs, draw_divine_weapons)\r\n}\r\n\r\n// Summon spinning shields, after x seconds, click again to turn shields into swords.\r\n// Swords fly behind you, and then quickly attacks in front of you\r\nupdate_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n\r\n  if ability.state == .COOLDOWN {\r\n    if time_now > ability.ts_ready {\r\n      ability.state = .READY\r\n    }\r\n  }\r\n\r\n  //trigger\r\n  if ability.state == .READY && core_input.ability_triggered && time_now > ability.ts_ready {\r\n    ability.state = .ROTATING_SHIELDS\r\n    ability.ts_swords_active = time_now + 2\r\n    player.stats.shield += ability.shield_stat\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      ability.positions[i] = player.position + float3_up\r\n    }\r\n  }\r\n\r\n  if ability.state == .ROTATING_SHIELDS {\r\n\r\n    ability.current_rotation += dt\r\n    interval := (math.PI * 2) / float(ability.num_swords)\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + ability.current_rotation\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)}\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], player.position + offset * 2 + float3_up, dt * 30)\r\n    }\r\n\r\n    if time_now > ability.ts_swords_active && core_input.ability_triggered {\r\n      ability.state = .CHARGING\r\n      ability.attack_t = 0\r\n    }\r\n  }\r\n\r\n  if ability.state == .CHARGING {\r\n    charge_dur: float = 0.4\r\n    ability.attack_t += dt / charge_dur\r\n\r\n    //calculate the positions behind the player, and lerp towards them\r\n    end_positions := make([dynamic]float3, context.temp_allocator)\r\n    arc: float = math.PI / 1.1\r\n    interval := arc / float(ability.num_swords)\r\n    player_rads := math.atan2(-player.forward.x, player.forward.z) - math.PI * 0.88\r\n\r\n    for i in 0 ..< ability.num_swords {\r\n      angle := float(i) * interval + player_rads\r\n      offset := float3{math.cos(angle), 0, math.sin(angle)} * 2\r\n      append(&end_positions, player.position + offset + float3_up)\r\n      ability.positions[i] = linalg.lerp(ability.positions[i], end_positions[i], dt * 30)\r\n    }\r\n\r\n    if ability.attack_t > 1 {\r\n      ability.state = .ATTACKING\r\n      ability.attack_t = 0\r\n      mouse_pos := get_mouse_pos_world() + float3_up\r\n      ability.mouse_pos = mouse_pos\r\n      dir := mouse_pos - player.position\r\n      length := linalg.length(dir)\r\n      if length > ability.attack_range {\r\n        ability.mouse_pos = player.position + norm(dir) * ability.attack_range\r\n      }\r\n    }\r\n  }\r\n\r\n  if ability.state == .ATTACKING {\r\n    attack_dur: float = 0.5\r\n    ability.attack_t += dt / attack_dur\r\n\r\n    for &p in ability.positions {\r\n      p = linalg.lerp(p, ability.mouse_pos, ability.attack_t)\r\n    }\r\n    if ability.attack_t > 1 {\r\n      ability.state = .COOLDOWN\r\n    }\r\n  }\r\n}\r\n\r\n\r\ndraw_divine_weapons :: proc() \r\n{\r\n  player := get_player()\r\n  model := entity_models[ability.idx_model]\r\n  if ability.state == .ROTATING_SHIELDS || ability.state == .CHARGING || ability.state == .ATTACKING {\r\n    for pos in ability.positions {\r\n      rl.DrawSphereWires(pos, 0.2, 2, 10, rl.RED)\r\n    }\r\n  }\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 147
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA4Q8AAAAAAADhDwAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgpEaXZpbmVfV2VhcG9ucyA6OiBzdHJ1Y3QgewogIHNoaWVsZF9zdGF0OiAgICAgIGZsb2F0LAogIGN1cnJlbnRfcm90YXRpb246IGZsb2F0LAogIHJvdGF0aW9uX3NwZWVkOiAgIGZsb2F0LAogIHRzX3N3b3Jkc19hY3RpdmU6IGZsb2F0LAogIHRzX3JlYWR5OiAgICAgICAgIGZsb2F0LAogIGF0dGFja19yYW5nZTogICAgIGZsb2F0LAogIGF0dGFja190OiAgICAgICAgIGZsb2F0LCAvL2xlcnAgZnJvbSBhdHRhY2sgcG9zaXRpb24gdG8gYXR0YWNrIHRhcmdldCAwLTEKICBudW1fc3dvcmRzOiAgICAgICBpbnQsCiAgc3RhdGU6ICAgICAgICAgICAgRGl2aW5lX1dlYXBvbnNfU3RhdGUsCiAgaWR4X21vZGVsOiAgICAgICAgaW50LAogIG1vdXNlX3BvczogICAgICAgIGZsb2F0MywKICB0eXBlOiAgICAgICAgICAgICBBYmlsaXR5VHlwZSwKICBwb3NpdGlvbnM6ICAgICAgICBbZHluYW1pY11mbG9hdDMsCn0KCkRpdmluZV9XZWFwb25zX1N0YXRlIDo6IGVudW0gYnl0ZSB7CiAgUkVBRFkgPSAwLAogIENPT0xET1dOLAogIFJPVEFUSU5HX1NISUVMRFMsCiAgQ0hBUkdJTkcsCiAgQVRUQUNLSU5HLAp9CgpAKHByaXZhdGUgPSAiZmlsZSIpCmFiaWxpdHk6IERpdmluZV9XZWFwb25zCgpjcmVhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CgogIGFiaWxpdHkgPSBEaXZpbmVfV2VhcG9ucyB7CiAgICBhdHRhY2tfcmFuZ2UgICA9IDUsCiAgICByb3RhdGlvbl9zcGVlZCA9IDYsCiAgICBzdGF0ZSAgICAgICAgICA9IC5SRUFEWSwKICAgIG51bV9zd29yZHMgICAgID0gNiwKICB9CgogIC8vdGhpcyBpcyBzdHVwaWQKICBhYmlsaXR5LnBvc2l0aW9ucyA9IG1ha2UoW2R5bmFtaWNdZmxvYXQzKQogIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICBhcHBlbmQoJmFiaWxpdHkucG9zaXRpb25zLCBmbG9hdDNfemVybykKICB9CgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfZGl2aW5lX3dlYXBvbnMpCiAgYXBwZW5kKCZkcmF3X3Byb2NzLCBkcmF3X2RpdmluZV93ZWFwb25zKQp9CgovLyBTdW1tb24gc3Bpbm5pbmcgc2hpZWxkcywgYWZ0ZXIgeCBzZWNvbmRzLCBjbGljayBhZ2FpbiB0byB0dXJuIHNoaWVsZHMgaW50byBzd29yZHMuCi8vIFN3b3JkcyBmbHkgYmVoaW5kIHlvdSwgYW5kIHRoZW4gcXVpY2tseSBhdHRhY2tzIGluIGZyb250IG9mIHlvdQp1cGRhdGVfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9wbGF5ZXIoKQoKICBpZiBhYmlsaXR5LnN0YXRlID09IC5DT09MRE9XTiB7CiAgICBpZiB0aW1lX25vdyA+IGFiaWxpdHkudHNfcmVhZHkgewogICAgICBhYmlsaXR5LnN0YXRlID0gLlJFQURZCiAgICB9CiAgfQoKICAvL3RyaWdnZXIKICBpZiBhYmlsaXR5LnN0YXRlID09IC5SRUFEWSAmJiBjb3JlX2lucHV0LmFiaWxpdHlfdHJpZ2dlcmVkICYmIHRpbWVfbm93ID4gYWJpbGl0eS50c19yZWFkeSB7CiAgICBhYmlsaXR5LnN0YXRlID0gLlJPVEFUSU5HX1NISUVMRFMKICAgIGFiaWxpdHkudHNfc3dvcmRzX2FjdGl2ZSA9IHRpbWVfbm93ICsgMgogICAgcGxheWVyLnN0YXRzLnNoaWVsZCArPSBhYmlsaXR5LnNoaWVsZF9zdGF0CgogICAgZm9yIGkgaW4gMCAuLjwgYWJpbGl0eS5udW1fc3dvcmRzIHsKICAgICAgYWJpbGl0eS5wb3NpdGlvbnNbaV0gPSBwbGF5ZXIucG9zaXRpb24gKyBmbG9hdDNfdXAKICAgIH0KICB9CgogIGlmIGFiaWxpdHkuc3RhdGUgPT0gLlJPVEFUSU5HX1NISUVMRFMgewoKICAgIGFiaWxpdHkuY3VycmVudF9yb3RhdGlvbiArPSBkdAogICAgaW50ZXJ2YWwgOj0gKG1hdGguUEkgKiAyKSAvIGZsb2F0KGFiaWxpdHkubnVtX3N3b3JkcykKICAgIGZvciBpIGluIDAgLi48IGFiaWxpdHkubnVtX3N3b3JkcyB7CiAgICAgIGFuZ2xlIDo9IGZsb2F0KGkpICogaW50ZXJ2YWwgKyBhYmlsaXR5LmN1cnJlbnRfcm90YXRpb24KICAgICAgb2Zmc2V0IDo9IGZsb2F0M3ttYXRoLmNvcyhhbmdsZSksIDAsIG1hdGguc2luKGFuZ2xlKX0KICAgICAgYWJpbGl0eS5wb3NpdGlvbnNbaV0gPSBsaW5hbGcubGVycChhYmlsaXR5LnBvc2l0aW9uc1tpXSwgcGxheWVyLnBvc2l0aW9uICsgb2Zmc2V0ICogMiArIGZsb2F0M191cCwgZHQgKiAzMCkKICAgIH0KCiAgICBpZiB0aW1lX25vdyA+IGFiaWxpdHkudHNfc3dvcmRzX2FjdGl2ZSAmJiBjb3JlX2lucHV0LmFiaWxpdHlfdHJpZ2dlcmVkIHsKICAgICAgYWJpbGl0eS5zdGF0ZSA9IC5DSEFSR0lORwogICAgICBhYmlsaXR5LmF0dGFja190ID0gMAogICAgfQogIH0KCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuQ0hBUkdJTkcgewogICAgY2hhcmdlX2R1cjogZmxvYXQgPSAwLjQKICAgIGFiaWxpdHkuYXR0YWNrX3QgKz0gZHQgLyBjaGFyZ2VfZHVyCgogICAgLy9jYWxjdWxhdGUgdGhlIHBvc2l0aW9ucyBiZWhpbmQgdGhlIHBsYXllciwgYW5kIGxlcnAgdG93YXJkcyB0aGVtCiAgICBlbmRfcG9zaXRpb25zIDo9IG1ha2UoW2R5bmFtaWNdZmxvYXQzLCBjb250ZXh0LnRlbXBfYWxsb2NhdG9yKQogICAgYXJjOiBmbG9hdCA9IG1hdGguUEkgLyAxLjEKICAgIGludGVydmFsIDo9IGFyYyAvIGZsb2F0KGFiaWxpdHkubnVtX3N3b3JkcykKICAgIHBsYXllcl9yYWRzIDo9IG1hdGguYXRhbjIoLXBsYXllci5mb3J3YXJkLngsIHBsYXllci5mb3J3YXJkLnopIC0gbWF0aC5QSSAqIDAuODgKCiAgICBmb3IgaSBpbiAwIC4uPCBhYmlsaXR5Lm51bV9zd29yZHMgewogICAgICBhbmdsZSA6PSBmbG9hdChpKSAqIGludGVydmFsICsgcGxheWVyX3JhZHMKICAgICAgb2Zmc2V0IDo9IGZsb2F0M3ttYXRoLmNvcyhhbmdsZSksIDAsIG1hdGguc2luKGFuZ2xlKX0gKiAyCiAgICAgIGFwcGVuZCgmZW5kX3Bvc2l0aW9ucywgcGxheWVyLnBvc2l0aW9uICsgb2Zmc2V0ICsgZmxvYXQzX3VwKQogICAgICBhYmlsaXR5LnBvc2l0aW9uc1tpXSA9IGxpbmFsZy5sZXJwKGFiaWxpdHkucG9zaXRpb25zW2ldLCBlbmRfcG9zaXRpb25zW2ldLCBkdCAqIDMwKQogICAgfQoKICAgIGlmIGFiaWxpdHkuYXR0YWNrX3QgPiAxIHsKICAgICAgYWJpbGl0eS5zdGF0ZSA9IC5BVFRBQ0tJTkcKICAgICAgYWJpbGl0eS5hdHRhY2tfdCA9IDAKICAgICAgbW91c2VfcG9zIDo9IGdldF9tb3VzZV9wb3Nfd29ybGQoKSArIGZsb2F0M191cAogICAgICBhYmlsaXR5Lm1vdXNlX3BvcyA9IG1vdXNlX3BvcwogICAgICBkaXIgOj0gbW91c2VfcG9zIC0gcGxheWVyLnBvc2l0aW9uCiAgICAgIGxlbmd0aCA6PSBsaW5hbGcubGVuZ3RoKGRpcikKICAgICAgaWYgbGVuZ3RoID4gYWJpbGl0eS5hdHRhY2tfcmFuZ2UgewogICAgICAgIGFiaWxpdHkubW91c2VfcG9zID0gcGxheWVyLnBvc2l0aW9uICsgbm9ybShkaXIpICogYWJpbGl0eS5hdHRhY2tfcmFuZ2UKICAgICAgfQogICAgfQogIH0KCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuQVRUQUNLSU5HIHsKICAgIGF0dGFja19kdXI6IGZsb2F0ID0gMC41CiAgICBhYmlsaXR5LmF0dGFja190ICs9IGR0IC8gYXR0YWNrX2R1cgoKICAgIGZvciAmcCBpbiBhYmlsaXR5LnBvc2l0aW9ucyB7CiAgICAgIHAgPSBsaW5hbGcubGVycChwLCBhYmlsaXR5Lm1vdXNlX3BvcywgYWJpbGl0eS5hdHRhY2tfdCkKICAgIH0KICAgIGlmIGFiaWxpdHkuYXR0YWNrX3QgPiAxIHsKICAgICAgYWJpbGl0eS5zdGF0ZSA9IC5DT09MRE9XTgogICAgfQogIH0KfQoKCmRyYXdfZGl2aW5lX3dlYXBvbnMgOjogcHJvYygpIAp7CiAgcGxheWVyIDo9IGdldF9wbGF5ZXIoKQogIG1vZGVsIDo9IGVudGl0eV9tb2RlbHNbYWJpbGl0eS5pZHhfbW9kZWxdCiAgaWYgYWJpbGl0eS5zdGF0ZSA9PSAuUk9UQVRJTkdfU0hJRUxEUyB8fCBhYmlsaXR5LnN0YXRlID09IC5DSEFSR0lORyB8fCBhYmlsaXR5LnN0YXRlID09IC5BVFRBQ0tJTkcgewogICAgZm9yIHBvcyBpbiBhYmlsaXR5LnBvc2l0aW9ucyB7CiAgICAgIHJsLkRyYXdTcGhlcmVXaXJlcyhwb3MsIDAuMiwgMiwgMTAsIHJsLlJFRCkKICAgIH0KICB9Cn0K",
					"AgAAAAAAAAABAAAAFAcAAAAAAAAUBwAAAAAAAAAAAAAAAPC/AQAAAAEAAAAlBQAAAAAAACUFAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "shotgun.odin",
			"settings":
			{
				"buffer_size": 3814,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAALkCAAAAAAAAuQIAAAAAAAABAAAAMw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAALkCAAAAAAAAugIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\n\r\nShotgun :: struct {\r\n  damage:        float,\r\n  shot_interval: float,\r\n  cone_angle:    float,\r\n  range:         float,\r\n  tsReady:       float,\r\n  idxModel:      int,\r\n  recoil:        Recoil,\r\n  id:            int,\r\n}\r\n\r\nRecoil :: struct {\r\n  t:          float,\r\n  recoilKick: float,\r\n  spring:     float,\r\n}\r\n\r\nConeVFX :: struct {\r\n  lifetime: float,\r\n  center:   float3,\r\n  forward:  float3,\r\n  range:    float,\r\n  angle:    float,\r\n}\r\n\r\nshotgun: Shotgun\r\nshotgunvfxses: [dynamic]ConeVFX\r\n\r\ncreate_shotgun :: proc() \r\n{\r\n  shotgun = Shotgun {\r\n    damage = 50,\r\n    shot_interval = 1.5,\r\n    cone_angle = 60,\r\n    range = 4,\r\n    recoil = Recoil{recoilKick = 0.4, spring = 1},\r\n  }\r\n\r\n  shotgun.idxModel = load_entity_model(\"crossbow.glb\")\r\n  assign_material_all_mats(&entity_models[shotgun.idxModel], synty_mat)\r\n\r\n  append(&update_procs, update_shotgun)\r\n  append(&draw_procs, draw_shotgun)\r\n  shotgunvfxses = make([dynamic]ConeVFX)\r\n}\r\n\r\nupdate_shotgun :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  child_pos := float3_up + entity_right(player) * 0.25\r\n\r\n  if core_input.shootTriggered && time_now > shotgun.tsReady {\r\n    shotgun.tsReady = time_now + shotgun.shot_interval\r\n    targets := get_enemies_in_cone(player.position, player.forward, shotgun.cone_angle, shotgun.range)\r\n    for h in targets {\r\n      target := get_entity(h)\r\n      target.stats.health -= shotgun.damage\r\n\r\n      //DEATH\r\n      if target.stats.health <= 0 {\r\n        target.flags += {.dead}\r\n\r\n        fire_event(\r\n          DeathEvent {\r\n            damage = shotgun.damage,\r\n            direction = player.forward,\r\n            flags = target.flags,\r\n            pos = target.position,\r\n            weaponId = shotgun.id,\r\n          },\r\n        )\r\n      }\r\n    }\r\n\r\n    knockback(player, -player.forward, 15, 3)\r\n\r\n    camera_shake(.small)\r\n    shotgun.recoil.t = 1\r\n\r\n    //temp vfx\r\n    cone := ConeVFX {\r\n      lifetime = 1.0,\r\n      center   = player.position,\r\n      forward  = player.forward,\r\n      range    = shotgun.range,\r\n      angle    = shotgun.cone_angle,\r\n    }\r\n    append(&shotgunvfxses, cone)\r\n  }\r\n\r\n\r\n  //RECOIL ANIMATION\r\n  t, kick_offset := weapon_recoil(shotgun.recoil)\r\n  shotgun.recoil.t = t\r\n  entity_models[shotgun.idxModel].transform = matrix_trs(\r\n    linalg.mul(player.rotation, kick_offset) + child_pos,\r\n    float3_one * 2,\r\n    linalg.mul(player.rotation, rl.QuaternionFromMatrix(rl.MatrixRotateY(RAD_180))),\r\n  )\r\n}\r\n\r\nweapon_recoil :: proc(recoil: Recoil) -> (t: float, kick_offset: float3) \r\n{\r\n  kickMax := float3{0, 0, recoil.recoilKick}\r\n  ease := ease_cubic_in(recoil.t)\r\n  offset := linalg.lerp(float3_zero, kickMax, ease)\r\n  return linalg.clamp(recoil.t - dt * recoil.spring, 0, 1), offset\r\n}\r\n\r\ndraw_shotgun :: proc() \r\n{\r\n  player := get_player()\r\n  rl.DrawModel(entity_models[shotgun.idxModel], player.position, 1, rl.WHITE)\r\n\r\n  for &v, i in shotgunvfxses {\r\n    v.lifetime -= dt\r\n    half_angle := radians(v.angle / 2)\r\n    fwd := v.forward\r\n    p1 := v.center + rl.Vector3RotateByAxisAngle(fwd, float3_up, half_angle) * v.range\r\n    p2 := v.center + rl.Vector3RotateByAxisAngle(fwd, float3_up, -half_angle) * v.range\r\n    rl.DrawLine3D(v.center + float3_up, p1 + float3_up, rl.RED)\r\n    rl.DrawLine3D(v.center + float3_up, p2 + float3_up, rl.RED)\r\n\r\n    if v.lifetime < 0 {\r\n      unordered_remove(&shotgunvfxses, i)\r\n    }\r\n  }\r\n}\r\n\r\n\r\nget_enemies_in_cone :: proc(pos, forward: float3, angle, range: float) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  half_angle := radians(angle / 2)\r\n  cos_half_angle := math.cos(half_angle)\r\n  for h in enemies {\r\n    e := get_entity(h)\r\n    dir := e.position - pos\r\n    dot := linalg.dot(norm(dir), forward)\r\n    if dot >= cos_half_angle && linalg.length(dir) < range {\r\n      append(&list, h)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 153
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA5g4AAAAAAADmDgAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgoKU2hvdGd1biA6OiBzdHJ1Y3QgewogIGRhbWFnZTogICAgICAgIGZsb2F0LAogIHNob3RfaW50ZXJ2YWw6IGZsb2F0LAogIGNvbmVfYW5nbGU6ICAgIGZsb2F0LAogIHJhbmdlOiAgICAgICAgIGZsb2F0LAogIHRzUmVhZHk6ICAgICAgIGZsb2F0LAogIGlkeE1vZGVsOiAgICAgIGludCwKICByZWNvaWw6ICAgICAgICBSZWNvaWwsCiAgaWQ6ICAgICAgICAgICAgaW50LAp9CgpSZWNvaWwgOjogc3RydWN0IHsKICB0OiAgICAgICAgICBmbG9hdCwKICByZWNvaWxLaWNrOiBmbG9hdCwKICBzcHJpbmc6ICAgICBmbG9hdCwKfQoKQ29uZVZGWCA6OiBzdHJ1Y3QgewogIGxpZmV0aW1lOiBmbG9hdCwKICBjZW50ZXI6ICAgZmxvYXQzLAogIGZvcndhcmQ6ICBmbG9hdDMsCiAgcmFuZ2U6ICAgIGZsb2F0LAogIGFuZ2xlOiAgICBmbG9hdCwKfQoKc2hvdGd1bjogU2hvdGd1bgpzaG90Z3VudmZ4c2VzOiBbZHluYW1pY11Db25lVkZYCgpjcmVhdGVfc2hvdGd1biA6OiBwcm9jKCkgCnsKICBzaG90Z3VuID0gU2hvdGd1biB7CiAgICBkYW1hZ2UgPSA1MCwKICAgIHNob3RfaW50ZXJ2YWwgPSAxLjUsCiAgICBjb25lX2FuZ2xlID0gNjAsCiAgICByYW5nZSA9IDQsCiAgICByZWNvaWwgPSBSZWNvaWx7cmVjb2lsS2ljayA9IDAuNCwgc3ByaW5nID0gMX0sCiAgfQoKICBzaG90Z3VuLmlkeE1vZGVsID0gbG9hZF9lbnRpdHlfbW9kZWwoImNyb3NzYm93LmdsYiIpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZlbnRpdHlfbW9kZWxzW3Nob3RndW4uaWR4TW9kZWxdLCBzeW50eV9tYXQpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfc2hvdGd1bikKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfc2hvdGd1bikKICBzaG90Z3VudmZ4c2VzID0gbWFrZShbZHluYW1pY11Db25lVkZYKQp9Cgp1cGRhdGVfc2hvdGd1biA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIGNoaWxkX3BvcyA6PSBmbG9hdDNfdXAgKyBlbnRpdHlfcmlnaHQocGxheWVyKSAqIDAuMjUKCiAgaWYgY29yZV9pbnB1dC5zaG9vdFRyaWdnZXJlZCAmJiB0aW1lX25vdyA+IHNob3RndW4udHNSZWFkeSB7CiAgICBzaG90Z3VuLnRzUmVhZHkgPSB0aW1lX25vdyArIHNob3RndW4uc2hvdF9pbnRlcnZhbAogICAgdGFyZ2V0cyA6PSBnZXRfZW5lbWllc19pbl9jb25lKHBsYXllci5wb3NpdGlvbiwgcGxheWVyLmZvcndhcmQsIHNob3RndW4uY29uZV9hbmdsZSwgc2hvdGd1bi5yYW5nZSkKICAgIGZvciBoIGluIHRhcmdldHMgewogICAgICB0YXJnZXQgOj0gZ2V0X2VudGl0eShoKQogICAgICB0YXJnZXQuc3RhdHMuaGVhbHRoIC09IHNob3RndW4uZGFtYWdlCgogICAgICAvL0RFQVRICiAgICAgIGlmIHRhcmdldC5zdGF0cy5oZWFsdGggPD0gMCB7CiAgICAgICAgdGFyZ2V0LmZsYWdzICs9IHsuZGVhZH0KCiAgICAgICAgZmlyZV9ldmVudCgKICAgICAgICAgIERlYXRoRXZlbnQgewogICAgICAgICAgICBkYW1hZ2UgPSBzaG90Z3VuLmRhbWFnZSwKICAgICAgICAgICAgZGlyZWN0aW9uID0gcGxheWVyLmZvcndhcmQsCiAgICAgICAgICAgIGZsYWdzID0gdGFyZ2V0LmZsYWdzLAogICAgICAgICAgICBwb3MgPSB0YXJnZXQucG9zaXRpb24sCiAgICAgICAgICAgIHdlYXBvbklkID0gc2hvdGd1bi5pZCwKICAgICAgICAgIH0sCiAgICAgICAgKQogICAgICB9CiAgICB9CgogICAga25vY2tiYWNrKHBsYXllciwgLXBsYXllci5mb3J3YXJkLCAxNSwgMykKCiAgICBjYW1lcmFfc2hha2UoLnNtYWxsKQogICAgc2hvdGd1bi5yZWNvaWwudCA9IDEKCiAgICAvL3RlbXAgdmZ4CiAgICBjb25lIDo9IENvbmVWRlggewogICAgICBsaWZldGltZSA9IDEuMCwKICAgICAgY2VudGVyICAgPSBwbGF5ZXIucG9zaXRpb24sCiAgICAgIGZvcndhcmQgID0gcGxheWVyLmZvcndhcmQsCiAgICAgIHJhbmdlICAgID0gc2hvdGd1bi5yYW5nZSwKICAgICAgYW5nbGUgICAgPSBzaG90Z3VuLmNvbmVfYW5nbGUsCiAgICB9CiAgICBhcHBlbmQoJnNob3RndW52ZnhzZXMsIGNvbmUpCiAgfQoKCiAgLy9SRUNPSUwgQU5JTUFUSU9OCiAgdCwga2lja19vZmZzZXQgOj0gd2VhcG9uX3JlY29pbChzaG90Z3VuLnJlY29pbCkKICBzaG90Z3VuLnJlY29pbC50ID0gdAogIGVudGl0eV9tb2RlbHNbc2hvdGd1bi5pZHhNb2RlbF0udHJhbnNmb3JtID0gbWF0cml4X3RycygKICAgIGxpbmFsZy5tdWwocGxheWVyLnJvdGF0aW9uLCBraWNrX29mZnNldCkgKyBjaGlsZF9wb3MsCiAgICBmbG9hdDNfb25lICogMiwKICAgIGxpbmFsZy5tdWwocGxheWVyLnJvdGF0aW9uLCBybC5RdWF0ZXJuaW9uRnJvbU1hdHJpeChybC5NYXRyaXhSb3RhdGVZKFJBRF8xODApKSksCiAgKQp9Cgp3ZWFwb25fcmVjb2lsIDo6IHByb2MocmVjb2lsOiBSZWNvaWwpIC0+ICh0OiBmbG9hdCwga2lja19vZmZzZXQ6IGZsb2F0MykgCnsKICBraWNrTWF4IDo9IGZsb2F0M3swLCAwLCByZWNvaWwucmVjb2lsS2lja30KICBlYXNlIDo9IGVhc2VfY3ViaWNfaW4ocmVjb2lsLnQpCiAgb2Zmc2V0IDo9IGxpbmFsZy5sZXJwKGZsb2F0M196ZXJvLCBraWNrTWF4LCBlYXNlKQogIHJldHVybiBsaW5hbGcuY2xhbXAocmVjb2lsLnQgLSBkdCAqIHJlY29pbC5zcHJpbmcsIDAsIDEpLCBvZmZzZXQKfQoKZHJhd19zaG90Z3VuIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKICBybC5EcmF3TW9kZWwoZW50aXR5X21vZGVsc1tzaG90Z3VuLmlkeE1vZGVsXSwgcGxheWVyLnBvc2l0aW9uLCAxLCBybC5XSElURSkKCiAgZm9yICZ2LCBpIGluIHNob3RndW52ZnhzZXMgewogICAgdi5saWZldGltZSAtPSBkdAogICAgaGFsZl9hbmdsZSA6PSByYWRpYW5zKHYuYW5nbGUgLyAyKQogICAgZndkIDo9IHYuZm9yd2FyZAogICAgcDEgOj0gdi5jZW50ZXIgKyBybC5WZWN0b3IzUm90YXRlQnlBeGlzQW5nbGUoZndkLCBmbG9hdDNfdXAsIGhhbGZfYW5nbGUpICogdi5yYW5nZQogICAgcDIgOj0gdi5jZW50ZXIgKyBybC5WZWN0b3IzUm90YXRlQnlBeGlzQW5nbGUoZndkLCBmbG9hdDNfdXAsIC1oYWxmX2FuZ2xlKSAqIHYucmFuZ2UKICAgIHJsLkRyYXdMaW5lM0Qodi5jZW50ZXIgKyBmbG9hdDNfdXAsIHAxICsgZmxvYXQzX3VwLCBybC5SRUQpCiAgICBybC5EcmF3TGluZTNEKHYuY2VudGVyICsgZmxvYXQzX3VwLCBwMiArIGZsb2F0M191cCwgcmwuUkVEKQoKICAgIGlmIHYubGlmZXRpbWUgPCAwIHsKICAgICAgdW5vcmRlcmVkX3JlbW92ZSgmc2hvdGd1bnZmeHNlcywgaSkKICAgIH0KICB9Cn0KCgpnZXRfZW5lbWllc19pbl9jb25lIDo6IHByb2MocG9zLCBmb3J3YXJkOiBmbG9hdDMsIGFuZ2xlLCByYW5nZTogZmxvYXQpIC0+IFtkeW5hbWljXUVudGl0eUhhbmRsZSAKewogIGxpc3QgOj0gbWFrZShbZHluYW1pY11FbnRpdHlIYW5kbGUsIGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgaGFsZl9hbmdsZSA6PSByYWRpYW5zKGFuZ2xlIC8gMikKICBjb3NfaGFsZl9hbmdsZSA6PSBtYXRoLmNvcyhoYWxmX2FuZ2xlKQogIGZvciBoIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGgpCiAgICBkaXIgOj0gZS5wb3NpdGlvbiAtIHBvcwogICAgZG90IDo9IGxpbmFsZy5kb3Qobm9ybShkaXIpLCBmb3J3YXJkKQogICAgaWYgZG90ID49IGNvc19oYWxmX2FuZ2xlICYmIGxpbmFsZy5sZW5ndGgoZGlyKSA8IHJhbmdlIHsKICAgICAgYXBwZW5kKCZsaXN0LCBoKQogICAgfQogIH0KICByZXR1cm4gbGlzdAp9Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\n\r\nShotgun :: struct {\r\n  damage:        float,\r\n  shot_interval: float,\r\n  cone_angle:    float,\r\n  range:         float,\r\n  tsReady:       float,\r\n  idxModel:      int,\r\n  recoil:        Recoil,\r\n  id:            int,\r\n}\r\n\r\nRecoil :: struct {\r\n  t:          float,\r\n  recoilKick: float,\r\n  spring:     float,\r\n}\r\n\r\nConeVFX :: struct {\r\n  lifetime: float,\r\n  center:   float3,\r\n  forward:  float3,\r\n  range:    float,\r\n  angle:    float,\r\n}\r\n\r\nshotgun: Shotgun\r\nshotgunvfxses: [dynamic]ConeVFX\r\n\r\ncreate_shotgun :: proc() \r\n{\r\n  shotgun = Shotgun {\r\n    damage = 50,\r\n    shot_interval = 1.5,\r\n    cone_angle = 60,\r\n    range = 4,\r\n    recoil = Recoil{recoilKick = 0.4, spring = 1},\r\n  }\r\n\r\n  shotgun.idxModel = load_entity_model(\"crossbow.glb\")\r\n  assign_material_all_mats(&entity_models[shotgun.idxModel], synty_mat)\r\n\r\n  append(&update_procs, update_shotgun)\r\n  append(&draw_procs, draw_shotgun)\r\n  shotgunvfxses = make([dynamic]ConeVFX)\r\n}\r\n\r\nupdate_shotgun :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  child_pos := float3_up + entity_right(player) * 0.25\r\n\r\n  if core_input.shootTriggered && time_now > shotgun.tsReady {\r\n    shotgun.tsReady = time_now + shotgun.shot_interval\r\n    targets := get_enemies_in_cone(player.position, player.forward, shotgun.cone_angle, shotgun.range)\r\n    for h in targets {\r\n      target := get_entity(h)\r\n      target.stats.health -= shotgun.damage\r\n\r\n      //DEATH\r\n      if target.stats.health <= 0 {\r\n        target.flags += {.dead}\r\n\r\n        fire_event(\r\n          DeathEvent {\r\n            damage = shotgun.damage,\r\n            direction = player.forward,\r\n            flags = target.flags,\r\n            pos = target.position,\r\n            weaponId = shotgun.id,\r\n          },\r\n        )\r\n      }\r\n    }\r\n\r\n    knockback(player, -player.forward, 15, 3)\r\n\r\n    camera_shake(.small)\r\n    shotgun.recoil.t = 1\r\n\r\n    //temp vfx\r\n    cone := ConeVFX {\r\n      lifetime = 1.0,\r\n      center   = player.position,\r\n      forward  = player.forward,\r\n      range    = shotgun.range,\r\n      angle    = shotgun.cone_angle,\r\n    }\r\n    append(&shotgunvfxses, cone)\r\n  }\r\n\r\n\r\n  //RECOIL ANIMATION\r\n  t, kick_offset := weapon_recoil(shotgun.recoil)\r\n  shotgun.recoil.t = t\r\n  entity_models[shotgun.idxModel].transform = matrix_trs(\r\n    linalg.mul(player.rotation, kick_offset) + child_pos,\r\n    float3_one * 2,\r\n    linalg.mul(player.rotation, rl.QuaternionFromMatrix(rl.MatrixRotateY(RAD_180))),\r\n  )\r\n}\r\n\r\nweapon_recoil :: proc(recoil: Recoil) -> (t: float, kick_offset: float3) \r\n{\r\n  kickMax := float3{0, 0, recoil.recoilKick}\r\n  ease := ease_cubic_in(recoil.t)\r\n  offset := linalg.lerp(float3_zero, kickMax, ease)\r\n  return linalg.clamp(recoil.t - dt * recoil.spring, 0, 1), offset\r\n}\r\n\r\ndraw_shotgun :: proc() \r\n{\r\n  player := get_player()\r\n  rl.DrawModel(entity_models[shotgun.idxModel], player.position, 1, rl.WHITE)\r\n\r\n  for &v, i in shotgunvfxses {\r\n    v.lifetime -= dt\r\n    half_angle := radians(v.angle / 2)\r\n    fwd := v.forward\r\n    p1 := v.center + rl.Vector3RotateByAxisAngle(fwd, float3_up, half_angle) * v.range\r\n    p2 := v.center + rl.Vector3RotateByAxisAngle(fwd, float3_up, -half_angle) * v.range\r\n    rl.DrawLine3D(v.center + float3_up, p1 + float3_up, rl.RED)\r\n    rl.DrawLine3D(v.center + float3_up, p2 + float3_up, rl.RED)\r\n\r\n    if v.lifetime < 0 {\r\n      unordered_remove(&shotgunvfxses, i)\r\n    }\r\n  }\r\n}\r\n\r\n\r\nget_enemies_in_cone :: proc(pos, forward: float3, angle, range: float) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  half_angle := radians(angle / 2)\r\n  cos_half_angle := math.cos(half_angle)\r\n  for h in enemies {\r\n    e := get_entity(h)\r\n    dir := e.position - pos\r\n    dot := linalg.dot(norm(dir), forward)\r\n    if dot >= cos_half_angle && linalg.length(dir) < range {\r\n      append(&list, h)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 153
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA5g4AAAAAAADmDgAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgoKU2hvdGd1biA6OiBzdHJ1Y3QgewogIGRhbWFnZTogICAgICAgIGZsb2F0LAogIHNob3RfaW50ZXJ2YWw6IGZsb2F0LAogIGNvbmVfYW5nbGU6ICAgIGZsb2F0LAogIHJhbmdlOiAgICAgICAgIGZsb2F0LAogIHRzUmVhZHk6ICAgICAgIGZsb2F0LAogIGlkeE1vZGVsOiAgICAgIGludCwKICByZWNvaWw6ICAgICAgICBSZWNvaWwsCiAgaWQ6ICAgICAgICAgICAgaW50LAp9CgpSZWNvaWwgOjogc3RydWN0IHsKICB0OiAgICAgICAgICBmbG9hdCwKICByZWNvaWxLaWNrOiBmbG9hdCwKICBzcHJpbmc6ICAgICBmbG9hdCwKfQoKQ29uZVZGWCA6OiBzdHJ1Y3QgewogIGxpZmV0aW1lOiBmbG9hdCwKICBjZW50ZXI6ICAgZmxvYXQzLAogIGZvcndhcmQ6ICBmbG9hdDMsCiAgcmFuZ2U6ICAgIGZsb2F0LAogIGFuZ2xlOiAgICBmbG9hdCwKfQoKc2hvdGd1bjogU2hvdGd1bgpzaG90Z3VudmZ4c2VzOiBbZHluYW1pY11Db25lVkZYCgpjcmVhdGVfc2hvdGd1biA6OiBwcm9jKCkgCnsKICBzaG90Z3VuID0gU2hvdGd1biB7CiAgICBkYW1hZ2UgPSA1MCwKICAgIHNob3RfaW50ZXJ2YWwgPSAxLjUsCiAgICBjb25lX2FuZ2xlID0gNjAsCiAgICByYW5nZSA9IDQsCiAgICByZWNvaWwgPSBSZWNvaWx7cmVjb2lsS2ljayA9IDAuNCwgc3ByaW5nID0gMX0sCiAgfQoKICBzaG90Z3VuLmlkeE1vZGVsID0gbG9hZF9lbnRpdHlfbW9kZWwoImNyb3NzYm93LmdsYiIpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZlbnRpdHlfbW9kZWxzW3Nob3RndW4uaWR4TW9kZWxdLCBzeW50eV9tYXQpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfc2hvdGd1bikKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfc2hvdGd1bikKICBzaG90Z3VudmZ4c2VzID0gbWFrZShbZHluYW1pY11Db25lVkZYKQp9Cgp1cGRhdGVfc2hvdGd1biA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIGNoaWxkX3BvcyA6PSBmbG9hdDNfdXAgKyBlbnRpdHlfcmlnaHQocGxheWVyKSAqIDAuMjUKCiAgaWYgY29yZV9pbnB1dC5zaG9vdFRyaWdnZXJlZCAmJiB0aW1lX25vdyA+IHNob3RndW4udHNSZWFkeSB7CiAgICBzaG90Z3VuLnRzUmVhZHkgPSB0aW1lX25vdyArIHNob3RndW4uc2hvdF9pbnRlcnZhbAogICAgdGFyZ2V0cyA6PSBnZXRfZW5lbWllc19pbl9jb25lKHBsYXllci5wb3NpdGlvbiwgcGxheWVyLmZvcndhcmQsIHNob3RndW4uY29uZV9hbmdsZSwgc2hvdGd1bi5yYW5nZSkKICAgIGZvciBoIGluIHRhcmdldHMgewogICAgICB0YXJnZXQgOj0gZ2V0X2VudGl0eShoKQogICAgICB0YXJnZXQuc3RhdHMuaGVhbHRoIC09IHNob3RndW4uZGFtYWdlCgogICAgICAvL0RFQVRICiAgICAgIGlmIHRhcmdldC5zdGF0cy5oZWFsdGggPD0gMCB7CiAgICAgICAgdGFyZ2V0LmZsYWdzICs9IHsuZGVhZH0KCiAgICAgICAgZmlyZV9ldmVudCgKICAgICAgICAgIERlYXRoRXZlbnQgewogICAgICAgICAgICBkYW1hZ2UgPSBzaG90Z3VuLmRhbWFnZSwKICAgICAgICAgICAgZGlyZWN0aW9uID0gcGxheWVyLmZvcndhcmQsCiAgICAgICAgICAgIGZsYWdzID0gdGFyZ2V0LmZsYWdzLAogICAgICAgICAgICBwb3MgPSB0YXJnZXQucG9zaXRpb24sCiAgICAgICAgICAgIHdlYXBvbklkID0gc2hvdGd1bi5pZCwKICAgICAgICAgIH0sCiAgICAgICAgKQogICAgICB9CiAgICB9CgogICAga25vY2tiYWNrKHBsYXllciwgLXBsYXllci5mb3J3YXJkLCAxNSwgMykKCiAgICBjYW1lcmFfc2hha2UoLnNtYWxsKQogICAgc2hvdGd1bi5yZWNvaWwudCA9IDEKCiAgICAvL3RlbXAgdmZ4CiAgICBjb25lIDo9IENvbmVWRlggewogICAgICBsaWZldGltZSA9IDEuMCwKICAgICAgY2VudGVyICAgPSBwbGF5ZXIucG9zaXRpb24sCiAgICAgIGZvcndhcmQgID0gcGxheWVyLmZvcndhcmQsCiAgICAgIHJhbmdlICAgID0gc2hvdGd1bi5yYW5nZSwKICAgICAgYW5nbGUgICAgPSBzaG90Z3VuLmNvbmVfYW5nbGUsCiAgICB9CiAgICBhcHBlbmQoJnNob3RndW52ZnhzZXMsIGNvbmUpCiAgfQoKCiAgLy9SRUNPSUwgQU5JTUFUSU9OCiAgdCwga2lja19vZmZzZXQgOj0gd2VhcG9uX3JlY29pbChzaG90Z3VuLnJlY29pbCkKICBzaG90Z3VuLnJlY29pbC50ID0gdAogIGVudGl0eV9tb2RlbHNbc2hvdGd1bi5pZHhNb2RlbF0udHJhbnNmb3JtID0gbWF0cml4X3RycygKICAgIGxpbmFsZy5tdWwocGxheWVyLnJvdGF0aW9uLCBraWNrX29mZnNldCkgKyBjaGlsZF9wb3MsCiAgICBmbG9hdDNfb25lICogMiwKICAgIGxpbmFsZy5tdWwocGxheWVyLnJvdGF0aW9uLCBybC5RdWF0ZXJuaW9uRnJvbU1hdHJpeChybC5NYXRyaXhSb3RhdGVZKFJBRF8xODApKSksCiAgKQp9Cgp3ZWFwb25fcmVjb2lsIDo6IHByb2MocmVjb2lsOiBSZWNvaWwpIC0+ICh0OiBmbG9hdCwga2lja19vZmZzZXQ6IGZsb2F0MykgCnsKICBraWNrTWF4IDo9IGZsb2F0M3swLCAwLCByZWNvaWwucmVjb2lsS2lja30KICBlYXNlIDo9IGVhc2VfY3ViaWNfaW4ocmVjb2lsLnQpCiAgb2Zmc2V0IDo9IGxpbmFsZy5sZXJwKGZsb2F0M196ZXJvLCBraWNrTWF4LCBlYXNlKQogIHJldHVybiBsaW5hbGcuY2xhbXAocmVjb2lsLnQgLSBkdCAqIHJlY29pbC5zcHJpbmcsIDAsIDEpLCBvZmZzZXQKfQoKZHJhd19zaG90Z3VuIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKICBybC5EcmF3TW9kZWwoZW50aXR5X21vZGVsc1tzaG90Z3VuLmlkeE1vZGVsXSwgcGxheWVyLnBvc2l0aW9uLCAxLCBybC5XSElURSkKCiAgZm9yICZ2LCBpIGluIHNob3RndW52ZnhzZXMgewogICAgdi5saWZldGltZSAtPSBkdAogICAgaGFsZl9hbmdsZSA6PSByYWRpYW5zKHYuYW5nbGUgLyAyKQogICAgZndkIDo9IHYuZm9yd2FyZAogICAgcDEgOj0gdi5jZW50ZXIgKyBybC5WZWN0b3IzUm90YXRlQnlBeGlzQW5nbGUoZndkLCBmbG9hdDNfdXAsIGhhbGZfYW5nbGUpICogdi5yYW5nZQogICAgcDIgOj0gdi5jZW50ZXIgKyBybC5WZWN0b3IzUm90YXRlQnlBeGlzQW5nbGUoZndkLCBmbG9hdDNfdXAsIC1oYWxmX2FuZ2xlKSAqIHYucmFuZ2UKICAgIHJsLkRyYXdMaW5lM0Qodi5jZW50ZXIgKyBmbG9hdDNfdXAsIHAxICsgZmxvYXQzX3VwLCBybC5SRUQpCiAgICBybC5EcmF3TGluZTNEKHYuY2VudGVyICsgZmxvYXQzX3VwLCBwMiArIGZsb2F0M191cCwgcmwuUkVEKQoKICAgIGlmIHYubGlmZXRpbWUgPCAwIHsKICAgICAgdW5vcmRlcmVkX3JlbW92ZSgmc2hvdGd1bnZmeHNlcywgaSkKICAgIH0KICB9Cn0KCgpnZXRfZW5lbWllc19pbl9jb25lIDo6IHByb2MocG9zLCBmb3J3YXJkOiBmbG9hdDMsIGFuZ2xlLCByYW5nZTogZmxvYXQpIC0+IFtkeW5hbWljXUVudGl0eUhhbmRsZSAKewogIGxpc3QgOj0gbWFrZShbZHluYW1pY11FbnRpdHlIYW5kbGUsIGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgaGFsZl9hbmdsZSA6PSByYWRpYW5zKGFuZ2xlIC8gMikKICBjb3NfaGFsZl9hbmdsZSA6PSBtYXRoLmNvcyhoYWxmX2FuZ2xlKQogIGZvciBoIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGgpCiAgICBkaXIgOj0gZS5wb3NpdGlvbiAtIHBvcwogICAgZG90IDo9IGxpbmFsZy5kb3Qobm9ybShkaXIpLCBmb3J3YXJkKQogICAgaWYgZG90ID49IGNvc19oYWxmX2FuZ2xlICYmIGxpbmFsZy5sZW5ndGgoZGlyKSA8IHJhbmdlIHsKICAgICAgYXBwZW5kKCZsaXN0LCBoKQogICAgfQogIH0KICByZXR1cm4gbGlzdAp9Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					141,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "package main\r\n\r\nimport \"core:log\"\r\nimport \"core:math\"\r\nimport \"core:math/linalg\"\r\nimport rl \"vendor:raylib\"\r\n\r\n\r\nShotgun :: struct {\r\n  damage:        float,\r\n  shot_interval: float,\r\n  cone_angle:    float,\r\n  range:         float,\r\n  tsReady:       float,\r\n  idxModel:      int,\r\n  recoil:        Recoil,\r\n  id:            int,\r\n}\r\n\r\nRecoil :: struct {\r\n  t:          float,\r\n  recoilKick: float,\r\n  spring:     float,\r\n}\r\n\r\nConeVFX :: struct {\r\n  lifetime: float,\r\n  center:   float3,\r\n  forward:  float3,\r\n  range:    float,\r\n  angle:    float,\r\n}\r\n\r\nshotgun: Shotgun\r\nshotgunvfxses: [dynamic]ConeVFX\r\n\r\ncreate_shotgun :: proc() \r\n{\r\n  shotgun = Shotgun {\r\n    damage = 50,\r\n    shot_interval = 1.5,\r\n    cone_angle = 60,\r\n    range = 4,\r\n    recoil = Recoil{recoilKick = 0.4, spring = 1},\r\n  }\r\n\r\n  shotgun.idxModel = load_entity_model(\"crossbow.glb\")\r\n  assign_material_all_mats(&entity_models[shotgun.idxModel], synty_mat)\r\n\r\n  append(&update_procs, update_shotgun)\r\n  append(&draw_procs, draw_shotgun)\r\n  shotgunvfxses = make([dynamic]ConeVFX)\r\n}\r\n\r\nupdate_shotgun :: proc() \r\n{\r\n  player := get_entity(player_handle)\r\n  child_pos := float3_up + entity_right(player) * 0.25\r\n\r\n  if core_input.shootTriggered && time_now > shotgun.tsReady {\r\n    shotgun.tsReady = time_now + shotgun.shot_interval\r\n    targets := get_enemies_in_cone(player.position, player.forward, shotgun.cone_angle, shotgun.range)\r\n    for h in targets {\r\n      target := get_entity(h)\r\n      target.stats.health -= shotgun.damage\r\n\r\n      //DEATH\r\n      if target.stats.health <= 0 {\r\n        target.flags += {.dead}\r\n\r\n        fire_event(\r\n          DeathEvent {\r\n            damage = shotgun.damage,\r\n            direction = player.forward,\r\n            flags = target.flags,\r\n            pos = target.position,\r\n            weaponId = shotgun.id,\r\n          },\r\n        )\r\n      }\r\n    }\r\n\r\n    knockback(player, -player.forward, 15, 3)\r\n\r\n    camera_shake(.small)\r\n    shotgun.recoil.t = 1\r\n\r\n    //temp vfx\r\n    cone := ConeVFX {\r\n      lifetime = 1.0,\r\n      center   = player.position,\r\n      forward  = player.forward,\r\n      range    = shotgun.range,\r\n      angle    = shotgun.cone_angle,\r\n    }\r\n    append(&shotgunvfxses, cone)\r\n  }\r\n\r\n\r\n  //RECOIL ANIMATION\r\n  t, kick_offset := weapon_recoil(shotgun.recoil)\r\n  shotgun.recoil.t = t\r\n  entity_models[shotgun.idxModel].transform = matrix_trs(\r\n    linalg.mul(player.rotation, kick_offset) + child_pos,\r\n    float3_one * 2,\r\n    linalg.mul(player.rotation, rl.QuaternionFromMatrix(rl.MatrixRotateY(RAD_180))),\r\n  )\r\n}\r\n\r\nweapon_recoil :: proc(recoil: Recoil) -> (t: float, kick_offset: float3) \r\n{\r\n  kickMax := float3{0, 0, recoil.recoilKick}\r\n  ease := ease_cubic_in(recoil.t)\r\n  offset := linalg.lerp(float3_zero, kickMax, ease)\r\n  return linalg.clamp(recoil.t - dt * recoil.spring, 0, 1), offset\r\n}\r\n\r\ndraw_shotgun :: proc() \r\n{\r\n  player := get_player()\r\n  rl.DrawModel(entity_models[shotgun.idxModel], player.position, 1, rl.WHITE)\r\n\r\n  for &v, i in shotgunvfxses {\r\n    v.lifetime -= dt\r\n    half_angle := radians(v.angle / 2)\r\n    fwd := v.forward\r\n    p1 := v.center + rl.Vector3RotateByAxisAngle(fwd, float3_up, half_angle) * v.range\r\n    p2 := v.center + rl.Vector3RotateByAxisAngle(fwd, float3_up, -half_angle) * v.range\r\n    rl.DrawLine3D(v.center + float3_up, p1 + float3_up, rl.RED)\r\n    rl.DrawLine3D(v.center + float3_up, p2 + float3_up, rl.RED)\r\n\r\n    if v.lifetime < 0 {\r\n      unordered_remove(&shotgunvfxses, i)\r\n    }\r\n  }\r\n}\r\n\r\n\r\nget_enemies_in_cone :: proc(pos, forward: float3, angle, range: float) -> [dynamic]EntityHandle \r\n{\r\n  list := make([dynamic]EntityHandle, context.temp_allocator)\r\n  half_angle := radians(angle / 2)\r\n  cos_half_angle := math.cos(half_angle)\r\n  for h in enemies {\r\n    e := get_entity(h)\r\n    dir := e.position - pos\r\n    dot := linalg.dot(norm(dir), forward)\r\n    if dot >= cos_half_angle && linalg.length(dir) < range {\r\n      append(&list, h)\r\n    }\r\n  }\r\n  return list\r\n}\r\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 153
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAA5g4AAAAAAADmDgAAcGFja2FnZSBtYWluCgppbXBvcnQgImNvcmU6bG9nIgppbXBvcnQgImNvcmU6bWF0aCIKaW1wb3J0ICJjb3JlOm1hdGgvbGluYWxnIgppbXBvcnQgcmwgInZlbmRvcjpyYXlsaWIiCgoKU2hvdGd1biA6OiBzdHJ1Y3QgewogIGRhbWFnZTogICAgICAgIGZsb2F0LAogIHNob3RfaW50ZXJ2YWw6IGZsb2F0LAogIGNvbmVfYW5nbGU6ICAgIGZsb2F0LAogIHJhbmdlOiAgICAgICAgIGZsb2F0LAogIHRzUmVhZHk6ICAgICAgIGZsb2F0LAogIGlkeE1vZGVsOiAgICAgIGludCwKICByZWNvaWw6ICAgICAgICBSZWNvaWwsCiAgaWQ6ICAgICAgICAgICAgaW50LAp9CgpSZWNvaWwgOjogc3RydWN0IHsKICB0OiAgICAgICAgICBmbG9hdCwKICByZWNvaWxLaWNrOiBmbG9hdCwKICBzcHJpbmc6ICAgICBmbG9hdCwKfQoKQ29uZVZGWCA6OiBzdHJ1Y3QgewogIGxpZmV0aW1lOiBmbG9hdCwKICBjZW50ZXI6ICAgZmxvYXQzLAogIGZvcndhcmQ6ICBmbG9hdDMsCiAgcmFuZ2U6ICAgIGZsb2F0LAogIGFuZ2xlOiAgICBmbG9hdCwKfQoKc2hvdGd1bjogU2hvdGd1bgpzaG90Z3VudmZ4c2VzOiBbZHluYW1pY11Db25lVkZYCgpjcmVhdGVfc2hvdGd1biA6OiBwcm9jKCkgCnsKICBzaG90Z3VuID0gU2hvdGd1biB7CiAgICBkYW1hZ2UgPSA1MCwKICAgIHNob3RfaW50ZXJ2YWwgPSAxLjUsCiAgICBjb25lX2FuZ2xlID0gNjAsCiAgICByYW5nZSA9IDQsCiAgICByZWNvaWwgPSBSZWNvaWx7cmVjb2lsS2ljayA9IDAuNCwgc3ByaW5nID0gMX0sCiAgfQoKICBzaG90Z3VuLmlkeE1vZGVsID0gbG9hZF9lbnRpdHlfbW9kZWwoImNyb3NzYm93LmdsYiIpCiAgYXNzaWduX21hdGVyaWFsX2FsbF9tYXRzKCZlbnRpdHlfbW9kZWxzW3Nob3RndW4uaWR4TW9kZWxdLCBzeW50eV9tYXQpCgogIGFwcGVuZCgmdXBkYXRlX3Byb2NzLCB1cGRhdGVfc2hvdGd1bikKICBhcHBlbmQoJmRyYXdfcHJvY3MsIGRyYXdfc2hvdGd1bikKICBzaG90Z3VudmZ4c2VzID0gbWFrZShbZHluYW1pY11Db25lVkZYKQp9Cgp1cGRhdGVfc2hvdGd1biA6OiBwcm9jKCkgCnsKICBwbGF5ZXIgOj0gZ2V0X2VudGl0eShwbGF5ZXJfaGFuZGxlKQogIGNoaWxkX3BvcyA6PSBmbG9hdDNfdXAgKyBlbnRpdHlfcmlnaHQocGxheWVyKSAqIDAuMjUKCiAgaWYgY29yZV9pbnB1dC5zaG9vdFRyaWdnZXJlZCAmJiB0aW1lX25vdyA+IHNob3RndW4udHNSZWFkeSB7CiAgICBzaG90Z3VuLnRzUmVhZHkgPSB0aW1lX25vdyArIHNob3RndW4uc2hvdF9pbnRlcnZhbAogICAgdGFyZ2V0cyA6PSBnZXRfZW5lbWllc19pbl9jb25lKHBsYXllci5wb3NpdGlvbiwgcGxheWVyLmZvcndhcmQsIHNob3RndW4uY29uZV9hbmdsZSwgc2hvdGd1bi5yYW5nZSkKICAgIGZvciBoIGluIHRhcmdldHMgewogICAgICB0YXJnZXQgOj0gZ2V0X2VudGl0eShoKQogICAgICB0YXJnZXQuc3RhdHMuaGVhbHRoIC09IHNob3RndW4uZGFtYWdlCgogICAgICAvL0RFQVRICiAgICAgIGlmIHRhcmdldC5zdGF0cy5oZWFsdGggPD0gMCB7CiAgICAgICAgdGFyZ2V0LmZsYWdzICs9IHsuZGVhZH0KCiAgICAgICAgZmlyZV9ldmVudCgKICAgICAgICAgIERlYXRoRXZlbnQgewogICAgICAgICAgICBkYW1hZ2UgPSBzaG90Z3VuLmRhbWFnZSwKICAgICAgICAgICAgZGlyZWN0aW9uID0gcGxheWVyLmZvcndhcmQsCiAgICAgICAgICAgIGZsYWdzID0gdGFyZ2V0LmZsYWdzLAogICAgICAgICAgICBwb3MgPSB0YXJnZXQucG9zaXRpb24sCiAgICAgICAgICAgIHdlYXBvbklkID0gc2hvdGd1bi5pZCwKICAgICAgICAgIH0sCiAgICAgICAgKQogICAgICB9CiAgICB9CgogICAga25vY2tiYWNrKHBsYXllciwgLXBsYXllci5mb3J3YXJkLCAxNSwgMykKCiAgICBjYW1lcmFfc2hha2UoLnNtYWxsKQogICAgc2hvdGd1bi5yZWNvaWwudCA9IDEKCiAgICAvL3RlbXAgdmZ4CiAgICBjb25lIDo9IENvbmVWRlggewogICAgICBsaWZldGltZSA9IDEuMCwKICAgICAgY2VudGVyICAgPSBwbGF5ZXIucG9zaXRpb24sCiAgICAgIGZvcndhcmQgID0gcGxheWVyLmZvcndhcmQsCiAgICAgIHJhbmdlICAgID0gc2hvdGd1bi5yYW5nZSwKICAgICAgYW5nbGUgICAgPSBzaG90Z3VuLmNvbmVfYW5nbGUsCiAgICB9CiAgICBhcHBlbmQoJnNob3RndW52ZnhzZXMsIGNvbmUpCiAgfQoKCiAgLy9SRUNPSUwgQU5JTUFUSU9OCiAgdCwga2lja19vZmZzZXQgOj0gd2VhcG9uX3JlY29pbChzaG90Z3VuLnJlY29pbCkKICBzaG90Z3VuLnJlY29pbC50ID0gdAogIGVudGl0eV9tb2RlbHNbc2hvdGd1bi5pZHhNb2RlbF0udHJhbnNmb3JtID0gbWF0cml4X3RycygKICAgIGxpbmFsZy5tdWwocGxheWVyLnJvdGF0aW9uLCBraWNrX29mZnNldCkgKyBjaGlsZF9wb3MsCiAgICBmbG9hdDNfb25lICogMiwKICAgIGxpbmFsZy5tdWwocGxheWVyLnJvdGF0aW9uLCBybC5RdWF0ZXJuaW9uRnJvbU1hdHJpeChybC5NYXRyaXhSb3RhdGVZKFJBRF8xODApKSksCiAgKQp9Cgp3ZWFwb25fcmVjb2lsIDo6IHByb2MocmVjb2lsOiBSZWNvaWwpIC0+ICh0OiBmbG9hdCwga2lja19vZmZzZXQ6IGZsb2F0MykgCnsKICBraWNrTWF4IDo9IGZsb2F0M3swLCAwLCByZWNvaWwucmVjb2lsS2lja30KICBlYXNlIDo9IGVhc2VfY3ViaWNfaW4ocmVjb2lsLnQpCiAgb2Zmc2V0IDo9IGxpbmFsZy5sZXJwKGZsb2F0M196ZXJvLCBraWNrTWF4LCBlYXNlKQogIHJldHVybiBsaW5hbGcuY2xhbXAocmVjb2lsLnQgLSBkdCAqIHJlY29pbC5zcHJpbmcsIDAsIDEpLCBvZmZzZXQKfQoKZHJhd19zaG90Z3VuIDo6IHByb2MoKSAKewogIHBsYXllciA6PSBnZXRfcGxheWVyKCkKICBybC5EcmF3TW9kZWwoZW50aXR5X21vZGVsc1tzaG90Z3VuLmlkeE1vZGVsXSwgcGxheWVyLnBvc2l0aW9uLCAxLCBybC5XSElURSkKCiAgZm9yICZ2LCBpIGluIHNob3RndW52ZnhzZXMgewogICAgdi5saWZldGltZSAtPSBkdAogICAgaGFsZl9hbmdsZSA6PSByYWRpYW5zKHYuYW5nbGUgLyAyKQogICAgZndkIDo9IHYuZm9yd2FyZAogICAgcDEgOj0gdi5jZW50ZXIgKyBybC5WZWN0b3IzUm90YXRlQnlBeGlzQW5nbGUoZndkLCBmbG9hdDNfdXAsIGhhbGZfYW5nbGUpICogdi5yYW5nZQogICAgcDIgOj0gdi5jZW50ZXIgKyBybC5WZWN0b3IzUm90YXRlQnlBeGlzQW5nbGUoZndkLCBmbG9hdDNfdXAsIC1oYWxmX2FuZ2xlKSAqIHYucmFuZ2UKICAgIHJsLkRyYXdMaW5lM0Qodi5jZW50ZXIgKyBmbG9hdDNfdXAsIHAxICsgZmxvYXQzX3VwLCBybC5SRUQpCiAgICBybC5EcmF3TGluZTNEKHYuY2VudGVyICsgZmxvYXQzX3VwLCBwMiArIGZsb2F0M191cCwgcmwuUkVEKQoKICAgIGlmIHYubGlmZXRpbWUgPCAwIHsKICAgICAgdW5vcmRlcmVkX3JlbW92ZSgmc2hvdGd1bnZmeHNlcywgaSkKICAgIH0KICB9Cn0KCgpnZXRfZW5lbWllc19pbl9jb25lIDo6IHByb2MocG9zLCBmb3J3YXJkOiBmbG9hdDMsIGFuZ2xlLCByYW5nZTogZmxvYXQpIC0+IFtkeW5hbWljXUVudGl0eUhhbmRsZSAKewogIGxpc3QgOj0gbWFrZShbZHluYW1pY11FbnRpdHlIYW5kbGUsIGNvbnRleHQudGVtcF9hbGxvY2F0b3IpCiAgaGFsZl9hbmdsZSA6PSByYWRpYW5zKGFuZ2xlIC8gMikKICBjb3NfaGFsZl9hbmdsZSA6PSBtYXRoLmNvcyhoYWxmX2FuZ2xlKQogIGZvciBoIGluIGVuZW1pZXMgewogICAgZSA6PSBnZXRfZW50aXR5KGgpCiAgICBkaXIgOj0gZS5wb3NpdGlvbiAtIHBvcwogICAgZG90IDo9IGxpbmFsZy5kb3Qobm9ybShkaXIpLCBmb3J3YXJkKQogICAgaWYgZG90ID49IGNvc19oYWxmX2FuZ2xlICYmIGxpbmFsZy5sZW5ndGgoZGlyKSA8IHJhbmdlIHsKICAgICAgYXBwZW5kKCZsaXN0LCBoKQogICAgfQogIH0KICByZXR1cm4gbGlzdAp9Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "utils.odin",
			"settings":
			{
				"buffer_size": 3093,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "entity.odin",
			"settings":
			{
				"buffer_size": 3436,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"remove p",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"packageres",
				"PackageResourceViewer: Open Resource"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"new vi",
				"File: New View into File"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"brow",
				"Preferences: Browse Packages"
			],
			[
				"packages",
				"Package Control: List Packages"
			],
			[
				"format",
				"LSP: Format File"
			],
			[
				"installpackage",
				"Package Control: Install Package"
			],
			[
				"lsp enable",
				"LSP: Enable Language Server in Project"
			],
			[
				"build",
				"Build With: untitled"
			],
			[
				"dista",
				"Preferences: Settings – Distraction Free"
			],
			[
				"enable lsp",
				"LSP: Enable Language Server in Project"
			],
			[
				"lsp set",
				"Preferences: LSP Settings"
			],
			[
				"lsp sett",
				"Preferences: LSP Settings"
			],
			[
				"lsp",
				"Package Control: List Packages"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 376.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Odin Projects/Doom_Combat/src"
	],
	"file_history":
	[
		"/D/Odin Projects/Doom_Combat/src/shotgun.odin",
		"/D/Odin Projects/Doom_Combat/src/abilty_data.odin",
		"/D/Odin Projects/Doom_Combat/src/ability_shield_dash.odin",
		"/D/Odin Projects/Doom_Combat/src/player.odin",
		"/D/Odin Projects/Doom_Combat/src/entity.odin",
		"/D/Odin Projects/Doom_Combat/src/enemy.odin",
		"/D/Odin Projects/Doom_Combat/src/actionmap.odin",
		"/D/Odin Projects/Doom_Combat/src/ability_divine_armor.odin",
		"/D/Odin Projects/Doom_Combat/src/eventsystem.odin",
		"/C/odin/core/time/time.odin",
		"/C/odin/core/math/linalg/general.odin",
		"/D/Odin Projects/Doom_Combat/src/rifle.odin",
		"/D/Odin Projects/Doom_Combat/src/camera.odin",
		"/D/Odin Projects/Doom_Combat/src/crossbow.odin",
		"/D/Odin Projects/Doom_Combat/src/main.odin",
		"/D/Odin Projects/Doom_Combat/src/render.odin",
		"/D/Odin Projects/Doom_Combat/src/build.bat",
		"/D/Odin Projects/Doom_Combat/src/resources/shaders/default_lighting.fs",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/User/Preferences.sublime-settings",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/Default/Preferences.sublime-settings",
		"/D/Odin Projects/Doom_Combat/src/utils.odin",
		"/D/Odin Projects/Doom_Combat/src/playerstats.odin",
		"/D/Odin Projects/Doom_Combat/src/knockback.odin",
		"/D/Odin Projects/Doom_Combat/src/bullets.odin",
		"/D/Odin Projects/Doom_Combat/src/resources/Models/Prop_Barrel.glb",
		"/D/Odin Projects/Doom_Combat/src/lights.odin",
		"/D/Odin Projects/Doom_Combat/src/level_generator.odin",
		"/C/odin/vendor/raylib/raymath.odin",
		"/D/Odin Projects/Doom_Combat/src/meshutils.odin",
		"/C/odin/vendor/raylib/raylib.odin",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/ColorPicker/ColorPicker.sublime-settings",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/User/ColorPicker.sublime-settings",
		"/D/Odin Projects/Doom_Combat/src/aabb.odin",
		"/D/Odin Projects/Doom_Combat/src/resources/shaders/default_lighting.vs",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/User/LSP.sublime-settings",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/LSP/LSP.sublime-settings",
		"/C/odin/core/strings/strings.odin",
		"/C/odin/core/math/linalg/specific.odin",
		"/C/odin/core/math/linalg/extended.odin",
		"/C/odin/core/math/linalg/specific_euler_angles_f32.odin",
		"/C/odin/core/math/linalg/specific_euler_angles_f16.odin",
		"/C/odin/core/math/linalg/specific_euler_angles.odin",
		"/D/Odin Projects/Doom_Combat/src/resources/shaders/lighting.fs",
		"/C/odin/core/container/queue/queue.odin",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/PackageResourceViewer/README.md",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/User/ZenTabs.sublime-settings",
		"/D/Odin Projects/Doom_Combat/LICENSE",
		"/D/Odin Projects/Doom_Combat/src/resources/shaders/lighting_instanced.vs",
		"/C/odin/core/reflect/reflect.odin",
		"/C/odin/core/log/log.odin",
		"/C/odin/core/fmt/fmt_os.odin",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/User/dbl.sublime-snippet",
		"/C/odin/core/mem/alloc.odin",
		"/D/Odin Projects/Doom_Combat/src/resources/shaders/lighting.vs",
		"/D/Odin Projects/OdinTest1/src/particlesystem.odin",
		"/D/Unity Projects/SyntyDarkFantasyPack/Assets/Editor/ObjExporterScript.cs",
		"/D/Unity Projects/SyntyDarkFantasyPack/Assets/ObjExporter",
		"/D/Odin Projects/Doom_Combat/.gitignore",
		"/D/Odin Projects/Doom_Combat/gitignore",
		"/D/Odin Projects/EntitySystem/src/actionmap.odin",
		"/D/Odin Projects/EntitySystem/src/rifle.odin",
		"/D/Odin Projects/EntitySystem/src/bullets.odin",
		"/D/Odin Projects/EntitySystem/src/entity.odin",
		"/D/Odin Projects/EntitySystem/src/enemy.odin",
		"/D/Odin Projects/EntitySystem/src/camera.odin",
		"/D/Odin Projects/EntitySystem/src/player.odin",
		"/D/Odin Projects/EntitySystem/src/projectile.odin",
		"/D/Odin Projects/EntitySystem/src/main.odin",
		"/D/Odin Projects/EntitySystem/src/utils.odin",
		"/C/odin/core/sort/sort.odin",
		"/C/odin/core/slice/sort.odin",
		"/C/odin/core/flags/internal_parsing.odin",
		"/D/Odin Projects/EntitySystem/src/render.odin",
		"/D/Odin Projects/EntitySystem/src/level_generator.odin",
		"/C/odin/base/runtime/core.odin",
		"/D/Odin Projects/EntitySystem/src/resources/shaders/bright.fs",
		"/C/odin/core/text/table/utility.odin",
		"/C/odin/vendor/raylib/easings.odin",
		"/C/odin/core/math/rand/rand.odin",
		"/C/odin/core/math/math.odin",
		"/D/Odin Projects/EntitySystem/src/build.bat",
		"/D/Odin Projects/EntitySystem/src/resources/shaders/blur.fs",
		"/D/Odin Projects/EntitySystem/src/resources/shaders/unlit.fs",
		"/C/odin/core/sys/posix/unistd_libc.odin",
		"/D/Odin Projects/EntitySystem/src/resources/shaders/lighting.fs",
		"/D/Odin Projects/EntitySystem/src/resources/shaders/default.vert",
		"/D/Odin Projects/EntitySystem/src/bin/resources/shaders/bloom.fs",
		"/D/Odin Projects/EntitySystem/src/resources/shaders/brightness_extraction.frag",
		"/D/Odin Projects/EntitySystem/src/resources/shaders/composition.frag",
		"/D/Odin Projects/EntitySystem/src/resources/shaders/gaussian_blur.frag",
		"/D/Odin Projects/EntitySystem/src/resources/shaders/bloom.fs",
		"/C/odin/vendor/raylib/rlgl/rlgl.odin",
		"/D/Odin Projects/EntitySystem/src/input.odin",
		"/D/Odin Projects/EntitySystem/src/bloom.fs",
		"/C/odin/core/crypto/ristretto255/ristretto255.odin",
		"/D/Odin Projects/EntitySystem/src/playerstats.odin",
		"/C/odin/vendor/cgltf/cgltf.odin",
		"/D/Work/DRG/Assets/Scripts/Player.cs",
		"/D/Odin Projects/OdinTest1/src/Player.odin",
		"/C/odin/core/math/noise/opensimplex2.odin",
		"/D/Odin Projects/EntitySystem/src/camerashake.odin",
		"/C/odin/core/crypto/shake/shake.odin",
		"/D/Odin Projects/EntitySystem/src/PlayerStats",
		"/D/Odin Projects/EntitySystem/odinfmt.json",
		"/C/odin/ols-master/odinfmt.schema.json",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/User/Nord.sublime-color-scheme",
		"/C/Users/Martin/AppData/Roaming/Sublime Text/Packages/Nord/Nord.sublime-color-scheme",
		"/D/Odin Projects/EntitySystem/src/lights.odin",
		"/D/Odin Projects/EntitySystem/src/lighting.vs",
		"/D/Odin Projects/EntitySystem/src/lighting.fs",
		"/C/odin/core/sync/primitives_openbsd.odin",
		"/C/odin/core/sys/info/platform_linux.odin",
		"/D/Odin Projects/OdinTest1/src/main.odin",
		"/D/Odin Projects/OdinTest1/src/rifle.odin",
		"/D/Odin Projects/OdinTest1/src/Projectile.odin",
		"/D/Odin Projects/OdinTest1/src/utils.odin",
		"/D/Odin Projects/OdinTest1/resources/shaders/lighting.fs",
		"/D/Odin Projects/OdinTest1/src/todo.txt",
		"/C/odin/core/prof/spall/spall.odin",
		"/C/odin/vendor/vulkan/_gen/vulkan_core.h",
		"/C/odin/core/math/linalg/specific_euler_angles_f64.odin",
		"/D/Odin Projects/OdinTest1/build.bat",
		"/C/odin/vendor/vulkan/structs.odin",
		"/C/odin/vendor/sdl3/include/SDL_main.h",
		"/D/Odin Projects/OdinTest1/odintest.sublime-project",
		"/D/Odin Projects/OdinTest1/src/odintest.sublime-project"
	],
	"find":
	{
		"height": 42.0
	},
	"find_in_files":
	{
		"height": 122.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"num_swords",
			"private",
			"q"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3935,
						"regions":
						{
						},
						"selection":
						[
							[
								3303,
								3303
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"color_helper.refresh": true,
							"color_helper.scan":
							{
								"allow_scanning": false,
								"color_class":
								[
									{
										"class": "css-level-4",
										"scopes": ""
									}
								],
								"color_trigger": "(?xi)\n(?:\n    \\b(?<![-#&$])(?:\n        color\\((?!\\s*-)|(?:hsla?|(?:ok)?(?:lch|lab)|hwb|rgba?)\\(\n) |\n\\b(?<![-#&$])[\\w]{3,}(?![(-])\\b|(?<![&])\\#)\n",
								"current_ext": ".odin",
								"current_syntax": "Odin/Odin",
								"enabled": true,
								"last_updated": 1754320789.87,
								"scanning": "-comment"
							},
							"lsp_active": true,
							"lsp_uri": "file:///D:/Odin%20Projects/Doom_Combat/src/main.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2872.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "doom_combat.sublime-project",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 205,
						"regions":
						{
						},
						"selection":
						[
							[
								205,
								205
							]
						],
						"settings":
						{
							"color_helper.scan":
							{
								"allow_scanning": false,
								"color_class":
								[
									{
										"class": "css-level-4",
										"scopes": ""
									}
								],
								"color_trigger": "(?xi)\n(?:\n    \\b(?<![-#&$])(?:\n        color\\((?!\\s*-)|(?:hsla?|(?:ok)?(?:lch|lab)|hwb|rgba?)\\(\n) |\n\\b(?<![-#&$])[\\w]{3,}(?![(-])\\b|(?<![&])\\#)\n",
								"current_ext": ".sublime-project",
								"current_syntax": "JSON/JSON",
								"enabled": true,
								"last_updated": 1754320789.87,
								"scanning": "-comment"
							},
							"lsp_uri": "file:///D:/Odin%20Projects/Doom_Combat/src/doom_combat.sublime-project",
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "player.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4173,
						"regions":
						{
						},
						"selection":
						[
							[
								1097,
								1097
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"color_helper.refresh": true,
							"lsp_active": true,
							"lsp_uri": "file:///D:/Odin%20Projects/Doom_Combat/src/player.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 418.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "actionmap.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1470,
						"regions":
						{
						},
						"selection":
						[
							[
								310,
								310
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"color_helper.refresh": true,
							"lsp_active": true,
							"lsp_uri": "file:///D:/Odin%20Projects/Doom_Combat/src/actionmap.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "enemy.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2475,
						"regions":
						{
						},
						"selection":
						[
							[
								139,
								139
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"color_helper.refresh": true,
							"lsp_active": true,
							"lsp_uri": "file:///D:/Odin%20Projects/Doom_Combat/src/enemy.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "ability_divine_weapons.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4065,
						"regions":
						{
						},
						"selection":
						[
							[
								1812,
								1812
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"color_helper.refresh": true,
							"lsp_active": true,
							"lsp_uri": "file:///D:/Odin%20Projects/Doom_Combat/src/ability_divine_weapons.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1074.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "shotgun.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3814,
						"regions":
						{
						},
						"selection":
						[
							[
								926,
								926
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"color_helper.refresh": true,
							"lsp_active": true,
							"lsp_uri": "file:///D:/Odin%20Projects/Doom_Combat/src/shotgun.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 23.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "utils.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3093,
						"regions":
						{
						},
						"selection":
						[
							[
								510,
								510
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"color_helper.refresh": true,
							"lsp_active": true,
							"lsp_uri": "file:///D:/Odin%20Projects/Doom_Combat/src/utils.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 5,
					"file": "ability_divine_weapons.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4065,
						"regions":
						{
						},
						"selection":
						[
							[
								1076,
								1076
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"color_helper.refresh": true,
							"color_helper.scan":
							{
								"allow_scanning": false,
								"color_class":
								[
									{
										"class": "css-level-4",
										"scopes": ""
									}
								],
								"color_trigger": "(?xi)\n(?:\n    \\b(?<![-#&$])(?:\n        color\\((?!\\s*-)|(?:hsla?|(?:ok)?(?:lch|lab)|hwb|rgba?)\\(\n) |\n\\b(?<![-#&$])[\\w]{3,}(?![(-])\\b|(?<![&])\\#)\n",
								"current_ext": ".odin",
								"current_syntax": "Odin/Odin",
								"enabled": true,
								"last_updated": 1754320789.87,
								"scanning": "-comment"
							},
							"lsp_active": true,
							"lsp_uri": "file:///D:/Odin%20Projects/Doom_Combat/src/ability_divine_weapons.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 693.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "player.odin",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4173,
						"regions":
						{
						},
						"selection":
						[
							[
								695,
								695
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"color_helper.scan":
							{
								"allow_scanning": false,
								"color_class":
								[
									{
										"class": "css-level-4",
										"scopes": ""
									}
								],
								"color_trigger": "(?xi)\n(?:\n    \\b(?<![-#&$])(?:\n        color\\((?!\\s*-)|(?:hsla?|(?:ok)?(?:lch|lab)|hwb|rgba?)\\(\n) |\n\\b(?<![-#&$])[\\w]{3,}(?![(-])\\b|(?<![&])\\#)\n",
								"current_ext": ".odin",
								"current_syntax": "Odin/Odin",
								"enabled": true,
								"last_updated": 1754320789.87,
								"scanning": "-comment"
							},
							"lsp_active": true,
							"lsp_uri": "file:///D:/Odin%20Projects/Doom_Combat/src/player.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "entity.odin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3436,
						"regions":
						{
						},
						"selection":
						[
							[
								154,
								154
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".>#\"/:",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "odin"
								}
							],
							"color_helper.scan":
							{
								"allow_scanning": false,
								"color_class":
								[
									{
										"class": "css-level-4",
										"scopes": ""
									}
								],
								"color_trigger": "(?xi)\n(?:\n    \\b(?<![-#&$])(?:\n        color\\((?!\\s*-)|(?:hsla?|(?:ok)?(?:lch|lab)|hwb|rgba?)\\(\n) |\n\\b(?<![-#&$])[\\w]{3,}(?![(-])\\b|(?<![&])\\#)\n",
								"current_ext": ".odin",
								"current_syntax": "Odin/Odin",
								"enabled": true,
								"last_updated": 1754320789.87,
								"scanning": "-comment"
							},
							"lsp_active": true,
							"lsp_uri": "file:///D:/Odin%20Projects/Doom_Combat/src/entity.odin",
							"show_definitions": false,
							"syntax": "Packages/Odin/Odin.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 47.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.diagnostics":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.exec":
	{
		"height": 444.0,
		"history":
		[
		]
	},
	"output.find_results":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.mdpopups":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"pinned_build_system": "sublime_odin_template",
	"project": "doom_combat.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ent",
				"src\\entity.odin"
			],
			[
				"player",
				"src\\player.odin"
			],
			[
				"dvi",
				"src\\ability_divine_weapons.odin"
			],
			[
				"shot",
				"src\\shotgun.odin"
			],
			[
				"divin",
				"src\\ability_divine_armor.odin"
			],
			[
				"play",
				"src\\player.odin"
			],
			[
				"abi",
				"src\\ability_shield_dash.odin"
			],
			[
				"ab",
				"src\\ability_divine_armor.odin"
			],
			[
				"enti",
				"src\\entity.odin"
			],
			[
				"enen",
				"src\\enemy.odin"
			],
			[
				"acio",
				"src\\actionmap.odin"
			],
			[
				"shotg",
				"src\\shotgun.odin"
			],
			[
				"main",
				"src\\main.odin"
			],
			[
				"b",
				"src\\build.bat"
			],
			[
				"pla",
				"src\\player.odin"
			],
			[
				".fs",
				"src\\resources\\shaders\\default_lighting.fs"
			],
			[
				"ene",
				"src\\enemy.odin"
			],
			[
				"even",
				"src\\eventsystem_enemydeath.odin"
			],
			[
				"fs",
				"src\\resources\\shaders\\default_lighting.fs"
			],
			[
				"utis",
				"src\\utils.odin"
			],
			[
				"bull",
				"src\\bullets.odin"
			],
			[
				"pro",
				"src\\resources\\Models\\Prop_Barrel.glb"
			],
			[
				"lig",
				"src\\lights.odin"
			],
			[
				"cam",
				"src\\camera.odin"
			],
			[
				"level",
				"src\\level_generator.odin"
			],
			[
				"light",
				"src\\lights.odin"
			],
			[
				"rif",
				"src\\rifle.odin"
			],
			[
				"utils",
				"src\\utils.odin"
			],
			[
				"crossb",
				"src\\crossbow.odin"
			],
			[
				"ligh",
				"src\\lights.odin"
			],
			[
				"ut",
				"src\\utils.odin"
			],
			[
				"ma",
				"src\\main.odin"
			],
			[
				"def",
				"src\\resources\\shaders\\default_lighting.fs"
			],
			[
				"cross",
				"src\\crossbow.odin"
			],
			[
				"bui",
				"src\\build.bat"
			],
			[
				"render",
				"src\\render.odin"
			],
			[
				".vs",
				"src\\resources\\shaders\\default_lighting.vs"
			],
			[
				"crossbo",
				"src\\crossbow.odin"
			],
			[
				"en",
				"src\\enemy.odin"
			],
			[
				"cro",
				"src\\crossbow.odin"
			],
			[
				"enem",
				"src\\enemy.odin"
			],
			[
				"leve",
				"src\\level_generator.odin"
			],
			[
				"pl",
				"src\\player.odin"
			],
			[
				"bullet",
				"Doom_Combat\\src\\bullets.odin"
			],
			[
				"levelg",
				"Doom_Combat\\src\\level_generator.odin"
			],
			[
				"li",
				"Doom_Combat\\src\\lights.odin"
			],
			[
				"bullets",
				"Doom_Combat\\src\\bullets.odin"
			],
			[
				"",
				"Doom_Combat\\src\\bullets.odin"
			],
			[
				"levle",
				"Doom_Combat\\src\\level_generator.odin"
			],
			[
				"levl",
				"Doom_Combat\\src\\level_generator.odin"
			],
			[
				"leveg",
				"Doom_Combat\\src\\level_generator.odin"
			],
			[
				"lightin",
				"Doom_Combat\\src\\resources\\shaders\\lighting_instanced.vs"
			],
			[
				"lights",
				"Doom_Combat\\src\\lights.odin"
			],
			[
				"actio",
				"Doom_Combat\\src\\actionmap.odin"
			],
			[
				"rifle",
				"src\\rifle.odin"
			],
			[
				"camera",
				"src\\camera.odin"
			],
			[
				"giti",
				".gitignore"
			],
			[
				"proj",
				"EntitySystem\\src\\projectile.odin"
			],
			[
				"action",
				"EntitySystem\\src\\actionmap.odin"
			],
			[
				"inp",
				"core\\flags\\internal_parsing.odin"
			],
			[
				"rend",
				"EntitySystem\\src\\render.odin"
			],
			[
				"porj",
				"EntitySystem\\src\\projectile.odin"
			],
			[
				"ply",
				"EntitySystem\\src\\player.odin"
			],
			[
				"entiy",
				"EntitySystem\\src\\entity.odin"
			],
			[
				"builtin",
				"core\\text\\table\\utility.odin"
			],
			[
				"re",
				"EntitySystem\\src\\render.odin"
			],
			[
				"enemy",
				"EntitySystem\\src\\enemy.odin"
			],
			[
				"uti",
				"EntitySystem\\src\\utils.odin"
			],
			[
				"easin",
				"vendor\\raylib\\easings.odin"
			],
			[
				"pr",
				"EntitySystem\\src\\projectile.odin"
			],
			[
				"unlit",
				"EntitySystem\\src\\resources\\shaders\\unlit.fs"
			],
			[
				"unl",
				"core\\sys\\posix\\unistd_libc.odin"
			],
			[
				"ri",
				"EntitySystem\\src\\rifle.odin"
			],
			[
				"blur",
				"EntitySystem\\src\\resources\\shaders\\blur.fs"
			],
			[
				"bri",
				"EntitySystem\\src\\resources\\shaders\\bright.fs"
			],
			[
				"ren",
				"EntitySystem\\src\\render.odin"
			],
			[
				"blo",
				"EntitySystem\\src\\bin\\resources\\shaders\\bloom.fs"
			],
			[
				"bloo",
				"EntitySystem\\src\\resources\\shaders\\bloom.fs"
			],
			[
				"rifl",
				"EntitySystem\\src\\rifle.odin"
			],
			[
				"input.",
				"EntitySystem\\src\\input.odin"
			],
			[
				"compo",
				"EntitySystem\\src\\resources\\shaders\\composition.frag"
			],
			[
				"bloom",
				"EntitySystem\\src\\resources\\shaders\\bloom.fs"
			],
			[
				"m",
				"EntitySystem\\src\\main.odin"
			],
			[
				"mai",
				"EntitySystem\\src\\main.odin"
			],
			[
				"ca",
				"EntitySystem\\src\\camera.odin"
			],
			[
				"playeri",
				"EntitySystem\\src\\player.odin"
			],
			[
				"eas",
				"vendor\\raylib\\easings.odin"
			],
			[
				"playersta",
				"EntitySystem\\src\\playerstats.odin"
			],
			[
				"lev",
				"EntitySystem\\src\\level_generator.odin"
			],
			[
				"cameras",
				"EntitySystem\\src\\camerashake.odin"
			],
			[
				"shak",
				"core\\crypto\\shake\\shake.odin"
			],
			[
				"cams",
				"src\\camerashake.odin"
			],
			[
				"sha",
				"src\\camerashake.odin"
			],
			[
				"camer",
				"src\\camerashake.odin"
			],
			[
				"ps",
				"src\\playerstats.odin"
			],
			[
				"playersts",
				"src\\PlayerStats"
			],
			[
				"stats",
				"src\\PlayerStats"
			],
			[
				"players",
				"src\\playerstats.odin"
			],
			[
				"playest",
				"src\\PlayerStats"
			],
			[
				"e",
				"src\\entity.odin"
			],
			[
				"plau",
				"core\\sys\\info\\platform_linux.odin"
			],
			[
				"buid",
				"EntitySystem\\src\\build.bat"
			],
			[
				"part",
				"OdinTest1\\src\\particlesystem.odin"
			],
			[
				"build",
				"OdinTest1\\build.bat"
			],
			[
				"par",
				"src\\particlesystem.odin"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 323.0,
		"last_filter": "parti",
		"selected_items":
		[
			[
				"parti",
				"Particle"
			],
			[
				"particle",
				"ParticleSystem"
			],
			[
				"tick_pl",
				"tick_player"
			],
			[
				"particlesys",
				"ParticleSystem"
			],
			[
				"main",
				"main"
			],
			[
				"tickplayer",
				"tick_player"
			],
			[
				"tick_pla",
				"tick_player"
			],
			[
				"init_part",
				"init_particlesystems"
			],
			[
				"player",
				"init_player"
			],
			[
				"player_",
				"Player_Input"
			],
			[
				"init_pla",
				"init_player"
			],
			[
				"partci",
				"VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL"
			],
			[
				"particles",
				"draw_particles"
			],
			[
				"tickpar",
				"tick_particles"
			],
			[
				"spawnpar",
				"spawn_particlesystem_test"
			],
			[
				"particlete",
				"spawn_particlesystem_test"
			],
			[
				"drawpar",
				"draw_particles"
			],
			[
				"float3_z",
				"float3_zero"
			],
			[
				"float3",
				"float3"
			],
			[
				"alg",
				"alg"
			],
			[
				"camera",
				"Camera"
			],
			[
				"draw_pa",
				"draw_particles"
			],
			[
				"drawpart",
				"draw_particles"
			],
			[
				"drawpa",
				"DrawPlane"
			],
			[
				"tick pa",
				"tick_particles"
			],
			[
				"tick pl",
				"tick_player"
			],
			[
				"draw",
				"draw_particles"
			],
			[
				"eitter",
				"ParticleEmitterMode"
			],
			[
				"pa",
				"ParticleSystem"
			],
			[
				"partic",
				"ParticleEmitter"
			],
			[
				"part",
				"ParticleSystem"
			],
			[
				"par",
				"ParticleSystem"
			],
			[
				"init",
				"init_player"
			],
			[
				"tick",
				"tick_particles"
			],
			[
				"ent",
				"Entity"
			]
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
		"lsp_show_inlay_hints": false
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 272.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
